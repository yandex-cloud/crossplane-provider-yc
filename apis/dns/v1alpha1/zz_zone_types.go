/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ZoneInitParameters struct {

	// (Boolean) Flag that protects the dns zone from accidental deletion.
	// Flag that protects the dns zone from accidental deletion.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// (String) Description of the DNS zone.
	// Description of the DNS zone.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// (Map of String) A set of key/value label pairs to assign to the DNS zone.
	// A set of key/value label pairs to assign to the DNS zone.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) User assigned name of a specific resource. Must be unique within the folder.
	// User assigned name of a specific resource. Must be unique within the folder.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	// +listType=set
	PrivateNetworks []*string `json:"privateNetworks,omitempty" tf:"private_networks,omitempty"`

	// References to Network in vpc to populate privateNetworks.
	// +kubebuilder:validation:Optional
	PrivateNetworksRefs []v1.Reference `json:"privateNetworksRefs,omitempty" tf:"-"`

	// Selector for a list of Network in vpc to populate privateNetworks.
	// +kubebuilder:validation:Optional
	PrivateNetworksSelector *v1.Selector `json:"privateNetworksSelector,omitempty" tf:"-"`

	// (Boolean) The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// (String) The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneObservation struct {

	// (String) The DNS zone creation timestamp.
	// The DNS zone creation timestamp.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean) Flag that protects the dns zone from accidental deletion.
	// Flag that protects the dns zone from accidental deletion.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// (String) Description of the DNS zone.
	// Description of the DNS zone.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) A set of key/value label pairs to assign to the DNS zone.
	// A set of key/value label pairs to assign to the DNS zone.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) User assigned name of a specific resource. Must be unique within the folder.
	// User assigned name of a specific resource. Must be unique within the folder.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	// +listType=set
	PrivateNetworks []*string `json:"privateNetworks,omitempty" tf:"private_networks,omitempty"`

	// (Boolean) The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// (String) The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type ZoneParameters struct {

	// (Boolean) Flag that protects the dns zone from accidental deletion.
	// Flag that protects the dns zone from accidental deletion.
	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// (String) Description of the DNS zone.
	// Description of the DNS zone.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// (Map of String) A set of key/value label pairs to assign to the DNS zone.
	// A set of key/value label pairs to assign to the DNS zone.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) User assigned name of a specific resource. Must be unique within the folder.
	// User assigned name of a specific resource. Must be unique within the folder.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String) For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	// +listType=set
	PrivateNetworks []*string `json:"privateNetworks,omitempty" tf:"private_networks,omitempty"`

	// References to Network in vpc to populate privateNetworks.
	// +kubebuilder:validation:Optional
	PrivateNetworksRefs []v1.Reference `json:"privateNetworksRefs,omitempty" tf:"-"`

	// Selector for a list of Network in vpc to populate privateNetworks.
	// +kubebuilder:validation:Optional
	PrivateNetworksSelector *v1.Selector `json:"privateNetworksSelector,omitempty" tf:"-"`

	// (Boolean) The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	// +kubebuilder:validation:Optional
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// (String) The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

// ZoneSpec defines the desired state of Zone
type ZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ZoneParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ZoneInitParameters `json:"initProvider,omitempty"`
}

// ZoneStatus defines the observed state of Zone.
type ZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Zone is the Schema for the Zones API. Manages a DNS Zone within Yandex.Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Zone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zone) || (has(self.initProvider) && has(self.initProvider.zone))",message="spec.forProvider.zone is a required parameter"
	Spec   ZoneSpec   `json:"spec"`
	Status ZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ZoneList contains a list of Zones
type ZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Zone `json:"items"`
}

// Repository type metadata.
var (
	Zone_Kind             = "Zone"
	Zone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Zone_Kind}.String()
	Zone_KindAPIVersion   = Zone_Kind + "." + CRDGroupVersion.String()
	Zone_GroupVersionKind = CRDGroupVersion.WithKind(Zone_Kind)
)

func init() {
	SchemeBuilder.Register(&Zone{}, &ZoneList{})
}
