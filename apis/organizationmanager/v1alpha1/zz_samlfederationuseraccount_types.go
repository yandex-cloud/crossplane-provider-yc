/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SAMLFederationUserAccountInitParameters struct {

	// (String) ID of a SAML Federation.
	// ID of a SAML Federation.
	FederationID *string `json:"federationId,omitempty" tf:"federation_id,omitempty"`

	// (String) Name ID of the SAML federated user.
	// Name ID of the SAML federated user.
	NameID *string `json:"nameId,omitempty" tf:"name_id,omitempty"`
}

type SAMLFederationUserAccountObservation struct {

	// (String) ID of a SAML Federation.
	// ID of a SAML Federation.
	FederationID *string `json:"federationId,omitempty" tf:"federation_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name ID of the SAML federated user.
	// Name ID of the SAML federated user.
	NameID *string `json:"nameId,omitempty" tf:"name_id,omitempty"`
}

type SAMLFederationUserAccountParameters struct {

	// (String) ID of a SAML Federation.
	// ID of a SAML Federation.
	// +kubebuilder:validation:Optional
	FederationID *string `json:"federationId,omitempty" tf:"federation_id,omitempty"`

	// (String) Name ID of the SAML federated user.
	// Name ID of the SAML federated user.
	// +kubebuilder:validation:Optional
	NameID *string `json:"nameId,omitempty" tf:"name_id,omitempty"`
}

// SAMLFederationUserAccountSpec defines the desired state of SAMLFederationUserAccount
type SAMLFederationUserAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SAMLFederationUserAccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SAMLFederationUserAccountInitParameters `json:"initProvider,omitempty"`
}

// SAMLFederationUserAccountStatus defines the observed state of SAMLFederationUserAccount.
type SAMLFederationUserAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SAMLFederationUserAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SAMLFederationUserAccount is the Schema for the SAMLFederationUserAccounts API. Allows management of a single SAML Federation user account within an existing Yandex Cloud Organization.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type SAMLFederationUserAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.federationId) || (has(self.initProvider) && has(self.initProvider.federationId))",message="spec.forProvider.federationId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nameId) || (has(self.initProvider) && has(self.initProvider.nameId))",message="spec.forProvider.nameId is a required parameter"
	Spec   SAMLFederationUserAccountSpec   `json:"spec"`
	Status SAMLFederationUserAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SAMLFederationUserAccountList contains a list of SAMLFederationUserAccounts
type SAMLFederationUserAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SAMLFederationUserAccount `json:"items"`
}

// Repository type metadata.
var (
	SAMLFederationUserAccount_Kind             = "SAMLFederationUserAccount"
	SAMLFederationUserAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SAMLFederationUserAccount_Kind}.String()
	SAMLFederationUserAccount_KindAPIVersion   = SAMLFederationUserAccount_Kind + "." + CRDGroupVersion.String()
	SAMLFederationUserAccount_GroupVersionKind = CRDGroupVersion.WithKind(SAMLFederationUserAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&SAMLFederationUserAccount{}, &SAMLFederationUserAccountList{})
}
