/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAddressACLInitParameters struct {

	// the list of specified IP addresses to be allowed or denied depending on acl policy type.
	ExceptedValues []*string `json:"exceptedValues,omitempty" tf:"excepted_values,omitempty"`

	// the policy type for ip_address_acl option, one of "allow" or "deny" values.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

type IPAddressACLObservation struct {

	// the list of specified IP addresses to be allowed or denied depending on acl policy type.
	ExceptedValues []*string `json:"exceptedValues,omitempty" tf:"excepted_values,omitempty"`

	// the policy type for ip_address_acl option, one of "allow" or "deny" values.
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

type IPAddressACLParameters struct {

	// the list of specified IP addresses to be allowed or denied depending on acl policy type.
	// +kubebuilder:validation:Optional
	ExceptedValues []*string `json:"exceptedValues,omitempty" tf:"excepted_values,omitempty"`

	// the policy type for ip_address_acl option, one of "allow" or "deny" values.
	// +kubebuilder:validation:Optional
	PolicyType *string `json:"policyType,omitempty" tf:"policy_type,omitempty"`
}

type OptionsInitParameters struct {

	// HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.
	AllowedHTTPMethods []*string `json:"allowedHttpMethods,omitempty" tf:"allowed_http_methods,omitempty"`

	// set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.
	BrowserCacheSettings *float64 `json:"browserCacheSettings,omitempty" tf:"browser_cache_settings,omitempty"`

	// list HTTP headers that must be included in responses to clients.
	CacheHTTPHeaders []*string `json:"cacheHttpHeaders,omitempty" tf:"cache_http_headers,omitempty"`

	// parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.
	Cors []*string `json:"cors,omitempty" tf:"cors,omitempty"`

	// custom value for the Host header. Your server must be able to process requests with the chosen header.
	CustomHostHeader *string `json:"customHostHeader,omitempty" tf:"custom_host_header,omitempty"`

	// wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.
	CustomServerName *string `json:"customServerName,omitempty" tf:"custom_server_name,omitempty"`

	// setup a cache status.
	DisableCache *bool `json:"disableCache,omitempty" tf:"disable_cache,omitempty"`

	// disabling proxy force ranges.
	DisableProxyForceRanges *bool `json:"disableProxyForceRanges,omitempty" tf:"disable_proxy_force_ranges,omitempty"`

	// content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
	EdgeCacheSettings *float64 `json:"edgeCacheSettings,omitempty" tf:"edge_cache_settings,omitempty"`

	// enable access limiting by IP addresses, option available only with setting secure_key.
	EnableIPURLSigning *bool `json:"enableIpUrlSigning,omitempty" tf:"enable_ip_url_signing,omitempty"`

	// option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.
	FetchedCompressed *bool `json:"fetchedCompressed,omitempty" tf:"fetched_compressed,omitempty"`

	// choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.
	ForwardHostHeader *bool `json:"forwardHostHeader,omitempty" tf:"forward_host_header,omitempty"`

	// GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.
	GzipOn *bool `json:"gzipOn,omitempty" tf:"gzip_on,omitempty"`

	IPAddressACL []IPAddressACLInitParameters `json:"ipAddressAcl,omitempty" tf:"ip_address_acl,omitempty"`

	// set for ignoring cookie.
	IgnoreCookie *bool `json:"ignoreCookie,omitempty" tf:"ignore_cookie,omitempty"`

	// files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.
	IgnoreQueryParams *bool `json:"ignoreQueryParams,omitempty" tf:"ignore_query_params,omitempty"`

	// allows caching for GET, HEAD and POST requests.
	ProxyCacheMethodsSet *bool `json:"proxyCacheMethodsSet,omitempty" tf:"proxy_cache_methods_set,omitempty"`

	// files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.
	QueryParamsBlacklist []*string `json:"queryParamsBlacklist,omitempty" tf:"query_params_blacklist,omitempty"`

	// files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.
	QueryParamsWhitelist []*string `json:"queryParamsWhitelist,omitempty" tf:"query_params_whitelist,omitempty"`

	// set up a redirect from HTTPS to HTTP.
	RedirectHTTPSToHTTP *bool `json:"redirectHttpsToHttp,omitempty" tf:"redirect_https_to_http,omitempty"`

	// set up a redirect from HTTP to HTTPS.
	RedirectHTTPToHTTPS *bool `json:"redirectHttpToHttps,omitempty" tf:"redirect_http_to_https,omitempty"`

	// set secure key for url encoding to protect contect and limit access by IP addresses and time limits.
	SecureKey *string `json:"secureKey,omitempty" tf:"secure_key,omitempty"`

	// files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.
	Slice *bool `json:"slice,omitempty" tf:"slice,omitempty"`

	// set up custom headers that CDN servers will send in requests to origins.
	// +mapType=granular
	StaticRequestHeaders map[string]*string `json:"staticRequestHeaders,omitempty" tf:"static_request_headers,omitempty"`

	// set up custom headers that CDN servers will send in response to clients.
	// +mapType=granular
	StaticResponseHeaders map[string]*string `json:"staticResponseHeaders,omitempty" tf:"static_response_headers,omitempty"`
}

type OptionsObservation struct {

	// HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.
	AllowedHTTPMethods []*string `json:"allowedHttpMethods,omitempty" tf:"allowed_http_methods,omitempty"`

	// set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.
	BrowserCacheSettings *float64 `json:"browserCacheSettings,omitempty" tf:"browser_cache_settings,omitempty"`

	// list HTTP headers that must be included in responses to clients.
	CacheHTTPHeaders []*string `json:"cacheHttpHeaders,omitempty" tf:"cache_http_headers,omitempty"`

	// parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.
	Cors []*string `json:"cors,omitempty" tf:"cors,omitempty"`

	// custom value for the Host header. Your server must be able to process requests with the chosen header.
	CustomHostHeader *string `json:"customHostHeader,omitempty" tf:"custom_host_header,omitempty"`

	// wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.
	CustomServerName *string `json:"customServerName,omitempty" tf:"custom_server_name,omitempty"`

	// setup a cache status.
	DisableCache *bool `json:"disableCache,omitempty" tf:"disable_cache,omitempty"`

	// disabling proxy force ranges.
	DisableProxyForceRanges *bool `json:"disableProxyForceRanges,omitempty" tf:"disable_proxy_force_ranges,omitempty"`

	// content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
	EdgeCacheSettings *float64 `json:"edgeCacheSettings,omitempty" tf:"edge_cache_settings,omitempty"`

	// enable access limiting by IP addresses, option available only with setting secure_key.
	EnableIPURLSigning *bool `json:"enableIpUrlSigning,omitempty" tf:"enable_ip_url_signing,omitempty"`

	// option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.
	FetchedCompressed *bool `json:"fetchedCompressed,omitempty" tf:"fetched_compressed,omitempty"`

	// choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.
	ForwardHostHeader *bool `json:"forwardHostHeader,omitempty" tf:"forward_host_header,omitempty"`

	// GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.
	GzipOn *bool `json:"gzipOn,omitempty" tf:"gzip_on,omitempty"`

	IPAddressACL []IPAddressACLObservation `json:"ipAddressAcl,omitempty" tf:"ip_address_acl,omitempty"`

	// set for ignoring cookie.
	IgnoreCookie *bool `json:"ignoreCookie,omitempty" tf:"ignore_cookie,omitempty"`

	// files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.
	IgnoreQueryParams *bool `json:"ignoreQueryParams,omitempty" tf:"ignore_query_params,omitempty"`

	// allows caching for GET, HEAD and POST requests.
	ProxyCacheMethodsSet *bool `json:"proxyCacheMethodsSet,omitempty" tf:"proxy_cache_methods_set,omitempty"`

	// files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.
	QueryParamsBlacklist []*string `json:"queryParamsBlacklist,omitempty" tf:"query_params_blacklist,omitempty"`

	// files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.
	QueryParamsWhitelist []*string `json:"queryParamsWhitelist,omitempty" tf:"query_params_whitelist,omitempty"`

	// set up a redirect from HTTPS to HTTP.
	RedirectHTTPSToHTTP *bool `json:"redirectHttpsToHttp,omitempty" tf:"redirect_https_to_http,omitempty"`

	// set up a redirect from HTTP to HTTPS.
	RedirectHTTPToHTTPS *bool `json:"redirectHttpToHttps,omitempty" tf:"redirect_http_to_https,omitempty"`

	// set secure key for url encoding to protect contect and limit access by IP addresses and time limits.
	SecureKey *string `json:"secureKey,omitempty" tf:"secure_key,omitempty"`

	// files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.
	Slice *bool `json:"slice,omitempty" tf:"slice,omitempty"`

	// set up custom headers that CDN servers will send in requests to origins.
	// +mapType=granular
	StaticRequestHeaders map[string]*string `json:"staticRequestHeaders,omitempty" tf:"static_request_headers,omitempty"`

	// set up custom headers that CDN servers will send in response to clients.
	// +mapType=granular
	StaticResponseHeaders map[string]*string `json:"staticResponseHeaders,omitempty" tf:"static_response_headers,omitempty"`
}

type OptionsParameters struct {

	// HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.
	// +kubebuilder:validation:Optional
	AllowedHTTPMethods []*string `json:"allowedHttpMethods,omitempty" tf:"allowed_http_methods,omitempty"`

	// set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.
	// +kubebuilder:validation:Optional
	BrowserCacheSettings *float64 `json:"browserCacheSettings,omitempty" tf:"browser_cache_settings,omitempty"`

	// list HTTP headers that must be included in responses to clients.
	// +kubebuilder:validation:Optional
	CacheHTTPHeaders []*string `json:"cacheHttpHeaders,omitempty" tf:"cache_http_headers,omitempty"`

	// parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.
	// +kubebuilder:validation:Optional
	Cors []*string `json:"cors,omitempty" tf:"cors,omitempty"`

	// custom value for the Host header. Your server must be able to process requests with the chosen header.
	// +kubebuilder:validation:Optional
	CustomHostHeader *string `json:"customHostHeader,omitempty" tf:"custom_host_header,omitempty"`

	// wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.
	// +kubebuilder:validation:Optional
	CustomServerName *string `json:"customServerName,omitempty" tf:"custom_server_name,omitempty"`

	// setup a cache status.
	// +kubebuilder:validation:Optional
	DisableCache *bool `json:"disableCache,omitempty" tf:"disable_cache,omitempty"`

	// disabling proxy force ranges.
	// +kubebuilder:validation:Optional
	DisableProxyForceRanges *bool `json:"disableProxyForceRanges,omitempty" tf:"disable_proxy_force_ranges,omitempty"`

	// content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
	// +kubebuilder:validation:Optional
	EdgeCacheSettings *float64 `json:"edgeCacheSettings,omitempty" tf:"edge_cache_settings,omitempty"`

	// enable access limiting by IP addresses, option available only with setting secure_key.
	// +kubebuilder:validation:Optional
	EnableIPURLSigning *bool `json:"enableIpUrlSigning,omitempty" tf:"enable_ip_url_signing,omitempty"`

	// option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.
	// +kubebuilder:validation:Optional
	FetchedCompressed *bool `json:"fetchedCompressed,omitempty" tf:"fetched_compressed,omitempty"`

	// choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.
	// +kubebuilder:validation:Optional
	ForwardHostHeader *bool `json:"forwardHostHeader,omitempty" tf:"forward_host_header,omitempty"`

	// GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.
	// +kubebuilder:validation:Optional
	GzipOn *bool `json:"gzipOn,omitempty" tf:"gzip_on,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddressACL []IPAddressACLParameters `json:"ipAddressAcl,omitempty" tf:"ip_address_acl,omitempty"`

	// set for ignoring cookie.
	// +kubebuilder:validation:Optional
	IgnoreCookie *bool `json:"ignoreCookie,omitempty" tf:"ignore_cookie,omitempty"`

	// files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.
	// +kubebuilder:validation:Optional
	IgnoreQueryParams *bool `json:"ignoreQueryParams,omitempty" tf:"ignore_query_params,omitempty"`

	// allows caching for GET, HEAD and POST requests.
	// +kubebuilder:validation:Optional
	ProxyCacheMethodsSet *bool `json:"proxyCacheMethodsSet,omitempty" tf:"proxy_cache_methods_set,omitempty"`

	// files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.
	// +kubebuilder:validation:Optional
	QueryParamsBlacklist []*string `json:"queryParamsBlacklist,omitempty" tf:"query_params_blacklist,omitempty"`

	// files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.
	// +kubebuilder:validation:Optional
	QueryParamsWhitelist []*string `json:"queryParamsWhitelist,omitempty" tf:"query_params_whitelist,omitempty"`

	// set up a redirect from HTTPS to HTTP.
	// +kubebuilder:validation:Optional
	RedirectHTTPSToHTTP *bool `json:"redirectHttpsToHttp,omitempty" tf:"redirect_https_to_http,omitempty"`

	// set up a redirect from HTTP to HTTPS.
	// +kubebuilder:validation:Optional
	RedirectHTTPToHTTPS *bool `json:"redirectHttpToHttps,omitempty" tf:"redirect_http_to_https,omitempty"`

	// set secure key for url encoding to protect contect and limit access by IP addresses and time limits.
	// +kubebuilder:validation:Optional
	SecureKey *string `json:"secureKey,omitempty" tf:"secure_key,omitempty"`

	// files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.
	// +kubebuilder:validation:Optional
	Slice *bool `json:"slice,omitempty" tf:"slice,omitempty"`

	// set up custom headers that CDN servers will send in requests to origins.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	StaticRequestHeaders map[string]*string `json:"staticRequestHeaders,omitempty" tf:"static_request_headers,omitempty"`

	// set up custom headers that CDN servers will send in response to clients.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	StaticResponseHeaders map[string]*string `json:"staticResponseHeaders,omitempty" tf:"static_response_headers,omitempty"`
}

type ResourceInitParameters struct {

	// Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// CDN endpoint CNAME, must be unique among resources.
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// CDN Resource settings and options to tune CDN edge behavior.
	Options []OptionsInitParameters `json:"options,omitempty" tf:"options,omitempty"`

	// +crossplane:generate:reference:type=OriginGroup
	OriginGroupID *float64 `json:"originGroupId,omitempty" tf:"origin_group_id,omitempty"`

	// Reference to a OriginGroup to populate originGroupId.
	// +kubebuilder:validation:Optional
	OriginGroupIDRef *v1.Reference `json:"originGroupIdRef,omitempty" tf:"-"`

	// Selector for a OriginGroup to populate originGroupId.
	// +kubebuilder:validation:Optional
	OriginGroupIDSelector *v1.Selector `json:"originGroupIdSelector,omitempty" tf:"-"`

	OriginGroupName *string `json:"originGroupName,omitempty" tf:"origin_group_name,omitempty"`

	OriginProtocol *string `json:"originProtocol,omitempty" tf:"origin_protocol,omitempty"`

	// SSL certificate of CDN resource.
	SSLCertificate []SSLCertificateInitParameters `json:"sslCertificate,omitempty" tf:"ssl_certificate,omitempty"`

	// list of secondary hostname strings.
	// +listType=set
	SecondaryHostnames []*string `json:"secondaryHostnames,omitempty" tf:"secondary_hostnames,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ResourceObservation struct {

	// Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// CDN endpoint CNAME, must be unique among resources.
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// Creation timestamp of the IoT Core Device
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// CDN Resource settings and options to tune CDN edge behavior.
	Options []OptionsObservation `json:"options,omitempty" tf:"options,omitempty"`

	OriginGroupID *float64 `json:"originGroupId,omitempty" tf:"origin_group_id,omitempty"`

	OriginGroupName *string `json:"originGroupName,omitempty" tf:"origin_group_name,omitempty"`

	OriginProtocol *string `json:"originProtocol,omitempty" tf:"origin_protocol,omitempty"`

	// provider CNAME of CDN resource, computed value for read and update operations.
	ProviderCname *string `json:"providerCname,omitempty" tf:"provider_cname,omitempty"`

	// SSL certificate of CDN resource.
	SSLCertificate []SSLCertificateObservation `json:"sslCertificate,omitempty" tf:"ssl_certificate,omitempty"`

	// list of secondary hostname strings.
	// +listType=set
	SecondaryHostnames []*string `json:"secondaryHostnames,omitempty" tf:"secondary_hostnames,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type ResourceParameters struct {

	// Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// CDN endpoint CNAME, must be unique among resources.
	// +kubebuilder:validation:Optional
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// CDN Resource settings and options to tune CDN edge behavior.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// +crossplane:generate:reference:type=OriginGroup
	// +kubebuilder:validation:Optional
	OriginGroupID *float64 `json:"originGroupId,omitempty" tf:"origin_group_id,omitempty"`

	// Reference to a OriginGroup to populate originGroupId.
	// +kubebuilder:validation:Optional
	OriginGroupIDRef *v1.Reference `json:"originGroupIdRef,omitempty" tf:"-"`

	// Selector for a OriginGroup to populate originGroupId.
	// +kubebuilder:validation:Optional
	OriginGroupIDSelector *v1.Selector `json:"originGroupIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	OriginGroupName *string `json:"originGroupName,omitempty" tf:"origin_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	OriginProtocol *string `json:"originProtocol,omitempty" tf:"origin_protocol,omitempty"`

	// SSL certificate of CDN resource.
	// +kubebuilder:validation:Optional
	SSLCertificate []SSLCertificateParameters `json:"sslCertificate,omitempty" tf:"ssl_certificate,omitempty"`

	// list of secondary hostname strings.
	// +kubebuilder:validation:Optional
	// +listType=set
	SecondaryHostnames []*string `json:"secondaryHostnames,omitempty" tf:"secondary_hostnames,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SSLCertificateInitParameters struct {
	CertificateManagerID *string `json:"certificateManagerId,omitempty" tf:"certificate_manager_id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SSLCertificateObservation struct {
	CertificateManagerID *string `json:"certificateManagerId,omitempty" tf:"certificate_manager_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SSLCertificateParameters struct {

	// +kubebuilder:validation:Optional
	CertificateManagerID *string `json:"certificateManagerId,omitempty" tf:"certificate_manager_id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ResourceSpec defines the desired state of Resource
type ResourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ResourceInitParameters `json:"initProvider,omitempty"`
}

// ResourceStatus defines the observed state of Resource.
type ResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Resource is the Schema for the Resources API. Allows management of a Yandex.Cloud CDN Resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Resource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceSpec   `json:"spec"`
	Status            ResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceList contains a list of Resources
type ResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Resource `json:"items"`
}

// Repository type metadata.
var (
	Resource_Kind             = "Resource"
	Resource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Resource_Kind}.String()
	Resource_KindAPIVersion   = Resource_Kind + "." + CRDGroupVersion.String()
	Resource_GroupVersionKind = CRDGroupVersion.WithKind(Resource_Kind)
)

func init() {
	SchemeBuilder.Register(&Resource{}, &ResourceList{})
}
