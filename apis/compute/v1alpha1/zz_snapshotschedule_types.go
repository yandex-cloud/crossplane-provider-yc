/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SchedulePolicyInitParameters struct {

	// (String) Cron expression to schedule snapshots (in cron format " * ****").
	// Cron expression to schedule snapshots (in cron format `" * ****"`).
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// 01-02T15:04:05Z07:00). If empty current time will be used. Unlike an expression that specifies regularity rules, the start_at parameter determines from what point these rules will be applied.
	// Time to start the snapshot schedule (in format RFC3339 `2006-01-02T15:04:05Z07:00`). If empty current time will be used. Unlike an `expression` that specifies regularity rules, the `start_at` parameter determines from what point these rules will be applied.
	StartAt *string `json:"startAt,omitempty" tf:"start_at,omitempty"`
}

type SchedulePolicyObservation struct {

	// (String) Cron expression to schedule snapshots (in cron format " * ****").
	// Cron expression to schedule snapshots (in cron format `" * ****"`).
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// 01-02T15:04:05Z07:00). If empty current time will be used. Unlike an expression that specifies regularity rules, the start_at parameter determines from what point these rules will be applied.
	// Time to start the snapshot schedule (in format RFC3339 `2006-01-02T15:04:05Z07:00`). If empty current time will be used. Unlike an `expression` that specifies regularity rules, the `start_at` parameter determines from what point these rules will be applied.
	StartAt *string `json:"startAt,omitempty" tf:"start_at,omitempty"`
}

type SchedulePolicyParameters struct {

	// (String) Cron expression to schedule snapshots (in cron format " * ****").
	// Cron expression to schedule snapshots (in cron format `" * ****"`).
	// +kubebuilder:validation:Optional
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// 01-02T15:04:05Z07:00). If empty current time will be used. Unlike an expression that specifies regularity rules, the start_at parameter determines from what point these rules will be applied.
	// Time to start the snapshot schedule (in format RFC3339 `2006-01-02T15:04:05Z07:00`). If empty current time will be used. Unlike an `expression` that specifies regularity rules, the `start_at` parameter determines from what point these rules will be applied.
	// +kubebuilder:validation:Optional
	StartAt *string `json:"startAt,omitempty" tf:"start_at,omitempty"`
}

type SnapshotScheduleInitParameters struct {

	// (String) The resource description.
	// The resource description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String) IDs of the disk for snapshot schedule.
	// IDs of the disk for snapshot schedule.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/compute/v1alpha1.Disk
	// +listType=set
	DiskIds []*string `json:"diskIds,omitempty" tf:"disk_ids,omitempty"`

	// References to Disk in compute to populate diskIds.
	// +kubebuilder:validation:Optional
	DiskIdsRefs []v1.Reference `json:"diskIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Disk in compute to populate diskIds.
	// +kubebuilder:validation:Optional
	DiskIdsSelector *v1.Selector `json:"diskIdsSelector,omitempty" tf:"-"`

	// id is used.
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs which assigned to resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) The resource name.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are ns, us (or µs), ms, s, m, h. Examples: 300ms, 1.5h or 2h45m.
	// Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
	RetentionPeriod *string `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	// (Block List, Max: 1) Schedule policy of the snapshot schedule. (see below for nested schema)
	// Schedule policy of the snapshot schedule.
	SchedulePolicy []SchedulePolicyInitParameters `json:"schedulePolicy,omitempty" tf:"schedule_policy,omitempty"`

	// (Number) Maximum number of snapshots for every disk of the snapshot schedule.
	// Maximum number of snapshots for every disk of the snapshot schedule.
	SnapshotCount *float64 `json:"snapshotCount,omitempty" tf:"snapshot_count,omitempty"`

	// (Block List, Max: 1) Additional attributes for snapshots created by this snapshot schedule. (see below for nested schema)
	// Additional attributes for snapshots created by this snapshot schedule.
	SnapshotSpec []SnapshotSpecInitParameters `json:"snapshotSpec,omitempty" tf:"snapshot_spec,omitempty"`
}

type SnapshotScheduleObservation struct {

	// (String) The creation timestamp of the resource.
	// The creation timestamp of the resource.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (String) The resource description.
	// The resource description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String) IDs of the disk for snapshot schedule.
	// IDs of the disk for snapshot schedule.
	// +listType=set
	DiskIds []*string `json:"diskIds,omitempty" tf:"disk_ids,omitempty"`

	// id is used.
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs which assigned to resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) The resource name.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are ns, us (or µs), ms, s, m, h. Examples: 300ms, 1.5h or 2h45m.
	// Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
	RetentionPeriod *string `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	// (Block List, Max: 1) Schedule policy of the snapshot schedule. (see below for nested schema)
	// Schedule policy of the snapshot schedule.
	SchedulePolicy []SchedulePolicyObservation `json:"schedulePolicy,omitempty" tf:"schedule_policy,omitempty"`

	// (Number) Maximum number of snapshots for every disk of the snapshot schedule.
	// Maximum number of snapshots for every disk of the snapshot schedule.
	SnapshotCount *float64 `json:"snapshotCount,omitempty" tf:"snapshot_count,omitempty"`

	// (Block List, Max: 1) Additional attributes for snapshots created by this snapshot schedule. (see below for nested schema)
	// Additional attributes for snapshots created by this snapshot schedule.
	SnapshotSpec []SnapshotSpecObservation `json:"snapshotSpec,omitempty" tf:"snapshot_spec,omitempty"`

	// (String) The status of the snapshot schedule.
	// The status of the snapshot schedule.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SnapshotScheduleParameters struct {

	// (String) The resource description.
	// The resource description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Set of String) IDs of the disk for snapshot schedule.
	// IDs of the disk for snapshot schedule.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/compute/v1alpha1.Disk
	// +kubebuilder:validation:Optional
	// +listType=set
	DiskIds []*string `json:"diskIds,omitempty" tf:"disk_ids,omitempty"`

	// References to Disk in compute to populate diskIds.
	// +kubebuilder:validation:Optional
	DiskIdsRefs []v1.Reference `json:"diskIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Disk in compute to populate diskIds.
	// +kubebuilder:validation:Optional
	DiskIdsSelector *v1.Selector `json:"diskIdsSelector,omitempty" tf:"-"`

	// id is used.
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs which assigned to resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (String) The resource name.
	// The resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are ns, us (or µs), ms, s, m, h. Examples: 300ms, 1.5h or 2h45m.
	// Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Examples: `300ms`, `1.5h` or `2h45m`.
	// +kubebuilder:validation:Optional
	RetentionPeriod *string `json:"retentionPeriod,omitempty" tf:"retention_period,omitempty"`

	// (Block List, Max: 1) Schedule policy of the snapshot schedule. (see below for nested schema)
	// Schedule policy of the snapshot schedule.
	// +kubebuilder:validation:Optional
	SchedulePolicy []SchedulePolicyParameters `json:"schedulePolicy,omitempty" tf:"schedule_policy,omitempty"`

	// (Number) Maximum number of snapshots for every disk of the snapshot schedule.
	// Maximum number of snapshots for every disk of the snapshot schedule.
	// +kubebuilder:validation:Optional
	SnapshotCount *float64 `json:"snapshotCount,omitempty" tf:"snapshot_count,omitempty"`

	// (Block List, Max: 1) Additional attributes for snapshots created by this snapshot schedule. (see below for nested schema)
	// Additional attributes for snapshots created by this snapshot schedule.
	// +kubebuilder:validation:Optional
	SnapshotSpec []SnapshotSpecParameters `json:"snapshotSpec,omitempty" tf:"snapshot_spec,omitempty"`
}

type SnapshotSpecInitParameters struct {

	// (String) The resource description.
	// Description to assign to snapshots created by this snapshot schedule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs to assign to snapshots created by this snapshot schedule.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type SnapshotSpecObservation struct {

	// (String) The resource description.
	// Description to assign to snapshots created by this snapshot schedule.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs to assign to snapshots created by this snapshot schedule.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type SnapshotSpecParameters struct {

	// (String) The resource description.
	// Description to assign to snapshots created by this snapshot schedule.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs to assign to snapshots created by this snapshot schedule.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

// SnapshotScheduleSpec defines the desired state of SnapshotSchedule
type SnapshotScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnapshotScheduleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SnapshotScheduleInitParameters `json:"initProvider,omitempty"`
}

// SnapshotScheduleStatus defines the observed state of SnapshotSchedule.
type SnapshotScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnapshotScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SnapshotSchedule is the Schema for the SnapshotSchedules API. Creates a new snapshot schedule.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type SnapshotSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnapshotScheduleSpec   `json:"spec"`
	Status            SnapshotScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnapshotScheduleList contains a list of SnapshotSchedules
type SnapshotScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SnapshotSchedule `json:"items"`
}

// Repository type metadata.
var (
	SnapshotSchedule_Kind             = "SnapshotSchedule"
	SnapshotSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SnapshotSchedule_Kind}.String()
	SnapshotSchedule_KindAPIVersion   = SnapshotSchedule_Kind + "." + CRDGroupVersion.String()
	SnapshotSchedule_GroupVersionKind = CRDGroupVersion.WithKind(SnapshotSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&SnapshotSchedule{}, &SnapshotScheduleList{})
}
