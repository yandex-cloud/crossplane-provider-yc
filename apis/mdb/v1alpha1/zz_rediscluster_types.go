/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RedisClusterAccessInitParameters struct {

	// (Boolean) Allow access for DataLens. Can be either true or false.
	// Allow access for DataLens. Can be either `true` or `false`.
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// (Boolean) Allow access for Web SQL. Can be either true or false.
	// Allow access for Web SQL. Can be either `true` or `false`.
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type RedisClusterAccessObservation struct {

	// (Boolean) Allow access for DataLens. Can be either true or false.
	// Allow access for DataLens. Can be either `true` or `false`.
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// (Boolean) Allow access for Web SQL. Can be either true or false.
	// Allow access for Web SQL. Can be either `true` or `false`.
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type RedisClusterAccessParameters struct {

	// (Boolean) Allow access for DataLens. Can be either true or false.
	// Allow access for DataLens. Can be either `true` or `false`.
	// +kubebuilder:validation:Optional
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// (Boolean) Allow access for Web SQL. Can be either true or false.
	// Allow access for Web SQL. Can be either `true` or `false`.
	// +kubebuilder:validation:Optional
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type RedisClusterConfigBackupWindowStartInitParameters struct {

	// (Number) The hour at which backup will be started.
	// The hour at which backup will be started.
	Hours *int64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// (Number) The minute at which backup will be started.
	// The minute at which backup will be started.
	Minutes *int64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type RedisClusterConfigBackupWindowStartObservation struct {

	// (Number) The hour at which backup will be started.
	// The hour at which backup will be started.
	Hours *int64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// (Number) The minute at which backup will be started.
	// The minute at which backup will be started.
	Minutes *int64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type RedisClusterConfigBackupWindowStartParameters struct {

	// (Number) The hour at which backup will be started.
	// The hour at which backup will be started.
	// +kubebuilder:validation:Optional
	Hours *int64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// (Number) The minute at which backup will be started.
	// The minute at which backup will be started.
	// +kubebuilder:validation:Optional
	Minutes *int64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type RedisClusterConfigInitParameters struct {

	// (Boolean) Allows some data to be lost in favor of faster switchover/restart by RDSync.
	// Allows some data to be lost in favor of faster switchover/restart by RDSync.
	AllowDataLoss *bool `json:"allowDataLoss,omitempty" tf:"allow_data_loss,omitempty"`

	// (Block List, Max: 1) Time to start the daily backup, in the UTC timezone. (see below for nested schema)
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart []RedisClusterConfigBackupWindowStartInitParameters `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// (String) Normal clients output buffer limits. See redis config file.
	// Normal clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
	ClientOutputBufferLimitNormal *string `json:"clientOutputBufferLimitNormal,omitempty" tf:"client_output_buffer_limit_normal,omitempty"`

	// (String) Pubsub clients output buffer limits. See redis config file.
	// Pubsub clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
	ClientOutputBufferLimitPubsub *string `json:"clientOutputBufferLimitPubsub,omitempty" tf:"client_output_buffer_limit_pubsub,omitempty"`

	// (Boolean) Permits Pub/Sub shard operations when cluster is down.
	// Permits Pub/Sub shard operations when cluster is down.
	ClusterAllowPubsubshardWhenDown *bool `json:"clusterAllowPubsubshardWhenDown,omitempty" tf:"cluster_allow_pubsubshard_when_down,omitempty"`

	// (Boolean) Allows read operations when cluster is down.
	// Allows read operations when cluster is down.
	ClusterAllowReadsWhenDown *bool `json:"clusterAllowReadsWhenDown,omitempty" tf:"cluster_allow_reads_when_down,omitempty"`

	// (Boolean) Controls whether all hash slots must be covered by nodes.
	// Controls whether all hash slots must be covered by nodes.
	ClusterRequireFullCoverage *bool `json:"clusterRequireFullCoverage,omitempty" tf:"cluster_require_full_coverage,omitempty"`

	// server restart).
	// Number of databases (changing requires redis-server restart).
	Databases *int64 `json:"databases,omitempty" tf:"databases,omitempty"`

	// threads.
	// Allow Redis to use io-threads.
	IoThreadsAllowed *bool `json:"ioThreadsAllowed,omitempty" tf:"io_threads_allowed,omitempty"`

	// (Number) The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10).
	// The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10).
	LfuDecayTime *int64 `json:"lfuDecayTime,omitempty" tf:"lfu_decay_time,omitempty"`

	// (Number) Determines how the frequency counter represents key hits.
	// Determines how the frequency counter represents key hits.
	LfuLogFactor *int64 `json:"lfuLogFactor,omitempty" tf:"lfu_log_factor,omitempty"`

	// (Number) Maximum time in milliseconds for Lua scripts.
	// Maximum time in milliseconds for Lua scripts.
	LuaTimeLimit *int64 `json:"luaTimeLimit,omitempty" tf:"lua_time_limit,omitempty"`

	// (Number) Redis maxmemory usage in percent
	// Redis maxmemory usage in percent
	MaxmemoryPercent *int64 `json:"maxmemoryPercent,omitempty" tf:"maxmemory_percent,omitempty"`

	// (String) Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in the official RedisDB documentation.
	// Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy,omitempty"`

	// (String) Select the events that Redis will notify among a set of classes.
	// Select the events that Redis will notify among a set of classes.
	NotifyKeyspaceEvents *string `json:"notifyKeyspaceEvents,omitempty" tf:"notify_keyspace_events,omitempty"`

	// (String, Sensitive) Password for the Redis cluster.
	// Password for the Redis cluster.
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// (Number) Replication backlog size as a percentage of flavor maxmemory.
	// Replication backlog size as a percentage of flavor maxmemory.
	ReplBacklogSizePercent *int64 `json:"replBacklogSizePercent,omitempty" tf:"repl_backlog_size_percent,omitempty"`

	// (Number) Log slow queries below this number in microseconds.
	// Log slow queries below this number in microseconds.
	SlowlogLogSlowerThan *int64 `json:"slowlogLogSlowerThan,omitempty" tf:"slowlog_log_slower_than,omitempty"`

	// (Number) Slow queries log length.
	// Slow queries log length.
	SlowlogMaxLen *int64 `json:"slowlogMaxLen,omitempty" tf:"slowlog_max_len,omitempty"`

	// (Number) Close the connection after a client is idle for N seconds.
	// Close the connection after a client is idle for N seconds.
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Boolean) Allows to turn before switchover in RDSync.
	// Allows to turn before switchover in RDSync.
	TurnBeforeSwitchover *bool `json:"turnBeforeSwitchover,omitempty" tf:"turn_before_switchover,omitempty"`

	// (Boolean) Use JIT for lua scripts and functions.
	// Use JIT for lua scripts and functions.
	UseLuajit *bool `json:"useLuajit,omitempty" tf:"use_luajit,omitempty"`

	// (String) Version of Redis.
	// Version of Redis.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// efficient listpack to CPU-efficient hash table and skiplist
	// Controls max number of entries in zset before conversion from memory-efficient listpack to CPU-efficient hash table and skiplist
	ZsetMaxListpackEntries *int64 `json:"zsetMaxListpackEntries,omitempty" tf:"zset_max_listpack_entries,omitempty"`
}

type RedisClusterConfigObservation struct {

	// (Boolean) Allows some data to be lost in favor of faster switchover/restart by RDSync.
	// Allows some data to be lost in favor of faster switchover/restart by RDSync.
	AllowDataLoss *bool `json:"allowDataLoss,omitempty" tf:"allow_data_loss,omitempty"`

	// (Block List, Max: 1) Time to start the daily backup, in the UTC timezone. (see below for nested schema)
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart []RedisClusterConfigBackupWindowStartObservation `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// (String) Normal clients output buffer limits. See redis config file.
	// Normal clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
	ClientOutputBufferLimitNormal *string `json:"clientOutputBufferLimitNormal,omitempty" tf:"client_output_buffer_limit_normal,omitempty"`

	// (String) Pubsub clients output buffer limits. See redis config file.
	// Pubsub clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
	ClientOutputBufferLimitPubsub *string `json:"clientOutputBufferLimitPubsub,omitempty" tf:"client_output_buffer_limit_pubsub,omitempty"`

	// (Boolean) Permits Pub/Sub shard operations when cluster is down.
	// Permits Pub/Sub shard operations when cluster is down.
	ClusterAllowPubsubshardWhenDown *bool `json:"clusterAllowPubsubshardWhenDown,omitempty" tf:"cluster_allow_pubsubshard_when_down,omitempty"`

	// (Boolean) Allows read operations when cluster is down.
	// Allows read operations when cluster is down.
	ClusterAllowReadsWhenDown *bool `json:"clusterAllowReadsWhenDown,omitempty" tf:"cluster_allow_reads_when_down,omitempty"`

	// (Boolean) Controls whether all hash slots must be covered by nodes.
	// Controls whether all hash slots must be covered by nodes.
	ClusterRequireFullCoverage *bool `json:"clusterRequireFullCoverage,omitempty" tf:"cluster_require_full_coverage,omitempty"`

	// server restart).
	// Number of databases (changing requires redis-server restart).
	Databases *int64 `json:"databases,omitempty" tf:"databases,omitempty"`

	// threads.
	// Allow Redis to use io-threads.
	IoThreadsAllowed *bool `json:"ioThreadsAllowed,omitempty" tf:"io_threads_allowed,omitempty"`

	// (Number) The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10).
	// The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10).
	LfuDecayTime *int64 `json:"lfuDecayTime,omitempty" tf:"lfu_decay_time,omitempty"`

	// (Number) Determines how the frequency counter represents key hits.
	// Determines how the frequency counter represents key hits.
	LfuLogFactor *int64 `json:"lfuLogFactor,omitempty" tf:"lfu_log_factor,omitempty"`

	// (Number) Maximum time in milliseconds for Lua scripts.
	// Maximum time in milliseconds for Lua scripts.
	LuaTimeLimit *int64 `json:"luaTimeLimit,omitempty" tf:"lua_time_limit,omitempty"`

	// (Number) Redis maxmemory usage in percent
	// Redis maxmemory usage in percent
	MaxmemoryPercent *int64 `json:"maxmemoryPercent,omitempty" tf:"maxmemory_percent,omitempty"`

	// (String) Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in the official RedisDB documentation.
	// Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy,omitempty"`

	// (String) Select the events that Redis will notify among a set of classes.
	// Select the events that Redis will notify among a set of classes.
	NotifyKeyspaceEvents *string `json:"notifyKeyspaceEvents,omitempty" tf:"notify_keyspace_events,omitempty"`

	// (Number) Replication backlog size as a percentage of flavor maxmemory.
	// Replication backlog size as a percentage of flavor maxmemory.
	ReplBacklogSizePercent *int64 `json:"replBacklogSizePercent,omitempty" tf:"repl_backlog_size_percent,omitempty"`

	// (Number) Log slow queries below this number in microseconds.
	// Log slow queries below this number in microseconds.
	SlowlogLogSlowerThan *int64 `json:"slowlogLogSlowerThan,omitempty" tf:"slowlog_log_slower_than,omitempty"`

	// (Number) Slow queries log length.
	// Slow queries log length.
	SlowlogMaxLen *int64 `json:"slowlogMaxLen,omitempty" tf:"slowlog_max_len,omitempty"`

	// (Number) Close the connection after a client is idle for N seconds.
	// Close the connection after a client is idle for N seconds.
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Boolean) Allows to turn before switchover in RDSync.
	// Allows to turn before switchover in RDSync.
	TurnBeforeSwitchover *bool `json:"turnBeforeSwitchover,omitempty" tf:"turn_before_switchover,omitempty"`

	// (Boolean) Use JIT for lua scripts and functions.
	// Use JIT for lua scripts and functions.
	UseLuajit *bool `json:"useLuajit,omitempty" tf:"use_luajit,omitempty"`

	// (String) Version of Redis.
	// Version of Redis.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// efficient listpack to CPU-efficient hash table and skiplist
	// Controls max number of entries in zset before conversion from memory-efficient listpack to CPU-efficient hash table and skiplist
	ZsetMaxListpackEntries *int64 `json:"zsetMaxListpackEntries,omitempty" tf:"zset_max_listpack_entries,omitempty"`
}

type RedisClusterConfigParameters struct {

	// (Boolean) Allows some data to be lost in favor of faster switchover/restart by RDSync.
	// Allows some data to be lost in favor of faster switchover/restart by RDSync.
	// +kubebuilder:validation:Optional
	AllowDataLoss *bool `json:"allowDataLoss,omitempty" tf:"allow_data_loss,omitempty"`

	// (Block List, Max: 1) Time to start the daily backup, in the UTC timezone. (see below for nested schema)
	// Time to start the daily backup, in the UTC timezone.
	// +kubebuilder:validation:Optional
	BackupWindowStart []RedisClusterConfigBackupWindowStartParameters `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// (String) Normal clients output buffer limits. See redis config file.
	// Normal clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
	// +kubebuilder:validation:Optional
	ClientOutputBufferLimitNormal *string `json:"clientOutputBufferLimitNormal,omitempty" tf:"client_output_buffer_limit_normal,omitempty"`

	// (String) Pubsub clients output buffer limits. See redis config file.
	// Pubsub clients output buffer limits. See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
	// +kubebuilder:validation:Optional
	ClientOutputBufferLimitPubsub *string `json:"clientOutputBufferLimitPubsub,omitempty" tf:"client_output_buffer_limit_pubsub,omitempty"`

	// (Boolean) Permits Pub/Sub shard operations when cluster is down.
	// Permits Pub/Sub shard operations when cluster is down.
	// +kubebuilder:validation:Optional
	ClusterAllowPubsubshardWhenDown *bool `json:"clusterAllowPubsubshardWhenDown,omitempty" tf:"cluster_allow_pubsubshard_when_down,omitempty"`

	// (Boolean) Allows read operations when cluster is down.
	// Allows read operations when cluster is down.
	// +kubebuilder:validation:Optional
	ClusterAllowReadsWhenDown *bool `json:"clusterAllowReadsWhenDown,omitempty" tf:"cluster_allow_reads_when_down,omitempty"`

	// (Boolean) Controls whether all hash slots must be covered by nodes.
	// Controls whether all hash slots must be covered by nodes.
	// +kubebuilder:validation:Optional
	ClusterRequireFullCoverage *bool `json:"clusterRequireFullCoverage,omitempty" tf:"cluster_require_full_coverage,omitempty"`

	// server restart).
	// Number of databases (changing requires redis-server restart).
	// +kubebuilder:validation:Optional
	Databases *int64 `json:"databases,omitempty" tf:"databases,omitempty"`

	// threads.
	// Allow Redis to use io-threads.
	// +kubebuilder:validation:Optional
	IoThreadsAllowed *bool `json:"ioThreadsAllowed,omitempty" tf:"io_threads_allowed,omitempty"`

	// (Number) The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10).
	// The time, in minutes, that must elapse in order for the key counter to be divided by two (or decremented if it has a value less <= 10).
	// +kubebuilder:validation:Optional
	LfuDecayTime *int64 `json:"lfuDecayTime,omitempty" tf:"lfu_decay_time,omitempty"`

	// (Number) Determines how the frequency counter represents key hits.
	// Determines how the frequency counter represents key hits.
	// +kubebuilder:validation:Optional
	LfuLogFactor *int64 `json:"lfuLogFactor,omitempty" tf:"lfu_log_factor,omitempty"`

	// (Number) Maximum time in milliseconds for Lua scripts.
	// Maximum time in milliseconds for Lua scripts.
	// +kubebuilder:validation:Optional
	LuaTimeLimit *int64 `json:"luaTimeLimit,omitempty" tf:"lua_time_limit,omitempty"`

	// (Number) Redis maxmemory usage in percent
	// Redis maxmemory usage in percent
	// +kubebuilder:validation:Optional
	MaxmemoryPercent *int64 `json:"maxmemoryPercent,omitempty" tf:"maxmemory_percent,omitempty"`

	// (String) Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in the official RedisDB documentation.
	// Redis key eviction policy for a dataset that reaches maximum memory. Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
	// +kubebuilder:validation:Optional
	MaxmemoryPolicy *string `json:"maxmemoryPolicy,omitempty" tf:"maxmemory_policy,omitempty"`

	// (String) Select the events that Redis will notify among a set of classes.
	// Select the events that Redis will notify among a set of classes.
	// +kubebuilder:validation:Optional
	NotifyKeyspaceEvents *string `json:"notifyKeyspaceEvents,omitempty" tf:"notify_keyspace_events,omitempty"`

	// (String, Sensitive) Password for the Redis cluster.
	// Password for the Redis cluster.
	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// (Number) Replication backlog size as a percentage of flavor maxmemory.
	// Replication backlog size as a percentage of flavor maxmemory.
	// +kubebuilder:validation:Optional
	ReplBacklogSizePercent *int64 `json:"replBacklogSizePercent,omitempty" tf:"repl_backlog_size_percent,omitempty"`

	// (Number) Log slow queries below this number in microseconds.
	// Log slow queries below this number in microseconds.
	// +kubebuilder:validation:Optional
	SlowlogLogSlowerThan *int64 `json:"slowlogLogSlowerThan,omitempty" tf:"slowlog_log_slower_than,omitempty"`

	// (Number) Slow queries log length.
	// Slow queries log length.
	// +kubebuilder:validation:Optional
	SlowlogMaxLen *int64 `json:"slowlogMaxLen,omitempty" tf:"slowlog_max_len,omitempty"`

	// (Number) Close the connection after a client is idle for N seconds.
	// Close the connection after a client is idle for N seconds.
	// +kubebuilder:validation:Optional
	Timeout *int64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// (Boolean) Allows to turn before switchover in RDSync.
	// Allows to turn before switchover in RDSync.
	// +kubebuilder:validation:Optional
	TurnBeforeSwitchover *bool `json:"turnBeforeSwitchover,omitempty" tf:"turn_before_switchover,omitempty"`

	// (Boolean) Use JIT for lua scripts and functions.
	// Use JIT for lua scripts and functions.
	// +kubebuilder:validation:Optional
	UseLuajit *bool `json:"useLuajit,omitempty" tf:"use_luajit,omitempty"`

	// (String) Version of Redis.
	// Version of Redis.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`

	// efficient listpack to CPU-efficient hash table and skiplist
	// Controls max number of entries in zset before conversion from memory-efficient listpack to CPU-efficient hash table and skiplist
	// +kubebuilder:validation:Optional
	ZsetMaxListpackEntries *int64 `json:"zsetMaxListpackEntries,omitempty" tf:"zset_max_listpack_entries,omitempty"`
}

type RedisClusterDiskSizeAutoscalingInitParameters struct {

	// (Number) Limit of disk size after autoscaling (GiB).
	// Limit of disk size after autoscaling (GiB).
	DiskSizeLimit *int64 `json:"diskSizeLimit,omitempty" tf:"disk_size_limit,omitempty"`

	// (Number) Immediate autoscaling disk usage (percent).
	// Immediate autoscaling disk usage (percent).
	EmergencyUsageThreshold *int64 `json:"emergencyUsageThreshold,omitempty" tf:"emergency_usage_threshold,omitempty"`

	// (Number) Maintenance window autoscaling disk usage (percent).
	// Maintenance window autoscaling disk usage (percent).
	PlannedUsageThreshold *int64 `json:"plannedUsageThreshold,omitempty" tf:"planned_usage_threshold,omitempty"`
}

type RedisClusterDiskSizeAutoscalingObservation struct {

	// (Number) Limit of disk size after autoscaling (GiB).
	// Limit of disk size after autoscaling (GiB).
	DiskSizeLimit *int64 `json:"diskSizeLimit,omitempty" tf:"disk_size_limit,omitempty"`

	// (Number) Immediate autoscaling disk usage (percent).
	// Immediate autoscaling disk usage (percent).
	EmergencyUsageThreshold *int64 `json:"emergencyUsageThreshold,omitempty" tf:"emergency_usage_threshold,omitempty"`

	// (Number) Maintenance window autoscaling disk usage (percent).
	// Maintenance window autoscaling disk usage (percent).
	PlannedUsageThreshold *int64 `json:"plannedUsageThreshold,omitempty" tf:"planned_usage_threshold,omitempty"`
}

type RedisClusterDiskSizeAutoscalingParameters struct {

	// (Number) Limit of disk size after autoscaling (GiB).
	// Limit of disk size after autoscaling (GiB).
	// +kubebuilder:validation:Optional
	DiskSizeLimit *int64 `json:"diskSizeLimit" tf:"disk_size_limit,omitempty"`

	// (Number) Immediate autoscaling disk usage (percent).
	// Immediate autoscaling disk usage (percent).
	// +kubebuilder:validation:Optional
	EmergencyUsageThreshold *int64 `json:"emergencyUsageThreshold,omitempty" tf:"emergency_usage_threshold,omitempty"`

	// (Number) Maintenance window autoscaling disk usage (percent).
	// Maintenance window autoscaling disk usage (percent).
	// +kubebuilder:validation:Optional
	PlannedUsageThreshold *int64 `json:"plannedUsageThreshold,omitempty" tf:"planned_usage_threshold,omitempty"`
}

type RedisClusterHostInitParameters struct {

	// (Boolean) Sets whether the host should get a public IP address or not.
	// Sets whether the host should get a public IP address or not.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// sharded only).
	// Replica priority of a current replica (usable for non-sharded only).
	ReplicaPriority *int64 `json:"replicaPriority,omitempty" tf:"replica_priority,omitempty"`

	// (String) The name of the shard to which the host belongs.
	// The name of the shard to which the host belongs.
	ShardName *string `json:"shardName,omitempty" tf:"shard_name,omitempty"`

	// (String) The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
	// The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// (String) The availability zone where resource is located. If it is not provided, the default provider zone will be used.
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type RedisClusterHostObservation struct {

	// (Boolean) Sets whether the host should get a public IP address or not.
	// Sets whether the host should get a public IP address or not.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// (String) The fully qualified domain name of the host.
	// The fully qualified domain name of the host.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// sharded only).
	// Replica priority of a current replica (usable for non-sharded only).
	ReplicaPriority *int64 `json:"replicaPriority,omitempty" tf:"replica_priority,omitempty"`

	// (String) The name of the shard to which the host belongs.
	// The name of the shard to which the host belongs.
	ShardName *string `json:"shardName,omitempty" tf:"shard_name,omitempty"`

	// (String) The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
	// The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// (String) The availability zone where resource is located. If it is not provided, the default provider zone will be used.
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type RedisClusterHostParameters struct {

	// (Boolean) Sets whether the host should get a public IP address or not.
	// Sets whether the host should get a public IP address or not.
	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// sharded only).
	// Replica priority of a current replica (usable for non-sharded only).
	// +kubebuilder:validation:Optional
	ReplicaPriority *int64 `json:"replicaPriority,omitempty" tf:"replica_priority,omitempty"`

	// (String) The name of the shard to which the host belongs.
	// The name of the shard to which the host belongs.
	// +kubebuilder:validation:Optional
	ShardName *string `json:"shardName,omitempty" tf:"shard_name,omitempty"`

	// (String) The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
	// The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// (String) The availability zone where resource is located. If it is not provided, the default provider zone will be used.
	// The [availability zone](https://yandex.cloud/docs/overview/concepts/geo-scope) where resource is located. If it is not provided, the default provider zone will be used.
	// +kubebuilder:validation:Optional
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type RedisClusterInitParameters struct {

	// (Block List, Max: 1) Access policy to the Redis cluster. (see below for nested schema)
	// Access policy to the Redis cluster.
	Access []RedisClusterAccessInitParameters `json:"access,omitempty" tf:"access,omitempty"`

	// (Boolean) Announce fqdn instead of ip address.
	// Announce fqdn instead of ip address.
	AnnounceHostnames *bool `json:"announceHostnames,omitempty" tf:"announce_hostnames,omitempty"`

	// (Boolean) Allows to use ACL users to auth in sentinel
	// Allows to use ACL users to auth in sentinel
	AuthSentinel *bool `json:"authSentinel,omitempty" tf:"auth_sentinel,omitempty"`

	// (Block List, Min: 1, Max: 1) Configuration of the Redis cluster. (see below for nested schema)
	// Configuration of the Redis cluster.
	Config []RedisClusterConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (Boolean) The true value means that resource is protected from accidental deletion.
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// (String) The resource description.
	// The resource description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) Disk size autoscaling settings. (see below for nested schema)
	// Disk size autoscaling settings.
	DiskSizeAutoscaling []RedisClusterDiskSizeAutoscalingInitParameters `json:"diskSizeAutoscaling,omitempty" tf:"disk_size_autoscaling,omitempty"`

	// (String) Deployment environment of the Redis cluster. Can be either PRESTABLE or PRODUCTION.
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// id is used.
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// (Block List, Min: 1) A host of the Redis cluster. (see below for nested schema)
	// A host of the Redis cluster.
	Host []RedisClusterHostInitParameters `json:"host,omitempty" tf:"host,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs which assigned to resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Block List, Max: 1) Maintenance window settings. (see below for nested schema)
	// Maintenance window settings.
	MaintenanceWindow []RedisClusterMaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// (String) The resource name.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The VPC Network ID of subnets which resource attached to.
	// The `VPC Network ID` of subnets which resource attached to.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// (String) Persistence mode. Possible values: ON, OFF.
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode *string `json:"persistenceMode,omitempty" tf:"persistence_mode,omitempty"`

	// (Block List, Min: 1, Max: 1) Resources allocated to hosts of the Redis cluster. (see below for nested schema)
	// Resources allocated to hosts of the Redis cluster.
	Resources []RedisClusterResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// (Set of String) The list of security groups applied to resource or their components.
	// The list of security groups applied to resource or their components.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.SecurityGroup
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// sharded. If cluster is sharded - disabling is not allowed.
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
	Sharded *bool `json:"sharded,omitempty" tf:"sharded,omitempty"`

	// (Boolean) TLS support mode enabled/disabled.
	// TLS support mode enabled/disabled.
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`
}

type RedisClusterMaintenanceWindowInitParameters struct {

	// (String) Day of week for maintenance window if window type is weekly. Possible values: MON, TUE, WED, THU, FRI, SAT, SUN.
	// Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// 24) for maintenance window if window type is weekly.
	// Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
	Hour *int64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// (String) Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	// Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RedisClusterMaintenanceWindowObservation struct {

	// (String) Day of week for maintenance window if window type is weekly. Possible values: MON, TUE, WED, THU, FRI, SAT, SUN.
	// Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// 24) for maintenance window if window type is weekly.
	// Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
	Hour *int64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// (String) Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	// Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RedisClusterMaintenanceWindowParameters struct {

	// (String) Day of week for maintenance window if window type is weekly. Possible values: MON, TUE, WED, THU, FRI, SAT, SUN.
	// Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// 24) for maintenance window if window type is weekly.
	// Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
	// +kubebuilder:validation:Optional
	Hour *int64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// (String) Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	// Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RedisClusterObservation struct {

	// (Block List, Max: 1) Access policy to the Redis cluster. (see below for nested schema)
	// Access policy to the Redis cluster.
	Access []RedisClusterAccessObservation `json:"access,omitempty" tf:"access,omitempty"`

	// (Boolean) Announce fqdn instead of ip address.
	// Announce fqdn instead of ip address.
	AnnounceHostnames *bool `json:"announceHostnames,omitempty" tf:"announce_hostnames,omitempty"`

	// (Boolean) Allows to use ACL users to auth in sentinel
	// Allows to use ACL users to auth in sentinel
	AuthSentinel *bool `json:"authSentinel,omitempty" tf:"auth_sentinel,omitempty"`

	// (Block List, Min: 1, Max: 1) Configuration of the Redis cluster. (see below for nested schema)
	// Configuration of the Redis cluster.
	Config []RedisClusterConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// (String) The creation timestamp of the resource.
	// The creation timestamp of the resource.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// (Boolean) The true value means that resource is protected from accidental deletion.
	// The `true` value means that resource is protected from accidental deletion.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// (String) The resource description.
	// The resource description.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) Disk size autoscaling settings. (see below for nested schema)
	// Disk size autoscaling settings.
	DiskSizeAutoscaling []RedisClusterDiskSizeAutoscalingObservation `json:"diskSizeAutoscaling,omitempty" tf:"disk_size_autoscaling,omitempty"`

	// (String) Deployment environment of the Redis cluster. Can be either PRESTABLE or PRODUCTION.
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// id is used.
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// (String) Aggregated health of the cluster. Can be either ALIVE, DEGRADED, DEAD or HEALTH_UNKNOWN. For more information see health field of JSON representation in the official documentation.
	// Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`. For more information see `health` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	// (Block List, Min: 1) A host of the Redis cluster. (see below for nested schema)
	// A host of the Redis cluster.
	Host []RedisClusterHostObservation `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs which assigned to resource.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Block List, Max: 1) Maintenance window settings. (see below for nested schema)
	// Maintenance window settings.
	MaintenanceWindow []RedisClusterMaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// (String) The resource name.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The VPC Network ID of subnets which resource attached to.
	// The `VPC Network ID` of subnets which resource attached to.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// (String) Persistence mode. Possible values: ON, OFF.
	// Persistence mode. Possible values: `ON`, `OFF`.
	PersistenceMode *string `json:"persistenceMode,omitempty" tf:"persistence_mode,omitempty"`

	// (Block List, Min: 1, Max: 1) Resources allocated to hosts of the Redis cluster. (see below for nested schema)
	// Resources allocated to hosts of the Redis cluster.
	Resources []RedisClusterResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	// (Set of String) The list of security groups applied to resource or their components.
	// The list of security groups applied to resource or their components.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// sharded. If cluster is sharded - disabling is not allowed.
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
	Sharded *bool `json:"sharded,omitempty" tf:"sharded,omitempty"`

	// (String) Status of the cluster. Can be either CREATING, STARTING, RUNNING, UPDATING, STOPPING, STOPPED, ERROR or STATUS_UNKNOWN. For more information see status field of JSON representation in the official documentation.
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`. For more information see `status` field of JSON representation in [the official documentation](https://yandex.cloud/docs/managed-redis/api-ref/Cluster/).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Boolean) TLS support mode enabled/disabled.
	// TLS support mode enabled/disabled.
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`
}

type RedisClusterParameters struct {

	// (Block List, Max: 1) Access policy to the Redis cluster. (see below for nested schema)
	// Access policy to the Redis cluster.
	// +kubebuilder:validation:Optional
	Access []RedisClusterAccessParameters `json:"access,omitempty" tf:"access,omitempty"`

	// (Boolean) Announce fqdn instead of ip address.
	// Announce fqdn instead of ip address.
	// +kubebuilder:validation:Optional
	AnnounceHostnames *bool `json:"announceHostnames,omitempty" tf:"announce_hostnames,omitempty"`

	// (Boolean) Allows to use ACL users to auth in sentinel
	// Allows to use ACL users to auth in sentinel
	// +kubebuilder:validation:Optional
	AuthSentinel *bool `json:"authSentinel,omitempty" tf:"auth_sentinel,omitempty"`

	// (Block List, Min: 1, Max: 1) Configuration of the Redis cluster. (see below for nested schema)
	// Configuration of the Redis cluster.
	// +kubebuilder:validation:Optional
	Config []RedisClusterConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// (Boolean) The true value means that resource is protected from accidental deletion.
	// The `true` value means that resource is protected from accidental deletion.
	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// (String) The resource description.
	// The resource description.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Block List, Max: 1) Disk size autoscaling settings. (see below for nested schema)
	// Disk size autoscaling settings.
	// +kubebuilder:validation:Optional
	DiskSizeAutoscaling []RedisClusterDiskSizeAutoscalingParameters `json:"diskSizeAutoscaling,omitempty" tf:"disk_size_autoscaling,omitempty"`

	// (String) Deployment environment of the Redis cluster. Can be either PRESTABLE or PRODUCTION.
	// Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// id is used.
	// The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// (Block List, Min: 1) A host of the Redis cluster. (see below for nested schema)
	// A host of the Redis cluster.
	// +kubebuilder:validation:Optional
	Host []RedisClusterHostParameters `json:"host,omitempty" tf:"host,omitempty"`

	// (Map of String) A set of key/value label pairs which assigned to resource.
	// A set of key/value label pairs which assigned to resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// (Block List, Max: 1) Maintenance window settings. (see below for nested schema)
	// Maintenance window settings.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []RedisClusterMaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// (String) The resource name.
	// The resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The VPC Network ID of subnets which resource attached to.
	// The `VPC Network ID` of subnets which resource attached to.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// (String) Persistence mode. Possible values: ON, OFF.
	// Persistence mode. Possible values: `ON`, `OFF`.
	// +kubebuilder:validation:Optional
	PersistenceMode *string `json:"persistenceMode,omitempty" tf:"persistence_mode,omitempty"`

	// (Block List, Min: 1, Max: 1) Resources allocated to hosts of the Redis cluster. (see below for nested schema)
	// Resources allocated to hosts of the Redis cluster.
	// +kubebuilder:validation:Optional
	Resources []RedisClusterResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// (Set of String) The list of security groups applied to resource or their components.
	// The list of security groups applied to resource or their components.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// sharded. If cluster is sharded - disabling is not allowed.
	// Redis Cluster mode enabled/disabled. Enables sharding when cluster non-sharded. If cluster is sharded - disabling is not allowed.
	// +kubebuilder:validation:Optional
	Sharded *bool `json:"sharded,omitempty" tf:"sharded,omitempty"`

	// (Boolean) TLS support mode enabled/disabled.
	// TLS support mode enabled/disabled.
	// +kubebuilder:validation:Optional
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`
}

type RedisClusterResourcesInitParameters struct {

	// (Number) Volume of the storage available to a host, in gigabytes.
	// Volume of the storage available to a host, in gigabytes.
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// environment default is used if missing.
	// Type of the storage of Redis hosts - environment default is used if missing.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	// (String) The ID of the preset for computational resources available to a host (CPU, memory etc.). For more information, see the official documentation.
	// The ID of the preset for computational resources available to a host (CPU, memory etc.). For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type RedisClusterResourcesObservation struct {

	// (Number) Volume of the storage available to a host, in gigabytes.
	// Volume of the storage available to a host, in gigabytes.
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// environment default is used if missing.
	// Type of the storage of Redis hosts - environment default is used if missing.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	// (String) The ID of the preset for computational resources available to a host (CPU, memory etc.). For more information, see the official documentation.
	// The ID of the preset for computational resources available to a host (CPU, memory etc.). For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type RedisClusterResourcesParameters struct {

	// (Number) Volume of the storage available to a host, in gigabytes.
	// Volume of the storage available to a host, in gigabytes.
	// +kubebuilder:validation:Optional
	DiskSize *int64 `json:"diskSize" tf:"disk_size,omitempty"`

	// environment default is used if missing.
	// Type of the storage of Redis hosts - environment default is used if missing.
	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	// (String) The ID of the preset for computational resources available to a host (CPU, memory etc.). For more information, see the official documentation.
	// The ID of the preset for computational resources available to a host (CPU, memory etc.). For more information, see [the official documentation](https://yandex.cloud/docs/managed-redis/concepts).
	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

// RedisClusterSpec defines the desired state of RedisCluster
type RedisClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RedisClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RedisClusterInitParameters `json:"initProvider,omitempty"`
}

// RedisClusterStatus defines the observed state of RedisCluster.
type RedisClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RedisClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RedisCluster is the Schema for the RedisClusters API. Manages a Redis cluster within Yandex Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type RedisCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.config) || (has(self.initProvider) && has(self.initProvider.config))",message="spec.forProvider.config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.environment) || (has(self.initProvider) && has(self.initProvider.environment))",message="spec.forProvider.environment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resources) || (has(self.initProvider) && has(self.initProvider.resources))",message="spec.forProvider.resources is a required parameter"
	Spec   RedisClusterSpec   `json:"spec"`
	Status RedisClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RedisClusterList contains a list of RedisClusters
type RedisClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RedisCluster `json:"items"`
}

// Repository type metadata.
var (
	RedisCluster_Kind             = "RedisCluster"
	RedisCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RedisCluster_Kind}.String()
	RedisCluster_KindAPIVersion   = RedisCluster_Kind + "." + CRDGroupVersion.String()
	RedisCluster_GroupVersionKind = CRDGroupVersion.WithKind(RedisCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&RedisCluster{}, &RedisClusterList{})
}
