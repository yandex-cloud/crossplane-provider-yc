/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardsInitParameters struct {

	// A set of named OpenSearch node group configurations. The structure is documented below.
	NodeGroups []NodeGroupsInitParameters `json:"nodeGroups,omitempty" tf:"node_groups,omitempty"`
}

type DashboardsObservation struct {

	// A set of named OpenSearch node group configurations. The structure is documented below.
	NodeGroups []NodeGroupsObservation `json:"nodeGroups,omitempty" tf:"node_groups,omitempty"`
}

type DashboardsParameters struct {

	// A set of named OpenSearch node group configurations. The structure is documented below.
	// +kubebuilder:validation:Optional
	NodeGroups []NodeGroupsParameters `json:"nodeGroups" tf:"node_groups,omitempty"`
}

type HostsInitParameters struct {
}

type HostsObservation struct {

	// Sets whether the host should get a public IP address. Can be either true or false.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// The fully qualified domain name of the host.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// The roles of the deployed host. Can contain DATA and/or MANAGER roles. Will be empty for DASHBOARDS type.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// The ID of the subnet, to which the host belongs. The subnet must
	// be a part of the network to which the cluster belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The type of the deployed host. Can be either OPENSEARCH or DASHBOARDS.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The availability zone where the OpenSearch host will be created.
	// For more information see the official documentation.
	Zone *string `json:"zone,omitempty" tf:"zone,omitempty"`
}

type HostsParameters struct {
}

type NodeGroupsInitParameters struct {

	// Sets whether the hosts should get a public IP address on creation.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	HostsCount *float64 `json:"hostsCount,omitempty" tf:"hosts_count,omitempty"`

	// Name of OpenSearch node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resources allocated to hosts of this OpenSearch node group. The structure is documented below.
	Resources []NodeGroupsResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// A set of the subnets, to which the hosts belongs. The subnets must be a part of the network to which the cluster belongs. No other parameters should be changed simultaneously with this one, except zones_ids.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +listType=set
	ZoneIds []*string `json:"zoneIds,omitempty" tf:"zone_ids,omitempty"`
}

type NodeGroupsObservation struct {

	// Sets whether the hosts should get a public IP address on creation.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	HostsCount *float64 `json:"hostsCount,omitempty" tf:"hosts_count,omitempty"`

	// Name of OpenSearch node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resources allocated to hosts of this OpenSearch node group. The structure is documented below.
	Resources []NodeGroupsResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	// A set of the subnets, to which the hosts belongs. The subnets must be a part of the network to which the cluster belongs. No other parameters should be changed simultaneously with this one, except zones_ids.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +listType=set
	ZoneIds []*string `json:"zoneIds,omitempty" tf:"zone_ids,omitempty"`
}

type NodeGroupsParameters struct {

	// Sets whether the hosts should get a public IP address on creation.
	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	HostsCount *float64 `json:"hostsCount" tf:"hosts_count,omitempty"`

	// Name of OpenSearch node group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Resources allocated to hosts of this OpenSearch node group. The structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []NodeGroupsResourcesParameters `json:"resources" tf:"resources,omitempty"`

	// A set of the subnets, to which the hosts belongs. The subnets must be a part of the network to which the cluster belongs. No other parameters should be changed simultaneously with this one, except zones_ids.
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	ZoneIds []*string `json:"zoneIds" tf:"zone_ids,omitempty"`
}

type NodeGroupsResourcesInitParameters struct {

	// Volume of the storage available to a host, in bytes.
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of OpenSearch hosts.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type NodeGroupsResourcesObservation struct {

	// Volume of the storage available to a host, in bytes.
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of OpenSearch hosts.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type NodeGroupsResourcesParameters struct {

	// Volume of the storage available to a host, in bytes.
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize" tf:"disk_size,omitempty"`

	// Type of the storage of OpenSearch hosts.
	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

type OpensearchClusterConfigInitParameters struct {

	// Configuration for Dashboards node groups. The structure is documented below.
	Dashboards []DashboardsInitParameters `json:"dashboards,omitempty" tf:"dashboards,omitempty"`

	// Configuration for OpenSearch node groups. The structure is documented below.
	Opensearch []OpensearchInitParameters `json:"opensearch,omitempty" tf:"opensearch,omitempty"`

	// Version of OpenSearch.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type OpensearchClusterConfigObservation struct {

	// Configuration for Dashboards node groups. The structure is documented below.
	Dashboards []DashboardsObservation `json:"dashboards,omitempty" tf:"dashboards,omitempty"`

	// Configuration for OpenSearch node groups. The structure is documented below.
	Opensearch []OpensearchObservation `json:"opensearch,omitempty" tf:"opensearch,omitempty"`

	// Version of OpenSearch.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type OpensearchClusterConfigParameters struct {

	// Password for admin user of OpenSearch.
	// +kubebuilder:validation:Required
	AdminPasswordSecretRef v1.SecretKeySelector `json:"adminPasswordSecretRef" tf:"-"`

	// Configuration for Dashboards node groups. The structure is documented below.
	// +kubebuilder:validation:Optional
	Dashboards []DashboardsParameters `json:"dashboards,omitempty" tf:"dashboards,omitempty"`

	// Configuration for OpenSearch node groups. The structure is documented below.
	// +kubebuilder:validation:Optional
	Opensearch []OpensearchParameters `json:"opensearch" tf:"opensearch,omitempty"`

	// Version of OpenSearch.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type OpensearchClusterInitParameters struct {

	// Configuration of the OpenSearch cluster. The structure is documented below.
	Config []OpensearchClusterConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the OpenSearch cluster.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the OpenSearch cluster. Can be either PRESTABLE or PRODUCTION. Default: PRODUCTION
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the OpenSearch cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	MaintenanceWindow []OpensearchClusterMaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Name of the OpenSearch cluster. Provided by the client when the cluster is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the OpenSearch cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// A set of ids of security groups assigned to hosts of the cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.SecurityGroup
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// ID of the service account authorized for this cluster.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type OpensearchClusterMaintenanceWindowInitParameters struct {

	// Day of week for maintenance window if window type is weekly. Possible values: MON, TUE, WED, THU, FRI, SAT, SUN.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OpensearchClusterMaintenanceWindowObservation struct {

	// Day of week for maintenance window if window type is weekly. Possible values: MON, TUE, WED, THU, FRI, SAT, SUN.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type OpensearchClusterMaintenanceWindowParameters struct {

	// Day of week for maintenance window if window type is weekly. Possible values: MON, TUE, WED, THU, FRI, SAT, SUN.
	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
	// +kubebuilder:validation:Optional
	Hour *float64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type OpensearchClusterObservation struct {

	// Configuration of the OpenSearch cluster. The structure is documented below.
	Config []OpensearchClusterConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Creation timestamp of the key.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the OpenSearch cluster.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the OpenSearch cluster. Can be either PRESTABLE or PRODUCTION. Default: PRODUCTION
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Aggregated health of the cluster. Can be either ALIVE, DEGRADED, DEAD or HEALTH_UNKNOWN.
	// For more information see health field of JSON representation in the official documentation.
	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	// A hosts of the OpenSearch cluster. The structure is documented below.
	Hosts []HostsObservation `json:"hosts,omitempty" tf:"hosts,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the OpenSearch cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	MaintenanceWindow []OpensearchClusterMaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Name of the OpenSearch cluster. Provided by the client when the cluster is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the OpenSearch cluster belongs.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// A set of ids of security groups assigned to hosts of the cluster.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// ID of the service account authorized for this cluster.
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// Status of the cluster. Can be either CREATING, STARTING, RUNNING, UPDATING, STOPPING, STOPPED, ERROR or STATUS_UNKNOWN.
	// For more information see status field of JSON representation in the official documentation.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type OpensearchClusterParameters struct {

	// Configuration of the OpenSearch cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Config []OpensearchClusterConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the OpenSearch cluster.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the OpenSearch cluster. Can be either PRESTABLE or PRODUCTION. Default: PRODUCTION
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the OpenSearch cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceWindow []OpensearchClusterMaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Name of the OpenSearch cluster. Provided by the client when the cluster is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the OpenSearch cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// A set of ids of security groups assigned to hosts of the cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// ID of the service account authorized for this cluster.
	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`
}

type OpensearchInitParameters struct {

	// A set of named OpenSearch node group configurations. The structure is documented below.
	NodeGroups []OpensearchNodeGroupsInitParameters `json:"nodeGroups,omitempty" tf:"node_groups,omitempty"`

	// A set of requested OpenSearch plugins.
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`
}

type OpensearchNodeGroupsInitParameters struct {

	// Sets whether the hosts should get a public IP address on creation.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	HostsCount *float64 `json:"hostsCount,omitempty" tf:"hosts_count,omitempty"`

	// Name of OpenSearch node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resources allocated to hosts of this OpenSearch node group. The structure is documented below.
	Resources []OpensearchNodeGroupsResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`

	// A set of OpenSearch roles assigned to hosts. Available roles are: DATA, MANAGER. Default: [DATA, MANAGER]
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// A set of the subnets, to which the hosts belongs. The subnets must be a part of the network to which the cluster belongs. No other parameters should be changed simultaneously with this one, except zones_ids.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Subnet
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`

	// +listType=set
	ZoneIds []*string `json:"zoneIds,omitempty" tf:"zone_ids,omitempty"`
}

type OpensearchNodeGroupsObservation struct {

	// Sets whether the hosts should get a public IP address on creation.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	HostsCount *float64 `json:"hostsCount,omitempty" tf:"hosts_count,omitempty"`

	// Name of OpenSearch node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Resources allocated to hosts of this OpenSearch node group. The structure is documented below.
	Resources []OpensearchNodeGroupsResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`

	// A set of OpenSearch roles assigned to hosts. Available roles are: DATA, MANAGER. Default: [DATA, MANAGER]
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// A set of the subnets, to which the hosts belongs. The subnets must be a part of the network to which the cluster belongs. No other parameters should be changed simultaneously with this one, except zones_ids.
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// +listType=set
	ZoneIds []*string `json:"zoneIds,omitempty" tf:"zone_ids,omitempty"`
}

type OpensearchNodeGroupsParameters struct {

	// Sets whether the hosts should get a public IP address on creation.
	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	HostsCount *float64 `json:"hostsCount" tf:"hosts_count,omitempty"`

	// Name of OpenSearch node group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Resources allocated to hosts of this OpenSearch node group. The structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []OpensearchNodeGroupsResourcesParameters `json:"resources" tf:"resources,omitempty"`

	// A set of OpenSearch roles assigned to hosts. Available roles are: DATA, MANAGER. Default: [DATA, MANAGER]
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// A set of the subnets, to which the hosts belongs. The subnets must be a part of the network to which the cluster belongs. No other parameters should be changed simultaneously with this one, except zones_ids.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	// +listType=set
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	// +listType=set
	ZoneIds []*string `json:"zoneIds" tf:"zone_ids,omitempty"`
}

type OpensearchNodeGroupsResourcesInitParameters struct {

	// Volume of the storage available to a host, in bytes.
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of OpenSearch hosts.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type OpensearchNodeGroupsResourcesObservation struct {

	// Volume of the storage available to a host, in bytes.
	DiskSize *float64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of OpenSearch hosts.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type OpensearchNodeGroupsResourcesParameters struct {

	// Volume of the storage available to a host, in bytes.
	// +kubebuilder:validation:Optional
	DiskSize *float64 `json:"diskSize" tf:"disk_size,omitempty"`

	// Type of the storage of OpenSearch hosts.
	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

type OpensearchObservation struct {

	// A set of named OpenSearch node group configurations. The structure is documented below.
	NodeGroups []OpensearchNodeGroupsObservation `json:"nodeGroups,omitempty" tf:"node_groups,omitempty"`

	// A set of requested OpenSearch plugins.
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`
}

type OpensearchParameters struct {

	// A set of named OpenSearch node group configurations. The structure is documented below.
	// +kubebuilder:validation:Optional
	NodeGroups []OpensearchNodeGroupsParameters `json:"nodeGroups" tf:"node_groups,omitempty"`

	// A set of requested OpenSearch plugins.
	// +kubebuilder:validation:Optional
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`
}

// OpensearchClusterSpec defines the desired state of OpensearchCluster
type OpensearchClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OpensearchClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider OpensearchClusterInitParameters `json:"initProvider,omitempty"`
}

// OpensearchClusterStatus defines the observed state of OpensearchCluster.
type OpensearchClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OpensearchClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// OpensearchCluster is the Schema for the OpensearchClusters API. Manages a OpenSearch cluster within Yandex.Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type OpensearchCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   OpensearchClusterSpec   `json:"spec"`
	Status OpensearchClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OpensearchClusterList contains a list of OpensearchClusters
type OpensearchClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OpensearchCluster `json:"items"`
}

// Repository type metadata.
var (
	OpensearchCluster_Kind             = "OpensearchCluster"
	OpensearchCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OpensearchCluster_Kind}.String()
	OpensearchCluster_KindAPIVersion   = OpensearchCluster_Kind + "." + CRDGroupVersion.String()
	OpensearchCluster_GroupVersionKind = CRDGroupVersion.WithKind(OpensearchCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&OpensearchCluster{}, &OpensearchClusterList{})
}
