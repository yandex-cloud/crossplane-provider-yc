/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type KafkaTopicInitParameters_2 struct {

	// (String) The ID of the Kafka cluster.
	// The ID of the Kafka cluster.
	// +crossplane:generate:reference:type=KafkaCluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a KafkaCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a KafkaCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// (String) The resource name.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The number of the topic's partitions.
	// The number of the topic's partitions.
	Partitions *float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// (Number) Amount of data copies (replicas) for the topic in the cluster.
	// Amount of data copies (replicas) for the topic in the cluster.
	ReplicationFactor *float64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// defined settings for the topic. For more information, see the official documentation and the Kafka documentation. (see below for nested schema)
	// User-defined settings for the topic. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts/settings-list#topic-settings) and [the Kafka documentation](https://kafka.apache.org/documentation/#topicconfigs).
	TopicConfig []KafkaTopicTopicConfigInitParameters `json:"topicConfig,omitempty" tf:"topic_config,omitempty"`
}

type KafkaTopicObservation_2 struct {

	// (String) The ID of the Kafka cluster.
	// The ID of the Kafka cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The resource name.
	// The resource name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The number of the topic's partitions.
	// The number of the topic's partitions.
	Partitions *float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// (Number) Amount of data copies (replicas) for the topic in the cluster.
	// Amount of data copies (replicas) for the topic in the cluster.
	ReplicationFactor *float64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// defined settings for the topic. For more information, see the official documentation and the Kafka documentation. (see below for nested schema)
	// User-defined settings for the topic. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts/settings-list#topic-settings) and [the Kafka documentation](https://kafka.apache.org/documentation/#topicconfigs).
	TopicConfig []KafkaTopicTopicConfigObservation `json:"topicConfig,omitempty" tf:"topic_config,omitempty"`
}

type KafkaTopicParameters_2 struct {

	// (String) The ID of the Kafka cluster.
	// The ID of the Kafka cluster.
	// +crossplane:generate:reference:type=KafkaCluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a KafkaCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a KafkaCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// (String) The resource name.
	// The resource name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The number of the topic's partitions.
	// The number of the topic's partitions.
	// +kubebuilder:validation:Optional
	Partitions *float64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// (Number) Amount of data copies (replicas) for the topic in the cluster.
	// Amount of data copies (replicas) for the topic in the cluster.
	// +kubebuilder:validation:Optional
	ReplicationFactor *float64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// defined settings for the topic. For more information, see the official documentation and the Kafka documentation. (see below for nested schema)
	// User-defined settings for the topic. For more information, see [the official documentation](https://yandex.cloud/docs/managed-kafka/concepts/settings-list#topic-settings) and [the Kafka documentation](https://kafka.apache.org/documentation/#topicconfigs).
	// +kubebuilder:validation:Optional
	TopicConfig []KafkaTopicTopicConfigParameters `json:"topicConfig,omitempty" tf:"topic_config,omitempty"`
}

type KafkaTopicTopicConfigInitParameters struct {

	// (String) Retention policy to use on log segments.
	// Retention policy to use on log segments.
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// (String) Compression type of kafka topic.
	// Compression type of kafka topic.
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	// (String) The amount of time to retain delete tombstone markers for log compacted topics.
	// The amount of time to retain delete tombstone markers for log compacted topics.
	DeleteRetentionMs *string `json:"deleteRetentionMs,omitempty" tf:"delete_retention_ms,omitempty"`

	// (String) The time to wait before deleting a file from the filesystem.
	// The time to wait before deleting a file from the filesystem.
	FileDeleteDelayMs *string `json:"fileDeleteDelayMs,omitempty" tf:"file_delete_delay_ms,omitempty"`

	// (String) This setting allows specifying an interval at which we will force an fsync of data written to the log.
	// This setting allows specifying an interval at which we will force an fsync of data written to the log.
	FlushMessages *string `json:"flushMessages,omitempty" tf:"flush_messages,omitempty"`

	// (String) This setting allows specifying a time interval at which we will force an fsync of data written to the log.
	// This setting allows specifying a time interval at which we will force an fsync of data written to the log.
	FlushMs *string `json:"flushMs,omitempty" tf:"flush_ms,omitempty"`

	// (String) The largest record batch size allowed by Kafka (after compression if compression is enabled).
	// The largest record batch size allowed by Kafka (after compression if compression is enabled).
	MaxMessageBytes *string `json:"maxMessageBytes,omitempty" tf:"max_message_bytes,omitempty"`

	// (String) The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
	// The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
	MinCompactionLagMs *string `json:"minCompactionLagMs,omitempty" tf:"min_compaction_lag_ms,omitempty"`

	// 1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
	// When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
	MinInsyncReplicas *string `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// (Boolean, Deprecated) True if we should preallocate the file on disk when creating a new log segment.
	// True if we should preallocate the file on disk when creating a new log segment.
	Preallocate *bool `json:"preallocate,omitempty" tf:"preallocate,omitempty"`

	// (String) This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
	RetentionBytes *string `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// (String) This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
	RetentionMs *string `json:"retentionMs,omitempty" tf:"retention_ms,omitempty"`

	// (String) This configuration controls the segment file size for the log.
	// This configuration controls the segment file size for the log.
	SegmentBytes *string `json:"segmentBytes,omitempty" tf:"segment_bytes,omitempty"`
}

type KafkaTopicTopicConfigObservation struct {

	// (String) Retention policy to use on log segments.
	// Retention policy to use on log segments.
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// (String) Compression type of kafka topic.
	// Compression type of kafka topic.
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	// (String) The amount of time to retain delete tombstone markers for log compacted topics.
	// The amount of time to retain delete tombstone markers for log compacted topics.
	DeleteRetentionMs *string `json:"deleteRetentionMs,omitempty" tf:"delete_retention_ms,omitempty"`

	// (String) The time to wait before deleting a file from the filesystem.
	// The time to wait before deleting a file from the filesystem.
	FileDeleteDelayMs *string `json:"fileDeleteDelayMs,omitempty" tf:"file_delete_delay_ms,omitempty"`

	// (String) This setting allows specifying an interval at which we will force an fsync of data written to the log.
	// This setting allows specifying an interval at which we will force an fsync of data written to the log.
	FlushMessages *string `json:"flushMessages,omitempty" tf:"flush_messages,omitempty"`

	// (String) This setting allows specifying a time interval at which we will force an fsync of data written to the log.
	// This setting allows specifying a time interval at which we will force an fsync of data written to the log.
	FlushMs *string `json:"flushMs,omitempty" tf:"flush_ms,omitempty"`

	// (String) The largest record batch size allowed by Kafka (after compression if compression is enabled).
	// The largest record batch size allowed by Kafka (after compression if compression is enabled).
	MaxMessageBytes *string `json:"maxMessageBytes,omitempty" tf:"max_message_bytes,omitempty"`

	// (String) The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
	// The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
	MinCompactionLagMs *string `json:"minCompactionLagMs,omitempty" tf:"min_compaction_lag_ms,omitempty"`

	// 1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
	// When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
	MinInsyncReplicas *string `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// (Boolean, Deprecated) True if we should preallocate the file on disk when creating a new log segment.
	// True if we should preallocate the file on disk when creating a new log segment.
	Preallocate *bool `json:"preallocate,omitempty" tf:"preallocate,omitempty"`

	// (String) This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
	RetentionBytes *string `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// (String) This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
	RetentionMs *string `json:"retentionMs,omitempty" tf:"retention_ms,omitempty"`

	// (String) This configuration controls the segment file size for the log.
	// This configuration controls the segment file size for the log.
	SegmentBytes *string `json:"segmentBytes,omitempty" tf:"segment_bytes,omitempty"`
}

type KafkaTopicTopicConfigParameters struct {

	// (String) Retention policy to use on log segments.
	// Retention policy to use on log segments.
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// (String) Compression type of kafka topic.
	// Compression type of kafka topic.
	// +kubebuilder:validation:Optional
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	// (String) The amount of time to retain delete tombstone markers for log compacted topics.
	// The amount of time to retain delete tombstone markers for log compacted topics.
	// +kubebuilder:validation:Optional
	DeleteRetentionMs *string `json:"deleteRetentionMs,omitempty" tf:"delete_retention_ms,omitempty"`

	// (String) The time to wait before deleting a file from the filesystem.
	// The time to wait before deleting a file from the filesystem.
	// +kubebuilder:validation:Optional
	FileDeleteDelayMs *string `json:"fileDeleteDelayMs,omitempty" tf:"file_delete_delay_ms,omitempty"`

	// (String) This setting allows specifying an interval at which we will force an fsync of data written to the log.
	// This setting allows specifying an interval at which we will force an fsync of data written to the log.
	// +kubebuilder:validation:Optional
	FlushMessages *string `json:"flushMessages,omitempty" tf:"flush_messages,omitempty"`

	// (String) This setting allows specifying a time interval at which we will force an fsync of data written to the log.
	// This setting allows specifying a time interval at which we will force an fsync of data written to the log.
	// +kubebuilder:validation:Optional
	FlushMs *string `json:"flushMs,omitempty" tf:"flush_ms,omitempty"`

	// (String) The largest record batch size allowed by Kafka (after compression if compression is enabled).
	// The largest record batch size allowed by Kafka (after compression if compression is enabled).
	// +kubebuilder:validation:Optional
	MaxMessageBytes *string `json:"maxMessageBytes,omitempty" tf:"max_message_bytes,omitempty"`

	// (String) The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
	// The minimum time a message will remain uncompacted in the log. Only applicable for logs that are being compacted.
	// +kubebuilder:validation:Optional
	MinCompactionLagMs *string `json:"minCompactionLagMs,omitempty" tf:"min_compaction_lag_ms,omitempty"`

	// 1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
	// When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
	// +kubebuilder:validation:Optional
	MinInsyncReplicas *string `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// (Boolean, Deprecated) True if we should preallocate the file on disk when creating a new log segment.
	// True if we should preallocate the file on disk when creating a new log segment.
	// +kubebuilder:validation:Optional
	Preallocate *bool `json:"preallocate,omitempty" tf:"preallocate,omitempty"`

	// (String) This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// This configuration controls the maximum size a partition (which consists of log segments) can grow to before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// +kubebuilder:validation:Optional
	RetentionBytes *string `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// (String) This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// This configuration controls the maximum time we will retain a log before we will discard old log segments to free up space if we are using the "delete" retention policy.
	// +kubebuilder:validation:Optional
	RetentionMs *string `json:"retentionMs,omitempty" tf:"retention_ms,omitempty"`

	// (String) This configuration controls the segment file size for the log.
	// This configuration controls the segment file size for the log.
	// +kubebuilder:validation:Optional
	SegmentBytes *string `json:"segmentBytes,omitempty" tf:"segment_bytes,omitempty"`
}

// KafkaTopicSpec defines the desired state of KafkaTopic
type KafkaTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KafkaTopicParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KafkaTopicInitParameters_2 `json:"initProvider,omitempty"`
}

// KafkaTopicStatus defines the observed state of KafkaTopic.
type KafkaTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KafkaTopicObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KafkaTopic is the Schema for the KafkaTopics API. Manages a topic of a Kafka cluster within Yandex Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type KafkaTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.partitions) || (has(self.initProvider) && has(self.initProvider.partitions))",message="spec.forProvider.partitions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.replicationFactor) || (has(self.initProvider) && has(self.initProvider.replicationFactor))",message="spec.forProvider.replicationFactor is a required parameter"
	Spec   KafkaTopicSpec   `json:"spec"`
	Status KafkaTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KafkaTopicList contains a list of KafkaTopics
type KafkaTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KafkaTopic `json:"items"`
}

// Repository type metadata.
var (
	KafkaTopic_Kind             = "KafkaTopic"
	KafkaTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KafkaTopic_Kind}.String()
	KafkaTopic_KindAPIVersion   = KafkaTopic_Kind + "." + CRDGroupVersion.String()
	KafkaTopic_GroupVersionKind = CRDGroupVersion.WithKind(KafkaTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&KafkaTopic{}, &KafkaTopicList{})
}
