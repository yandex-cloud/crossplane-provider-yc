//go:build !ignore_autogenerated

/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessInitParameters) DeepCopyInto(out *AccessInitParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Metrika != nil {
		in, out := &in.Metrika, &out.Metrika
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
	if in.YandexQuery != nil {
		in, out := &in.YandexQuery, &out.YandexQuery
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessInitParameters.
func (in *AccessInitParameters) DeepCopy() *AccessInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessObservation) DeepCopyInto(out *AccessObservation) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Metrika != nil {
		in, out := &in.Metrika, &out.Metrika
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
	if in.YandexQuery != nil {
		in, out := &in.YandexQuery, &out.YandexQuery
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessObservation.
func (in *AccessObservation) DeepCopy() *AccessObservation {
	if in == nil {
		return nil
	}
	out := new(AccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessParameters) DeepCopyInto(out *AccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Metrika != nil {
		in, out := &in.Metrika, &out.Metrika
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
	if in.YandexQuery != nil {
		in, out := &in.YandexQuery, &out.YandexQuery
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessParameters.
func (in *AccessParameters) DeepCopy() *AccessParameters {
	if in == nil {
		return nil
	}
	out := new(AccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogInitParameters) DeepCopyInto(out *AuditLogInitParameters) {
	*out = *in
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = new(string)
		**out = **in
	}
	if in.RuntimeConfiguration != nil {
		in, out := &in.RuntimeConfiguration, &out.RuntimeConfiguration
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogInitParameters.
func (in *AuditLogInitParameters) DeepCopy() *AuditLogInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuditLogInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogObservation) DeepCopyInto(out *AuditLogObservation) {
	*out = *in
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = new(string)
		**out = **in
	}
	if in.RuntimeConfiguration != nil {
		in, out := &in.RuntimeConfiguration, &out.RuntimeConfiguration
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogObservation.
func (in *AuditLogObservation) DeepCopy() *AuditLogObservation {
	if in == nil {
		return nil
	}
	out := new(AuditLogObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogParameters) DeepCopyInto(out *AuditLogParameters) {
	*out = *in
	if in.Filter != nil {
		in, out := &in.Filter, &out.Filter
		*out = new(string)
		**out = **in
	}
	if in.RuntimeConfiguration != nil {
		in, out := &in.RuntimeConfiguration, &out.RuntimeConfiguration
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogParameters.
func (in *AuditLogParameters) DeepCopy() *AuditLogParameters {
	if in == nil {
		return nil
	}
	out := new(AuditLogParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupWindowStartInitParameters) DeepCopyInto(out *BackupWindowStartInitParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupWindowStartInitParameters.
func (in *BackupWindowStartInitParameters) DeepCopy() *BackupWindowStartInitParameters {
	if in == nil {
		return nil
	}
	out := new(BackupWindowStartInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupWindowStartObservation) DeepCopyInto(out *BackupWindowStartObservation) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupWindowStartObservation.
func (in *BackupWindowStartObservation) DeepCopy() *BackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(BackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupWindowStartParameters) DeepCopyInto(out *BackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupWindowStartParameters.
func (in *BackupWindowStartParameters) DeepCopy() *BackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(BackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseCluster) DeepCopyInto(out *ClickhouseCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseCluster.
func (in *ClickhouseCluster) DeepCopy() *ClickhouseCluster {
	if in == nil {
		return nil
	}
	out := new(ClickhouseCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClickhouseCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterInitParameters) DeepCopyInto(out *ClickhouseClusterInitParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]AccessInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]BackupWindowStartInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clickhouse != nil {
		in, out := &in.Clickhouse, &out.Clickhouse
		*out = make([]ClickhouseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CloudStorage != nil {
		in, out := &in.CloudStorage, &out.CloudStorage
		*out = make([]CloudStorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CopySchemaOnNewHosts != nil {
		in, out := &in.CopySchemaOnNewHosts, &out.CopySchemaOnNewHosts
		*out = new(bool)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]DatabaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EmbeddedKeeper != nil {
		in, out := &in.EmbeddedKeeper, &out.EmbeddedKeeper
		*out = new(bool)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FormatSchema != nil {
		in, out := &in.FormatSchema, &out.FormatSchema
		*out = make([]FormatSchemaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MLModel != nil {
		in, out := &in.MLModel, &out.MLModel
		*out = make([]MLModelInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SQLDatabaseManagement != nil {
		in, out := &in.SQLDatabaseManagement, &out.SQLDatabaseManagement
		*out = new(bool)
		**out = **in
	}
	if in.SQLUserManagement != nil {
		in, out := &in.SQLUserManagement, &out.SQLUserManagement
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIDRef != nil {
		in, out := &in.ServiceAccountIDRef, &out.ServiceAccountIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIDSelector != nil {
		in, out := &in.ServiceAccountIDSelector, &out.ServiceAccountIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Shard != nil {
		in, out := &in.Shard, &out.Shard
		*out = make([]ShardInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ShardGroup != nil {
		in, out := &in.ShardGroup, &out.ShardGroup
		*out = make([]ShardGroupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]UserInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ZookeeperInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterInitParameters.
func (in *ClickhouseClusterInitParameters) DeepCopy() *ClickhouseClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterList) DeepCopyInto(out *ClickhouseClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClickhouseCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterList.
func (in *ClickhouseClusterList) DeepCopy() *ClickhouseClusterList {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClickhouseClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterObservation) DeepCopyInto(out *ClickhouseClusterObservation) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]AccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]BackupWindowStartObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clickhouse != nil {
		in, out := &in.Clickhouse, &out.Clickhouse
		*out = make([]ClickhouseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CloudStorage != nil {
		in, out := &in.CloudStorage, &out.CloudStorage
		*out = make([]CloudStorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CopySchemaOnNewHosts != nil {
		in, out := &in.CopySchemaOnNewHosts, &out.CopySchemaOnNewHosts
		*out = new(bool)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]DatabaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EmbeddedKeeper != nil {
		in, out := &in.EmbeddedKeeper, &out.EmbeddedKeeper
		*out = new(bool)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FormatSchema != nil {
		in, out := &in.FormatSchema, &out.FormatSchema
		*out = make([]FormatSchemaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MLModel != nil {
		in, out := &in.MLModel, &out.MLModel
		*out = make([]MLModelObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SQLDatabaseManagement != nil {
		in, out := &in.SQLDatabaseManagement, &out.SQLDatabaseManagement
		*out = new(bool)
		**out = **in
	}
	if in.SQLUserManagement != nil {
		in, out := &in.SQLUserManagement, &out.SQLUserManagement
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.Shard != nil {
		in, out := &in.Shard, &out.Shard
		*out = make([]ShardObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ShardGroup != nil {
		in, out := &in.ShardGroup, &out.ShardGroup
		*out = make([]ShardGroupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]UserObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ZookeeperObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterObservation.
func (in *ClickhouseClusterObservation) DeepCopy() *ClickhouseClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterParameters) DeepCopyInto(out *ClickhouseClusterParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]AccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]BackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clickhouse != nil {
		in, out := &in.Clickhouse, &out.Clickhouse
		*out = make([]ClickhouseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CloudStorage != nil {
		in, out := &in.CloudStorage, &out.CloudStorage
		*out = make([]CloudStorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CopySchemaOnNewHosts != nil {
		in, out := &in.CopySchemaOnNewHosts, &out.CopySchemaOnNewHosts
		*out = new(bool)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]DatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EmbeddedKeeper != nil {
		in, out := &in.EmbeddedKeeper, &out.EmbeddedKeeper
		*out = new(bool)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.FormatSchema != nil {
		in, out := &in.FormatSchema, &out.FormatSchema
		*out = make([]FormatSchemaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MLModel != nil {
		in, out := &in.MLModel, &out.MLModel
		*out = make([]MLModelParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SQLDatabaseManagement != nil {
		in, out := &in.SQLDatabaseManagement, &out.SQLDatabaseManagement
		*out = new(bool)
		**out = **in
	}
	if in.SQLUserManagement != nil {
		in, out := &in.SQLUserManagement, &out.SQLUserManagement
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIDRef != nil {
		in, out := &in.ServiceAccountIDRef, &out.ServiceAccountIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIDSelector != nil {
		in, out := &in.ServiceAccountIDSelector, &out.ServiceAccountIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Shard != nil {
		in, out := &in.Shard, &out.Shard
		*out = make([]ShardParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ShardGroup != nil {
		in, out := &in.ShardGroup, &out.ShardGroup
		*out = make([]ShardGroupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]UserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ZookeeperParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterParameters.
func (in *ClickhouseClusterParameters) DeepCopy() *ClickhouseClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterSpec) DeepCopyInto(out *ClickhouseClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterSpec.
func (in *ClickhouseClusterSpec) DeepCopy() *ClickhouseClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterStatus) DeepCopyInto(out *ClickhouseClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterStatus.
func (in *ClickhouseClusterStatus) DeepCopy() *ClickhouseClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseInitParameters) DeepCopyInto(out *ClickhouseInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseInitParameters.
func (in *ClickhouseInitParameters) DeepCopy() *ClickhouseInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClickhouseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseObservation) DeepCopyInto(out *ClickhouseObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseObservation.
func (in *ClickhouseObservation) DeepCopy() *ClickhouseObservation {
	if in == nil {
		return nil
	}
	out := new(ClickhouseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseParameters) DeepCopyInto(out *ClickhouseParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseParameters.
func (in *ClickhouseParameters) DeepCopy() *ClickhouseParameters {
	if in == nil {
		return nil
	}
	out := new(ClickhouseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudStorageInitParameters) DeepCopyInto(out *CloudStorageInitParameters) {
	*out = *in
	if in.DataCacheEnabled != nil {
		in, out := &in.DataCacheEnabled, &out.DataCacheEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DataCacheMaxSize != nil {
		in, out := &in.DataCacheMaxSize, &out.DataCacheMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MoveFactor != nil {
		in, out := &in.MoveFactor, &out.MoveFactor
		*out = new(float64)
		**out = **in
	}
	if in.PreferNotToMerge != nil {
		in, out := &in.PreferNotToMerge, &out.PreferNotToMerge
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudStorageInitParameters.
func (in *CloudStorageInitParameters) DeepCopy() *CloudStorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(CloudStorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudStorageObservation) DeepCopyInto(out *CloudStorageObservation) {
	*out = *in
	if in.DataCacheEnabled != nil {
		in, out := &in.DataCacheEnabled, &out.DataCacheEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DataCacheMaxSize != nil {
		in, out := &in.DataCacheMaxSize, &out.DataCacheMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MoveFactor != nil {
		in, out := &in.MoveFactor, &out.MoveFactor
		*out = new(float64)
		**out = **in
	}
	if in.PreferNotToMerge != nil {
		in, out := &in.PreferNotToMerge, &out.PreferNotToMerge
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudStorageObservation.
func (in *CloudStorageObservation) DeepCopy() *CloudStorageObservation {
	if in == nil {
		return nil
	}
	out := new(CloudStorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudStorageParameters) DeepCopyInto(out *CloudStorageParameters) {
	*out = *in
	if in.DataCacheEnabled != nil {
		in, out := &in.DataCacheEnabled, &out.DataCacheEnabled
		*out = new(bool)
		**out = **in
	}
	if in.DataCacheMaxSize != nil {
		in, out := &in.DataCacheMaxSize, &out.DataCacheMaxSize
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.MoveFactor != nil {
		in, out := &in.MoveFactor, &out.MoveFactor
		*out = new(float64)
		**out = **in
	}
	if in.PreferNotToMerge != nil {
		in, out := &in.PreferNotToMerge, &out.PreferNotToMerge
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudStorageParameters.
func (in *CloudStorageParameters) DeepCopy() *CloudStorageParameters {
	if in == nil {
		return nil
	}
	out := new(CloudStorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigAccessInitParameters) DeepCopyInto(out *ClusterConfigAccessInitParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigAccessInitParameters.
func (in *ClusterConfigAccessInitParameters) DeepCopy() *ClusterConfigAccessInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigAccessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigAccessObservation) DeepCopyInto(out *ClusterConfigAccessObservation) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigAccessObservation.
func (in *ClusterConfigAccessObservation) DeepCopy() *ClusterConfigAccessObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigAccessParameters) DeepCopyInto(out *ClusterConfigAccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigAccessParameters.
func (in *ClusterConfigAccessParameters) DeepCopy() *ClusterConfigAccessParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigBackupWindowStartInitParameters) DeepCopyInto(out *ClusterConfigBackupWindowStartInitParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigBackupWindowStartInitParameters.
func (in *ClusterConfigBackupWindowStartInitParameters) DeepCopy() *ClusterConfigBackupWindowStartInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigBackupWindowStartInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigBackupWindowStartObservation) DeepCopyInto(out *ClusterConfigBackupWindowStartObservation) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigBackupWindowStartObservation.
func (in *ClusterConfigBackupWindowStartObservation) DeepCopy() *ClusterConfigBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigBackupWindowStartParameters) DeepCopyInto(out *ClusterConfigBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigBackupWindowStartParameters.
func (in *ClusterConfigBackupWindowStartParameters) DeepCopy() *ClusterConfigBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigInitParameters) DeepCopyInto(out *ClusterConfigInitParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ClusterConfigAccessInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(int64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ClusterConfigBackupWindowStartInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FeatureCompatibilityVersion != nil {
		in, out := &in.FeatureCompatibilityVersion, &out.FeatureCompatibilityVersion
		*out = new(string)
		**out = **in
	}
	if in.Mongocfg != nil {
		in, out := &in.Mongocfg, &out.Mongocfg
		*out = make([]MongocfgInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongod != nil {
		in, out := &in.Mongod, &out.Mongod
		*out = make([]MongodInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongos != nil {
		in, out := &in.Mongos, &out.Mongos
		*out = make([]MongosInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]PerformanceDiagnosticsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigInitParameters.
func (in *ClusterConfigInitParameters) DeepCopy() *ClusterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigObservation) DeepCopyInto(out *ClusterConfigObservation) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ClusterConfigAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(int64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ClusterConfigBackupWindowStartObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FeatureCompatibilityVersion != nil {
		in, out := &in.FeatureCompatibilityVersion, &out.FeatureCompatibilityVersion
		*out = new(string)
		**out = **in
	}
	if in.Mongocfg != nil {
		in, out := &in.Mongocfg, &out.Mongocfg
		*out = make([]MongocfgObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongod != nil {
		in, out := &in.Mongod, &out.Mongod
		*out = make([]MongodObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongos != nil {
		in, out := &in.Mongos, &out.Mongos
		*out = make([]MongosObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]PerformanceDiagnosticsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigObservation.
func (in *ClusterConfigObservation) DeepCopy() *ClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigParameters) DeepCopyInto(out *ClusterConfigParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ClusterConfigAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(int64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ClusterConfigBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FeatureCompatibilityVersion != nil {
		in, out := &in.FeatureCompatibilityVersion, &out.FeatureCompatibilityVersion
		*out = new(string)
		**out = **in
	}
	if in.Mongocfg != nil {
		in, out := &in.Mongocfg, &out.Mongocfg
		*out = make([]MongocfgParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongod != nil {
		in, out := &in.Mongod, &out.Mongod
		*out = make([]MongodParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Mongos != nil {
		in, out := &in.Mongos, &out.Mongos
		*out = make([]MongosParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]PerformanceDiagnosticsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigParameters.
func (in *ClusterConfigParameters) DeepCopy() *ClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CompressionInitParameters) DeepCopyInto(out *CompressionInitParameters) {
	*out = *in
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(float64)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.MinPartSize != nil {
		in, out := &in.MinPartSize, &out.MinPartSize
		*out = new(float64)
		**out = **in
	}
	if in.MinPartSizeRatio != nil {
		in, out := &in.MinPartSizeRatio, &out.MinPartSizeRatio
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CompressionInitParameters.
func (in *CompressionInitParameters) DeepCopy() *CompressionInitParameters {
	if in == nil {
		return nil
	}
	out := new(CompressionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CompressionObservation) DeepCopyInto(out *CompressionObservation) {
	*out = *in
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(float64)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.MinPartSize != nil {
		in, out := &in.MinPartSize, &out.MinPartSize
		*out = new(float64)
		**out = **in
	}
	if in.MinPartSizeRatio != nil {
		in, out := &in.MinPartSizeRatio, &out.MinPartSizeRatio
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CompressionObservation.
func (in *CompressionObservation) DeepCopy() *CompressionObservation {
	if in == nil {
		return nil
	}
	out := new(CompressionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CompressionParameters) DeepCopyInto(out *CompressionParameters) {
	*out = *in
	if in.Level != nil {
		in, out := &in.Level, &out.Level
		*out = new(float64)
		**out = **in
	}
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.MinPartSize != nil {
		in, out := &in.MinPartSize, &out.MinPartSize
		*out = new(float64)
		**out = **in
	}
	if in.MinPartSizeRatio != nil {
		in, out := &in.MinPartSizeRatio, &out.MinPartSizeRatio
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CompressionParameters.
func (in *CompressionParameters) DeepCopy() *CompressionParameters {
	if in == nil {
		return nil
	}
	out := new(CompressionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAccessInitParameters) DeepCopyInto(out *ConfigAccessInitParameters) {
	*out = *in
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAccessInitParameters.
func (in *ConfigAccessInitParameters) DeepCopy() *ConfigAccessInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigAccessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAccessObservation) DeepCopyInto(out *ConfigAccessObservation) {
	*out = *in
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAccessObservation.
func (in *ConfigAccessObservation) DeepCopy() *ConfigAccessObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAccessParameters) DeepCopyInto(out *ConfigAccessParameters) {
	*out = *in
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAccessParameters.
func (in *ConfigAccessParameters) DeepCopy() *ConfigAccessParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigBackupWindowStartInitParameters) DeepCopyInto(out *ConfigBackupWindowStartInitParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigBackupWindowStartInitParameters.
func (in *ConfigBackupWindowStartInitParameters) DeepCopy() *ConfigBackupWindowStartInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigBackupWindowStartInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigBackupWindowStartObservation) DeepCopyInto(out *ConfigBackupWindowStartObservation) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigBackupWindowStartObservation.
func (in *ConfigBackupWindowStartObservation) DeepCopy() *ConfigBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigBackupWindowStartParameters) DeepCopyInto(out *ConfigBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigBackupWindowStartParameters.
func (in *ConfigBackupWindowStartParameters) DeepCopy() *ConfigBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigInitParameters) DeepCopyInto(out *ConfigInitParameters) {
	*out = *in
	if in.BackgroundFetchesPoolSize != nil {
		in, out := &in.BackgroundFetchesPoolSize, &out.BackgroundFetchesPoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundMergesMutationsConcurrencyRatio != nil {
		in, out := &in.BackgroundMergesMutationsConcurrencyRatio, &out.BackgroundMergesMutationsConcurrencyRatio
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundMessageBrokerSchedulePoolSize != nil {
		in, out := &in.BackgroundMessageBrokerSchedulePoolSize, &out.BackgroundMessageBrokerSchedulePoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundPoolSize != nil {
		in, out := &in.BackgroundPoolSize, &out.BackgroundPoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundSchedulePoolSize != nil {
		in, out := &in.BackgroundSchedulePoolSize, &out.BackgroundSchedulePoolSize
		*out = new(float64)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = make([]CompressionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatabase != nil {
		in, out := &in.DefaultDatabase, &out.DefaultDatabase
		*out = new(string)
		**out = **in
	}
	if in.GeobaseEnabled != nil {
		in, out := &in.GeobaseEnabled, &out.GeobaseEnabled
		*out = new(bool)
		**out = **in
	}
	if in.GeobaseURI != nil {
		in, out := &in.GeobaseURI, &out.GeobaseURI
		*out = new(string)
		**out = **in
	}
	if in.GraphiteRollup != nil {
		in, out := &in.GraphiteRollup, &out.GraphiteRollup
		*out = make([]GraphiteRollupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KafkaTopic != nil {
		in, out := &in.KafkaTopic, &out.KafkaTopic
		*out = make([]KafkaTopicInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeepAliveTimeout != nil {
		in, out := &in.KeepAliveTimeout, &out.KeepAliveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MarkCacheSize != nil {
		in, out := &in.MarkCacheSize, &out.MarkCacheSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrentQueries != nil {
		in, out := &in.MaxConcurrentQueries, &out.MaxConcurrentQueries
		*out = new(float64)
		**out = **in
	}
	if in.MaxConnections != nil {
		in, out := &in.MaxConnections, &out.MaxConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxPartitionSizeToDrop != nil {
		in, out := &in.MaxPartitionSizeToDrop, &out.MaxPartitionSizeToDrop
		*out = new(float64)
		**out = **in
	}
	if in.MaxTableSizeToDrop != nil {
		in, out := &in.MaxTableSizeToDrop, &out.MaxTableSizeToDrop
		*out = new(float64)
		**out = **in
	}
	if in.MergeTree != nil {
		in, out := &in.MergeTree, &out.MergeTree
		*out = make([]MergeTreeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MetricLogEnabled != nil {
		in, out := &in.MetricLogEnabled, &out.MetricLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MetricLogRetentionSize != nil {
		in, out := &in.MetricLogRetentionSize, &out.MetricLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.MetricLogRetentionTime != nil {
		in, out := &in.MetricLogRetentionTime, &out.MetricLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.PartLogRetentionSize != nil {
		in, out := &in.PartLogRetentionSize, &out.PartLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.PartLogRetentionTime != nil {
		in, out := &in.PartLogRetentionTime, &out.PartLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.QueryLogRetentionSize != nil {
		in, out := &in.QueryLogRetentionSize, &out.QueryLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.QueryLogRetentionTime != nil {
		in, out := &in.QueryLogRetentionTime, &out.QueryLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.QueryThreadLogEnabled != nil {
		in, out := &in.QueryThreadLogEnabled, &out.QueryThreadLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.QueryThreadLogRetentionSize != nil {
		in, out := &in.QueryThreadLogRetentionSize, &out.QueryThreadLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.QueryThreadLogRetentionTime != nil {
		in, out := &in.QueryThreadLogRetentionTime, &out.QueryThreadLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Rabbitmq != nil {
		in, out := &in.Rabbitmq, &out.Rabbitmq
		*out = make([]RabbitmqInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TextLogEnabled != nil {
		in, out := &in.TextLogEnabled, &out.TextLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TextLogLevel != nil {
		in, out := &in.TextLogLevel, &out.TextLogLevel
		*out = new(string)
		**out = **in
	}
	if in.TextLogRetentionSize != nil {
		in, out := &in.TextLogRetentionSize, &out.TextLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.TextLogRetentionTime != nil {
		in, out := &in.TextLogRetentionTime, &out.TextLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TotalMemoryProfilerStep != nil {
		in, out := &in.TotalMemoryProfilerStep, &out.TotalMemoryProfilerStep
		*out = new(float64)
		**out = **in
	}
	if in.TraceLogEnabled != nil {
		in, out := &in.TraceLogEnabled, &out.TraceLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TraceLogRetentionSize != nil {
		in, out := &in.TraceLogRetentionSize, &out.TraceLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.TraceLogRetentionTime != nil {
		in, out := &in.TraceLogRetentionTime, &out.TraceLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.UncompressedCacheSize != nil {
		in, out := &in.UncompressedCacheSize, &out.UncompressedCacheSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigInitParameters.
func (in *ConfigInitParameters) DeepCopy() *ConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKafkaInitParameters) DeepCopyInto(out *ConfigKafkaInitParameters) {
	*out = *in
	if in.KafkaConfig != nil {
		in, out := &in.KafkaConfig, &out.KafkaConfig
		*out = make([]KafkaConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]KafkaResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKafkaInitParameters.
func (in *ConfigKafkaInitParameters) DeepCopy() *ConfigKafkaInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigKafkaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKafkaObservation) DeepCopyInto(out *ConfigKafkaObservation) {
	*out = *in
	if in.KafkaConfig != nil {
		in, out := &in.KafkaConfig, &out.KafkaConfig
		*out = make([]KafkaConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]KafkaResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKafkaObservation.
func (in *ConfigKafkaObservation) DeepCopy() *ConfigKafkaObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigKafkaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKafkaParameters) DeepCopyInto(out *ConfigKafkaParameters) {
	*out = *in
	if in.KafkaConfig != nil {
		in, out := &in.KafkaConfig, &out.KafkaConfig
		*out = make([]KafkaConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]KafkaResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKafkaParameters.
func (in *ConfigKafkaParameters) DeepCopy() *ConfigKafkaParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigKafkaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigObservation) DeepCopyInto(out *ConfigObservation) {
	*out = *in
	if in.BackgroundFetchesPoolSize != nil {
		in, out := &in.BackgroundFetchesPoolSize, &out.BackgroundFetchesPoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundMergesMutationsConcurrencyRatio != nil {
		in, out := &in.BackgroundMergesMutationsConcurrencyRatio, &out.BackgroundMergesMutationsConcurrencyRatio
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundMessageBrokerSchedulePoolSize != nil {
		in, out := &in.BackgroundMessageBrokerSchedulePoolSize, &out.BackgroundMessageBrokerSchedulePoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundPoolSize != nil {
		in, out := &in.BackgroundPoolSize, &out.BackgroundPoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundSchedulePoolSize != nil {
		in, out := &in.BackgroundSchedulePoolSize, &out.BackgroundSchedulePoolSize
		*out = new(float64)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = make([]CompressionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatabase != nil {
		in, out := &in.DefaultDatabase, &out.DefaultDatabase
		*out = new(string)
		**out = **in
	}
	if in.GeobaseEnabled != nil {
		in, out := &in.GeobaseEnabled, &out.GeobaseEnabled
		*out = new(bool)
		**out = **in
	}
	if in.GeobaseURI != nil {
		in, out := &in.GeobaseURI, &out.GeobaseURI
		*out = new(string)
		**out = **in
	}
	if in.GraphiteRollup != nil {
		in, out := &in.GraphiteRollup, &out.GraphiteRollup
		*out = make([]GraphiteRollupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KafkaTopic != nil {
		in, out := &in.KafkaTopic, &out.KafkaTopic
		*out = make([]KafkaTopicObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeepAliveTimeout != nil {
		in, out := &in.KeepAliveTimeout, &out.KeepAliveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MarkCacheSize != nil {
		in, out := &in.MarkCacheSize, &out.MarkCacheSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrentQueries != nil {
		in, out := &in.MaxConcurrentQueries, &out.MaxConcurrentQueries
		*out = new(float64)
		**out = **in
	}
	if in.MaxConnections != nil {
		in, out := &in.MaxConnections, &out.MaxConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxPartitionSizeToDrop != nil {
		in, out := &in.MaxPartitionSizeToDrop, &out.MaxPartitionSizeToDrop
		*out = new(float64)
		**out = **in
	}
	if in.MaxTableSizeToDrop != nil {
		in, out := &in.MaxTableSizeToDrop, &out.MaxTableSizeToDrop
		*out = new(float64)
		**out = **in
	}
	if in.MergeTree != nil {
		in, out := &in.MergeTree, &out.MergeTree
		*out = make([]MergeTreeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MetricLogEnabled != nil {
		in, out := &in.MetricLogEnabled, &out.MetricLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MetricLogRetentionSize != nil {
		in, out := &in.MetricLogRetentionSize, &out.MetricLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.MetricLogRetentionTime != nil {
		in, out := &in.MetricLogRetentionTime, &out.MetricLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.PartLogRetentionSize != nil {
		in, out := &in.PartLogRetentionSize, &out.PartLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.PartLogRetentionTime != nil {
		in, out := &in.PartLogRetentionTime, &out.PartLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.QueryLogRetentionSize != nil {
		in, out := &in.QueryLogRetentionSize, &out.QueryLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.QueryLogRetentionTime != nil {
		in, out := &in.QueryLogRetentionTime, &out.QueryLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.QueryThreadLogEnabled != nil {
		in, out := &in.QueryThreadLogEnabled, &out.QueryThreadLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.QueryThreadLogRetentionSize != nil {
		in, out := &in.QueryThreadLogRetentionSize, &out.QueryThreadLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.QueryThreadLogRetentionTime != nil {
		in, out := &in.QueryThreadLogRetentionTime, &out.QueryThreadLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Rabbitmq != nil {
		in, out := &in.Rabbitmq, &out.Rabbitmq
		*out = make([]RabbitmqObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TextLogEnabled != nil {
		in, out := &in.TextLogEnabled, &out.TextLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TextLogLevel != nil {
		in, out := &in.TextLogLevel, &out.TextLogLevel
		*out = new(string)
		**out = **in
	}
	if in.TextLogRetentionSize != nil {
		in, out := &in.TextLogRetentionSize, &out.TextLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.TextLogRetentionTime != nil {
		in, out := &in.TextLogRetentionTime, &out.TextLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TotalMemoryProfilerStep != nil {
		in, out := &in.TotalMemoryProfilerStep, &out.TotalMemoryProfilerStep
		*out = new(float64)
		**out = **in
	}
	if in.TraceLogEnabled != nil {
		in, out := &in.TraceLogEnabled, &out.TraceLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TraceLogRetentionSize != nil {
		in, out := &in.TraceLogRetentionSize, &out.TraceLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.TraceLogRetentionTime != nil {
		in, out := &in.TraceLogRetentionTime, &out.TraceLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.UncompressedCacheSize != nil {
		in, out := &in.UncompressedCacheSize, &out.UncompressedCacheSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigObservation.
func (in *ConfigObservation) DeepCopy() *ConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigParameters) DeepCopyInto(out *ConfigParameters) {
	*out = *in
	if in.BackgroundFetchesPoolSize != nil {
		in, out := &in.BackgroundFetchesPoolSize, &out.BackgroundFetchesPoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundMergesMutationsConcurrencyRatio != nil {
		in, out := &in.BackgroundMergesMutationsConcurrencyRatio, &out.BackgroundMergesMutationsConcurrencyRatio
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundMessageBrokerSchedulePoolSize != nil {
		in, out := &in.BackgroundMessageBrokerSchedulePoolSize, &out.BackgroundMessageBrokerSchedulePoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundPoolSize != nil {
		in, out := &in.BackgroundPoolSize, &out.BackgroundPoolSize
		*out = new(float64)
		**out = **in
	}
	if in.BackgroundSchedulePoolSize != nil {
		in, out := &in.BackgroundSchedulePoolSize, &out.BackgroundSchedulePoolSize
		*out = new(float64)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = make([]CompressionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatabase != nil {
		in, out := &in.DefaultDatabase, &out.DefaultDatabase
		*out = new(string)
		**out = **in
	}
	if in.GeobaseEnabled != nil {
		in, out := &in.GeobaseEnabled, &out.GeobaseEnabled
		*out = new(bool)
		**out = **in
	}
	if in.GeobaseURI != nil {
		in, out := &in.GeobaseURI, &out.GeobaseURI
		*out = new(string)
		**out = **in
	}
	if in.GraphiteRollup != nil {
		in, out := &in.GraphiteRollup, &out.GraphiteRollup
		*out = make([]GraphiteRollupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KafkaTopic != nil {
		in, out := &in.KafkaTopic, &out.KafkaTopic
		*out = make([]KafkaTopicParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeepAliveTimeout != nil {
		in, out := &in.KeepAliveTimeout, &out.KeepAliveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MarkCacheSize != nil {
		in, out := &in.MarkCacheSize, &out.MarkCacheSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrentQueries != nil {
		in, out := &in.MaxConcurrentQueries, &out.MaxConcurrentQueries
		*out = new(float64)
		**out = **in
	}
	if in.MaxConnections != nil {
		in, out := &in.MaxConnections, &out.MaxConnections
		*out = new(float64)
		**out = **in
	}
	if in.MaxPartitionSizeToDrop != nil {
		in, out := &in.MaxPartitionSizeToDrop, &out.MaxPartitionSizeToDrop
		*out = new(float64)
		**out = **in
	}
	if in.MaxTableSizeToDrop != nil {
		in, out := &in.MaxTableSizeToDrop, &out.MaxTableSizeToDrop
		*out = new(float64)
		**out = **in
	}
	if in.MergeTree != nil {
		in, out := &in.MergeTree, &out.MergeTree
		*out = make([]MergeTreeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MetricLogEnabled != nil {
		in, out := &in.MetricLogEnabled, &out.MetricLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MetricLogRetentionSize != nil {
		in, out := &in.MetricLogRetentionSize, &out.MetricLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.MetricLogRetentionTime != nil {
		in, out := &in.MetricLogRetentionTime, &out.MetricLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.PartLogRetentionSize != nil {
		in, out := &in.PartLogRetentionSize, &out.PartLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.PartLogRetentionTime != nil {
		in, out := &in.PartLogRetentionTime, &out.PartLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.QueryLogRetentionSize != nil {
		in, out := &in.QueryLogRetentionSize, &out.QueryLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.QueryLogRetentionTime != nil {
		in, out := &in.QueryLogRetentionTime, &out.QueryLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.QueryThreadLogEnabled != nil {
		in, out := &in.QueryThreadLogEnabled, &out.QueryThreadLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.QueryThreadLogRetentionSize != nil {
		in, out := &in.QueryThreadLogRetentionSize, &out.QueryThreadLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.QueryThreadLogRetentionTime != nil {
		in, out := &in.QueryThreadLogRetentionTime, &out.QueryThreadLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Rabbitmq != nil {
		in, out := &in.Rabbitmq, &out.Rabbitmq
		*out = make([]RabbitmqParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TextLogEnabled != nil {
		in, out := &in.TextLogEnabled, &out.TextLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TextLogLevel != nil {
		in, out := &in.TextLogLevel, &out.TextLogLevel
		*out = new(string)
		**out = **in
	}
	if in.TextLogRetentionSize != nil {
		in, out := &in.TextLogRetentionSize, &out.TextLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.TextLogRetentionTime != nil {
		in, out := &in.TextLogRetentionTime, &out.TextLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TotalMemoryProfilerStep != nil {
		in, out := &in.TotalMemoryProfilerStep, &out.TotalMemoryProfilerStep
		*out = new(float64)
		**out = **in
	}
	if in.TraceLogEnabled != nil {
		in, out := &in.TraceLogEnabled, &out.TraceLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TraceLogRetentionSize != nil {
		in, out := &in.TraceLogRetentionSize, &out.TraceLogRetentionSize
		*out = new(float64)
		**out = **in
	}
	if in.TraceLogRetentionTime != nil {
		in, out := &in.TraceLogRetentionTime, &out.TraceLogRetentionTime
		*out = new(float64)
		**out = **in
	}
	if in.UncompressedCacheSize != nil {
		in, out := &in.UncompressedCacheSize, &out.UncompressedCacheSize
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigParameters.
func (in *ConfigParameters) DeepCopy() *ConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPerformanceDiagnosticsInitParameters) DeepCopyInto(out *ConfigPerformanceDiagnosticsInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(float64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPerformanceDiagnosticsInitParameters.
func (in *ConfigPerformanceDiagnosticsInitParameters) DeepCopy() *ConfigPerformanceDiagnosticsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigPerformanceDiagnosticsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPerformanceDiagnosticsObservation) DeepCopyInto(out *ConfigPerformanceDiagnosticsObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(float64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPerformanceDiagnosticsObservation.
func (in *ConfigPerformanceDiagnosticsObservation) DeepCopy() *ConfigPerformanceDiagnosticsObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigPerformanceDiagnosticsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigPerformanceDiagnosticsParameters) DeepCopyInto(out *ConfigPerformanceDiagnosticsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(float64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigPerformanceDiagnosticsParameters.
func (in *ConfigPerformanceDiagnosticsParameters) DeepCopy() *ConfigPerformanceDiagnosticsParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigPerformanceDiagnosticsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigResourcesInitParameters) DeepCopyInto(out *ConfigResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigResourcesInitParameters.
func (in *ConfigResourcesInitParameters) DeepCopy() *ConfigResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigResourcesObservation) DeepCopyInto(out *ConfigResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigResourcesObservation.
func (in *ConfigResourcesObservation) DeepCopy() *ConfigResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigResourcesParameters) DeepCopyInto(out *ConfigResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigResourcesParameters.
func (in *ConfigResourcesParameters) DeepCopy() *ConfigResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperInitParameters) DeepCopyInto(out *ConfigZookeeperInitParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigZookeeperResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperInitParameters.
func (in *ConfigZookeeperInitParameters) DeepCopy() *ConfigZookeeperInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperObservation) DeepCopyInto(out *ConfigZookeeperObservation) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigZookeeperResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperObservation.
func (in *ConfigZookeeperObservation) DeepCopy() *ConfigZookeeperObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperParameters) DeepCopyInto(out *ConfigZookeeperParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigZookeeperResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperParameters.
func (in *ConfigZookeeperParameters) DeepCopy() *ConfigZookeeperParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperResourcesInitParameters) DeepCopyInto(out *ConfigZookeeperResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperResourcesInitParameters.
func (in *ConfigZookeeperResourcesInitParameters) DeepCopy() *ConfigZookeeperResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperResourcesObservation) DeepCopyInto(out *ConfigZookeeperResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperResourcesObservation.
func (in *ConfigZookeeperResourcesObservation) DeepCopy() *ConfigZookeeperResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperResourcesParameters) DeepCopyInto(out *ConfigZookeeperResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperResourcesParameters.
func (in *ConfigZookeeperResourcesParameters) DeepCopy() *ConfigZookeeperResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionLimitsInitParameters) DeepCopyInto(out *ConnectionLimitsInitParameters) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionLimitsInitParameters.
func (in *ConnectionLimitsInitParameters) DeepCopy() *ConnectionLimitsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionLimitsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionLimitsObservation) DeepCopyInto(out *ConnectionLimitsObservation) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionLimitsObservation.
func (in *ConnectionLimitsObservation) DeepCopy() *ConnectionLimitsObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectionLimitsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionLimitsParameters) DeepCopyInto(out *ConnectionLimitsParameters) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionLimitsParameters.
func (in *ConnectionLimitsParameters) DeepCopy() *ConnectionLimitsParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionLimitsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectorConfigMirrormakerInitParameters) DeepCopyInto(out *ConnectorConfigMirrormakerInitParameters) {
	*out = *in
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.SourceCluster != nil {
		in, out := &in.SourceCluster, &out.SourceCluster
		*out = make([]SourceClusterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetCluster != nil {
		in, out := &in.TargetCluster, &out.TargetCluster
		*out = make([]TargetClusterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectorConfigMirrormakerInitParameters.
func (in *ConnectorConfigMirrormakerInitParameters) DeepCopy() *ConnectorConfigMirrormakerInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectorConfigMirrormakerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectorConfigMirrormakerObservation) DeepCopyInto(out *ConnectorConfigMirrormakerObservation) {
	*out = *in
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.SourceCluster != nil {
		in, out := &in.SourceCluster, &out.SourceCluster
		*out = make([]SourceClusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetCluster != nil {
		in, out := &in.TargetCluster, &out.TargetCluster
		*out = make([]TargetClusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectorConfigMirrormakerObservation.
func (in *ConnectorConfigMirrormakerObservation) DeepCopy() *ConnectorConfigMirrormakerObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectorConfigMirrormakerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectorConfigMirrormakerParameters) DeepCopyInto(out *ConnectorConfigMirrormakerParameters) {
	*out = *in
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.SourceCluster != nil {
		in, out := &in.SourceCluster, &out.SourceCluster
		*out = make([]SourceClusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TargetCluster != nil {
		in, out := &in.TargetCluster, &out.TargetCluster
		*out = make([]TargetClusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectorConfigMirrormakerParameters.
func (in *ConnectorConfigMirrormakerParameters) DeepCopy() *ConnectorConfigMirrormakerParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectorConfigMirrormakerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectorConfigS3SinkInitParameters) DeepCopyInto(out *ConnectorConfigS3SinkInitParameters) {
	*out = *in
	if in.FileCompressionType != nil {
		in, out := &in.FileCompressionType, &out.FileCompressionType
		*out = new(string)
		**out = **in
	}
	if in.FileMaxRecords != nil {
		in, out := &in.FileMaxRecords, &out.FileMaxRecords
		*out = new(int64)
		**out = **in
	}
	if in.S3Connection != nil {
		in, out := &in.S3Connection, &out.S3Connection
		*out = make([]S3ConnectionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectorConfigS3SinkInitParameters.
func (in *ConnectorConfigS3SinkInitParameters) DeepCopy() *ConnectorConfigS3SinkInitParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectorConfigS3SinkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectorConfigS3SinkObservation) DeepCopyInto(out *ConnectorConfigS3SinkObservation) {
	*out = *in
	if in.FileCompressionType != nil {
		in, out := &in.FileCompressionType, &out.FileCompressionType
		*out = new(string)
		**out = **in
	}
	if in.FileMaxRecords != nil {
		in, out := &in.FileMaxRecords, &out.FileMaxRecords
		*out = new(int64)
		**out = **in
	}
	if in.S3Connection != nil {
		in, out := &in.S3Connection, &out.S3Connection
		*out = make([]S3ConnectionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectorConfigS3SinkObservation.
func (in *ConnectorConfigS3SinkObservation) DeepCopy() *ConnectorConfigS3SinkObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectorConfigS3SinkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectorConfigS3SinkParameters) DeepCopyInto(out *ConnectorConfigS3SinkParameters) {
	*out = *in
	if in.FileCompressionType != nil {
		in, out := &in.FileCompressionType, &out.FileCompressionType
		*out = new(string)
		**out = **in
	}
	if in.FileMaxRecords != nil {
		in, out := &in.FileMaxRecords, &out.FileMaxRecords
		*out = new(int64)
		**out = **in
	}
	if in.S3Connection != nil {
		in, out := &in.S3Connection, &out.S3Connection
		*out = make([]S3ConnectionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Topics != nil {
		in, out := &in.Topics, &out.Topics
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectorConfigS3SinkParameters.
func (in *ConnectorConfigS3SinkParameters) DeepCopy() *ConnectorConfigS3SinkParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectorConfigS3SinkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DashboardsInitParameters) DeepCopyInto(out *DashboardsInitParameters) {
	*out = *in
	if in.NodeGroups != nil {
		in, out := &in.NodeGroups, &out.NodeGroups
		*out = make([]NodeGroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DashboardsInitParameters.
func (in *DashboardsInitParameters) DeepCopy() *DashboardsInitParameters {
	if in == nil {
		return nil
	}
	out := new(DashboardsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DashboardsObservation) DeepCopyInto(out *DashboardsObservation) {
	*out = *in
	if in.NodeGroups != nil {
		in, out := &in.NodeGroups, &out.NodeGroups
		*out = make([]NodeGroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DashboardsObservation.
func (in *DashboardsObservation) DeepCopy() *DashboardsObservation {
	if in == nil {
		return nil
	}
	out := new(DashboardsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DashboardsParameters) DeepCopyInto(out *DashboardsParameters) {
	*out = *in
	if in.NodeGroups != nil {
		in, out := &in.NodeGroups, &out.NodeGroups
		*out = make([]NodeGroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DashboardsParameters.
func (in *DashboardsParameters) DeepCopy() *DashboardsParameters {
	if in == nil {
		return nil
	}
	out := new(DashboardsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeInitParameters) DeepCopyInto(out *DataNodeInitParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]DataNodeResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeInitParameters.
func (in *DataNodeInitParameters) DeepCopy() *DataNodeInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataNodeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeObservation) DeepCopyInto(out *DataNodeObservation) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]DataNodeResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeObservation.
func (in *DataNodeObservation) DeepCopy() *DataNodeObservation {
	if in == nil {
		return nil
	}
	out := new(DataNodeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeParameters) DeepCopyInto(out *DataNodeParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]DataNodeResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeParameters.
func (in *DataNodeParameters) DeepCopy() *DataNodeParameters {
	if in == nil {
		return nil
	}
	out := new(DataNodeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeResourcesInitParameters) DeepCopyInto(out *DataNodeResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeResourcesInitParameters.
func (in *DataNodeResourcesInitParameters) DeepCopy() *DataNodeResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataNodeResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeResourcesObservation) DeepCopyInto(out *DataNodeResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeResourcesObservation.
func (in *DataNodeResourcesObservation) DeepCopy() *DataNodeResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(DataNodeResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeResourcesParameters) DeepCopyInto(out *DataNodeResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeResourcesParameters.
func (in *DataNodeResourcesParameters) DeepCopy() *DataNodeResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(DataNodeResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskSizeAutoscalingInitParameters) DeepCopyInto(out *DiskSizeAutoscalingInitParameters) {
	*out = *in
	if in.DiskSizeLimit != nil {
		in, out := &in.DiskSizeLimit, &out.DiskSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.EmergencyUsageThreshold != nil {
		in, out := &in.EmergencyUsageThreshold, &out.EmergencyUsageThreshold
		*out = new(float64)
		**out = **in
	}
	if in.PlannedUsageThreshold != nil {
		in, out := &in.PlannedUsageThreshold, &out.PlannedUsageThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskSizeAutoscalingInitParameters.
func (in *DiskSizeAutoscalingInitParameters) DeepCopy() *DiskSizeAutoscalingInitParameters {
	if in == nil {
		return nil
	}
	out := new(DiskSizeAutoscalingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskSizeAutoscalingObservation) DeepCopyInto(out *DiskSizeAutoscalingObservation) {
	*out = *in
	if in.DiskSizeLimit != nil {
		in, out := &in.DiskSizeLimit, &out.DiskSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.EmergencyUsageThreshold != nil {
		in, out := &in.EmergencyUsageThreshold, &out.EmergencyUsageThreshold
		*out = new(float64)
		**out = **in
	}
	if in.PlannedUsageThreshold != nil {
		in, out := &in.PlannedUsageThreshold, &out.PlannedUsageThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskSizeAutoscalingObservation.
func (in *DiskSizeAutoscalingObservation) DeepCopy() *DiskSizeAutoscalingObservation {
	if in == nil {
		return nil
	}
	out := new(DiskSizeAutoscalingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DiskSizeAutoscalingParameters) DeepCopyInto(out *DiskSizeAutoscalingParameters) {
	*out = *in
	if in.DiskSizeLimit != nil {
		in, out := &in.DiskSizeLimit, &out.DiskSizeLimit
		*out = new(float64)
		**out = **in
	}
	if in.EmergencyUsageThreshold != nil {
		in, out := &in.EmergencyUsageThreshold, &out.EmergencyUsageThreshold
		*out = new(float64)
		**out = **in
	}
	if in.PlannedUsageThreshold != nil {
		in, out := &in.PlannedUsageThreshold, &out.PlannedUsageThreshold
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DiskSizeAutoscalingParameters.
func (in *DiskSizeAutoscalingParameters) DeepCopy() *DiskSizeAutoscalingParameters {
	if in == nil {
		return nil
	}
	out := new(DiskSizeAutoscalingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchCluster) DeepCopyInto(out *ElasticsearchCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchCluster.
func (in *ElasticsearchCluster) DeepCopy() *ElasticsearchCluster {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ElasticsearchCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterConfigInitParameters) DeepCopyInto(out *ElasticsearchClusterConfigInitParameters) {
	*out = *in
	if in.DataNode != nil {
		in, out := &in.DataNode, &out.DataNode
		*out = make([]DataNodeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Edition != nil {
		in, out := &in.Edition, &out.Edition
		*out = new(string)
		**out = **in
	}
	if in.MasterNode != nil {
		in, out := &in.MasterNode, &out.MasterNode
		*out = make([]MasterNodeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterConfigInitParameters.
func (in *ElasticsearchClusterConfigInitParameters) DeepCopy() *ElasticsearchClusterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterConfigObservation) DeepCopyInto(out *ElasticsearchClusterConfigObservation) {
	*out = *in
	if in.DataNode != nil {
		in, out := &in.DataNode, &out.DataNode
		*out = make([]DataNodeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Edition != nil {
		in, out := &in.Edition, &out.Edition
		*out = new(string)
		**out = **in
	}
	if in.MasterNode != nil {
		in, out := &in.MasterNode, &out.MasterNode
		*out = make([]MasterNodeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterConfigObservation.
func (in *ElasticsearchClusterConfigObservation) DeepCopy() *ElasticsearchClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterConfigParameters) DeepCopyInto(out *ElasticsearchClusterConfigParameters) {
	*out = *in
	out.AdminPasswordSecretRef = in.AdminPasswordSecretRef
	if in.DataNode != nil {
		in, out := &in.DataNode, &out.DataNode
		*out = make([]DataNodeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Edition != nil {
		in, out := &in.Edition, &out.Edition
		*out = new(string)
		**out = **in
	}
	if in.MasterNode != nil {
		in, out := &in.MasterNode, &out.MasterNode
		*out = make([]MasterNodeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterConfigParameters.
func (in *ElasticsearchClusterConfigParameters) DeepCopy() *ElasticsearchClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterHostInitParameters) DeepCopyInto(out *ElasticsearchClusterHostInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterHostInitParameters.
func (in *ElasticsearchClusterHostInitParameters) DeepCopy() *ElasticsearchClusterHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterHostObservation) DeepCopyInto(out *ElasticsearchClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterHostObservation.
func (in *ElasticsearchClusterHostObservation) DeepCopy() *ElasticsearchClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterHostParameters) DeepCopyInto(out *ElasticsearchClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterHostParameters.
func (in *ElasticsearchClusterHostParameters) DeepCopy() *ElasticsearchClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterInitParameters) DeepCopyInto(out *ElasticsearchClusterInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ElasticsearchClusterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]ElasticsearchClusterHostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]ElasticsearchClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIDRef != nil {
		in, out := &in.ServiceAccountIDRef, &out.ServiceAccountIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIDSelector != nil {
		in, out := &in.ServiceAccountIDSelector, &out.ServiceAccountIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterInitParameters.
func (in *ElasticsearchClusterInitParameters) DeepCopy() *ElasticsearchClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterList) DeepCopyInto(out *ElasticsearchClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ElasticsearchCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterList.
func (in *ElasticsearchClusterList) DeepCopy() *ElasticsearchClusterList {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ElasticsearchClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterMaintenanceWindowInitParameters) DeepCopyInto(out *ElasticsearchClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterMaintenanceWindowInitParameters.
func (in *ElasticsearchClusterMaintenanceWindowInitParameters) DeepCopy() *ElasticsearchClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterMaintenanceWindowObservation) DeepCopyInto(out *ElasticsearchClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterMaintenanceWindowObservation.
func (in *ElasticsearchClusterMaintenanceWindowObservation) DeepCopy() *ElasticsearchClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterMaintenanceWindowParameters) DeepCopyInto(out *ElasticsearchClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterMaintenanceWindowParameters.
func (in *ElasticsearchClusterMaintenanceWindowParameters) DeepCopy() *ElasticsearchClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterObservation) DeepCopyInto(out *ElasticsearchClusterObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ElasticsearchClusterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]ElasticsearchClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]ElasticsearchClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterObservation.
func (in *ElasticsearchClusterObservation) DeepCopy() *ElasticsearchClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterParameters) DeepCopyInto(out *ElasticsearchClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ElasticsearchClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]ElasticsearchClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]ElasticsearchClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIDRef != nil {
		in, out := &in.ServiceAccountIDRef, &out.ServiceAccountIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIDSelector != nil {
		in, out := &in.ServiceAccountIDSelector, &out.ServiceAccountIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterParameters.
func (in *ElasticsearchClusterParameters) DeepCopy() *ElasticsearchClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterSpec) DeepCopyInto(out *ElasticsearchClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterSpec.
func (in *ElasticsearchClusterSpec) DeepCopy() *ElasticsearchClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterStatus) DeepCopyInto(out *ElasticsearchClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterStatus.
func (in *ElasticsearchClusterStatus) DeepCopy() *ElasticsearchClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionInitParameters) DeepCopyInto(out *ExtensionInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionInitParameters.
func (in *ExtensionInitParameters) DeepCopy() *ExtensionInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionObservation) DeepCopyInto(out *ExtensionObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionObservation.
func (in *ExtensionObservation) DeepCopy() *ExtensionObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionParameters) DeepCopyInto(out *ExtensionParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionParameters.
func (in *ExtensionParameters) DeepCopy() *ExtensionParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalClusterInitParameters) DeepCopyInto(out *ExternalClusterInitParameters) {
	*out = *in
	if in.BootstrapServers != nil {
		in, out := &in.BootstrapServers, &out.BootstrapServers
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalClusterInitParameters.
func (in *ExternalClusterInitParameters) DeepCopy() *ExternalClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ExternalClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalClusterObservation) DeepCopyInto(out *ExternalClusterObservation) {
	*out = *in
	if in.BootstrapServers != nil {
		in, out := &in.BootstrapServers, &out.BootstrapServers
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalClusterObservation.
func (in *ExternalClusterObservation) DeepCopy() *ExternalClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ExternalClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalClusterParameters) DeepCopyInto(out *ExternalClusterParameters) {
	*out = *in
	if in.BootstrapServers != nil {
		in, out := &in.BootstrapServers, &out.BootstrapServers
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalClusterParameters.
func (in *ExternalClusterParameters) DeepCopy() *ExternalClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ExternalClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalS3InitParameters) DeepCopyInto(out *ExternalS3InitParameters) {
	*out = *in
	if in.AccessKeyID != nil {
		in, out := &in.AccessKeyID, &out.AccessKeyID
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalS3InitParameters.
func (in *ExternalS3InitParameters) DeepCopy() *ExternalS3InitParameters {
	if in == nil {
		return nil
	}
	out := new(ExternalS3InitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalS3Observation) DeepCopyInto(out *ExternalS3Observation) {
	*out = *in
	if in.AccessKeyID != nil {
		in, out := &in.AccessKeyID, &out.AccessKeyID
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalS3Observation.
func (in *ExternalS3Observation) DeepCopy() *ExternalS3Observation {
	if in == nil {
		return nil
	}
	out := new(ExternalS3Observation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExternalS3Parameters) DeepCopyInto(out *ExternalS3Parameters) {
	*out = *in
	if in.AccessKeyID != nil {
		in, out := &in.AccessKeyID, &out.AccessKeyID
		*out = new(string)
		**out = **in
	}
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SecretAccessKeySecretRef != nil {
		in, out := &in.SecretAccessKeySecretRef, &out.SecretAccessKeySecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExternalS3Parameters.
func (in *ExternalS3Parameters) DeepCopy() *ExternalS3Parameters {
	if in == nil {
		return nil
	}
	out := new(ExternalS3Parameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FormatSchemaInitParameters) DeepCopyInto(out *FormatSchemaInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FormatSchemaInitParameters.
func (in *FormatSchemaInitParameters) DeepCopy() *FormatSchemaInitParameters {
	if in == nil {
		return nil
	}
	out := new(FormatSchemaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FormatSchemaObservation) DeepCopyInto(out *FormatSchemaObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FormatSchemaObservation.
func (in *FormatSchemaObservation) DeepCopy() *FormatSchemaObservation {
	if in == nil {
		return nil
	}
	out := new(FormatSchemaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FormatSchemaParameters) DeepCopyInto(out *FormatSchemaParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FormatSchemaParameters.
func (in *FormatSchemaParameters) DeepCopy() *FormatSchemaParameters {
	if in == nil {
		return nil
	}
	out := new(FormatSchemaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphiteRollupInitParameters) DeepCopyInto(out *GraphiteRollupInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = make([]PatternInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphiteRollupInitParameters.
func (in *GraphiteRollupInitParameters) DeepCopy() *GraphiteRollupInitParameters {
	if in == nil {
		return nil
	}
	out := new(GraphiteRollupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphiteRollupObservation) DeepCopyInto(out *GraphiteRollupObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = make([]PatternObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphiteRollupObservation.
func (in *GraphiteRollupObservation) DeepCopy() *GraphiteRollupObservation {
	if in == nil {
		return nil
	}
	out := new(GraphiteRollupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphiteRollupParameters) DeepCopyInto(out *GraphiteRollupParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = make([]PatternParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphiteRollupParameters.
func (in *GraphiteRollupParameters) DeepCopy() *GraphiteRollupParameters {
	if in == nil {
		return nil
	}
	out := new(GraphiteRollupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostInitParameters) DeepCopyInto(out *HostInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostInitParameters.
func (in *HostInitParameters) DeepCopy() *HostInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostObservation) DeepCopyInto(out *HostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostObservation.
func (in *HostObservation) DeepCopy() *HostObservation {
	if in == nil {
		return nil
	}
	out := new(HostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostParameters) DeepCopyInto(out *HostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostParameters.
func (in *HostParameters) DeepCopy() *HostParameters {
	if in == nil {
		return nil
	}
	out := new(HostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostParametersInitParameters) DeepCopyInto(out *HostParametersInitParameters) {
	*out = *in
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.SecondaryDelaySecs != nil {
		in, out := &in.SecondaryDelaySecs, &out.SecondaryDelaySecs
		*out = new(int64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostParametersInitParameters.
func (in *HostParametersInitParameters) DeepCopy() *HostParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostParametersObservation) DeepCopyInto(out *HostParametersObservation) {
	*out = *in
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.SecondaryDelaySecs != nil {
		in, out := &in.SecondaryDelaySecs, &out.SecondaryDelaySecs
		*out = new(int64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostParametersObservation.
func (in *HostParametersObservation) DeepCopy() *HostParametersObservation {
	if in == nil {
		return nil
	}
	out := new(HostParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostParametersParameters) DeepCopyInto(out *HostParametersParameters) {
	*out = *in
	if in.Hidden != nil {
		in, out := &in.Hidden, &out.Hidden
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.SecondaryDelaySecs != nil {
		in, out := &in.SecondaryDelaySecs, &out.SecondaryDelaySecs
		*out = new(int64)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostParametersParameters.
func (in *HostParametersParameters) DeepCopy() *HostParametersParameters {
	if in == nil {
		return nil
	}
	out := new(HostParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostsInitParameters) DeepCopyInto(out *HostsInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostsInitParameters.
func (in *HostsInitParameters) DeepCopy() *HostsInitParameters {
	if in == nil {
		return nil
	}
	out := new(HostsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostsObservation) DeepCopyInto(out *HostsObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostsObservation.
func (in *HostsObservation) DeepCopy() *HostsObservation {
	if in == nil {
		return nil
	}
	out := new(HostsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostsParameters) DeepCopyInto(out *HostsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostsParameters.
func (in *HostsParameters) DeepCopy() *HostsParameters {
	if in == nil {
		return nil
	}
	out := new(HostsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JournalInitParameters) DeepCopyInto(out *JournalInitParameters) {
	*out = *in
	if in.CommitInterval != nil {
		in, out := &in.CommitInterval, &out.CommitInterval
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JournalInitParameters.
func (in *JournalInitParameters) DeepCopy() *JournalInitParameters {
	if in == nil {
		return nil
	}
	out := new(JournalInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JournalObservation) DeepCopyInto(out *JournalObservation) {
	*out = *in
	if in.CommitInterval != nil {
		in, out := &in.CommitInterval, &out.CommitInterval
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JournalObservation.
func (in *JournalObservation) DeepCopy() *JournalObservation {
	if in == nil {
		return nil
	}
	out := new(JournalObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *JournalParameters) DeepCopyInto(out *JournalParameters) {
	*out = *in
	if in.CommitInterval != nil {
		in, out := &in.CommitInterval, &out.CommitInterval
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new JournalParameters.
func (in *JournalParameters) DeepCopy() *JournalParameters {
	if in == nil {
		return nil
	}
	out := new(JournalParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaCluster) DeepCopyInto(out *KafkaCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaCluster.
func (in *KafkaCluster) DeepCopy() *KafkaCluster {
	if in == nil {
		return nil
	}
	out := new(KafkaCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterConfigInitParameters) DeepCopyInto(out *KafkaClusterConfigInitParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ConfigAccessInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BrokersCount != nil {
		in, out := &in.BrokersCount, &out.BrokersCount
		*out = new(int64)
		**out = **in
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]ConfigKafkaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SchemaRegistry != nil {
		in, out := &in.SchemaRegistry, &out.SchemaRegistry
		*out = new(bool)
		**out = **in
	}
	if in.UnmanagedTopics != nil {
		in, out := &in.UnmanagedTopics, &out.UnmanagedTopics
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ConfigZookeeperInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterConfigInitParameters.
func (in *KafkaClusterConfigInitParameters) DeepCopy() *KafkaClusterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterConfigObservation) DeepCopyInto(out *KafkaClusterConfigObservation) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ConfigAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BrokersCount != nil {
		in, out := &in.BrokersCount, &out.BrokersCount
		*out = new(int64)
		**out = **in
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]ConfigKafkaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SchemaRegistry != nil {
		in, out := &in.SchemaRegistry, &out.SchemaRegistry
		*out = new(bool)
		**out = **in
	}
	if in.UnmanagedTopics != nil {
		in, out := &in.UnmanagedTopics, &out.UnmanagedTopics
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ConfigZookeeperObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterConfigObservation.
func (in *KafkaClusterConfigObservation) DeepCopy() *KafkaClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterConfigParameters) DeepCopyInto(out *KafkaClusterConfigParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ConfigAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BrokersCount != nil {
		in, out := &in.BrokersCount, &out.BrokersCount
		*out = new(int64)
		**out = **in
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]ConfigKafkaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SchemaRegistry != nil {
		in, out := &in.SchemaRegistry, &out.SchemaRegistry
		*out = new(bool)
		**out = **in
	}
	if in.UnmanagedTopics != nil {
		in, out := &in.UnmanagedTopics, &out.UnmanagedTopics
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ConfigZookeeperParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterConfigParameters.
func (in *KafkaClusterConfigParameters) DeepCopy() *KafkaClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterHostInitParameters) DeepCopyInto(out *KafkaClusterHostInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterHostInitParameters.
func (in *KafkaClusterHostInitParameters) DeepCopy() *KafkaClusterHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterHostObservation) DeepCopyInto(out *KafkaClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterHostObservation.
func (in *KafkaClusterHostObservation) DeepCopy() *KafkaClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterHostParameters) DeepCopyInto(out *KafkaClusterHostParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterHostParameters.
func (in *KafkaClusterHostParameters) DeepCopy() *KafkaClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterInitParameters) DeepCopyInto(out *KafkaClusterInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]KafkaClusterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]KafkaClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIdsRefs != nil {
		in, out := &in.SubnetIdsRefs, &out.SubnetIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIdsSelector != nil {
		in, out := &in.SubnetIdsSelector, &out.SubnetIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = make([]TopicInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]KafkaClusterUserInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterInitParameters.
func (in *KafkaClusterInitParameters) DeepCopy() *KafkaClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterList) DeepCopyInto(out *KafkaClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterList.
func (in *KafkaClusterList) DeepCopy() *KafkaClusterList {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterMaintenanceWindowInitParameters) DeepCopyInto(out *KafkaClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterMaintenanceWindowInitParameters.
func (in *KafkaClusterMaintenanceWindowInitParameters) DeepCopy() *KafkaClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterMaintenanceWindowObservation) DeepCopyInto(out *KafkaClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterMaintenanceWindowObservation.
func (in *KafkaClusterMaintenanceWindowObservation) DeepCopy() *KafkaClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterMaintenanceWindowParameters) DeepCopyInto(out *KafkaClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterMaintenanceWindowParameters.
func (in *KafkaClusterMaintenanceWindowParameters) DeepCopy() *KafkaClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterObservation) DeepCopyInto(out *KafkaClusterObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]KafkaClusterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]KafkaClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]KafkaClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = make([]TopicObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]KafkaClusterUserObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterObservation.
func (in *KafkaClusterObservation) DeepCopy() *KafkaClusterObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterParameters) DeepCopyInto(out *KafkaClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]KafkaClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]KafkaClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIdsRefs != nil {
		in, out := &in.SubnetIdsRefs, &out.SubnetIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIdsSelector != nil {
		in, out := &in.SubnetIdsSelector, &out.SubnetIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = make([]TopicParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]KafkaClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterParameters.
func (in *KafkaClusterParameters) DeepCopy() *KafkaClusterParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterSpec) DeepCopyInto(out *KafkaClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterSpec.
func (in *KafkaClusterSpec) DeepCopy() *KafkaClusterSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterStatus) DeepCopyInto(out *KafkaClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterStatus.
func (in *KafkaClusterStatus) DeepCopy() *KafkaClusterStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterUserInitParameters) DeepCopyInto(out *KafkaClusterUserInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]UserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterUserInitParameters.
func (in *KafkaClusterUserInitParameters) DeepCopy() *KafkaClusterUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterUserObservation) DeepCopyInto(out *KafkaClusterUserObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]UserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterUserObservation.
func (in *KafkaClusterUserObservation) DeepCopy() *KafkaClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterUserParameters) DeepCopyInto(out *KafkaClusterUserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]UserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterUserParameters.
func (in *KafkaClusterUserParameters) DeepCopy() *KafkaClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConfigInitParameters) DeepCopyInto(out *KafkaConfigInitParameters) {
	*out = *in
	if in.AutoCreateTopicsEnable != nil {
		in, out := &in.AutoCreateTopicsEnable, &out.AutoCreateTopicsEnable
		*out = new(bool)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DefaultReplicationFactor != nil {
		in, out := &in.DefaultReplicationFactor, &out.DefaultReplicationFactor
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMessages != nil {
		in, out := &in.LogFlushIntervalMessages, &out.LogFlushIntervalMessages
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMs != nil {
		in, out := &in.LogFlushIntervalMs, &out.LogFlushIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogFlushSchedulerIntervalMs != nil {
		in, out := &in.LogFlushSchedulerIntervalMs, &out.LogFlushSchedulerIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogPreallocate != nil {
		in, out := &in.LogPreallocate, &out.LogPreallocate
		*out = new(bool)
		**out = **in
	}
	if in.LogRetentionBytes != nil {
		in, out := &in.LogRetentionBytes, &out.LogRetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionHours != nil {
		in, out := &in.LogRetentionHours, &out.LogRetentionHours
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMinutes != nil {
		in, out := &in.LogRetentionMinutes, &out.LogRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMs != nil {
		in, out := &in.LogRetentionMs, &out.LogRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.LogSegmentBytes != nil {
		in, out := &in.LogSegmentBytes, &out.LogSegmentBytes
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(string)
		**out = **in
	}
	if in.NumPartitions != nil {
		in, out := &in.NumPartitions, &out.NumPartitions
		*out = new(string)
		**out = **in
	}
	if in.OffsetsRetentionMinutes != nil {
		in, out := &in.OffsetsRetentionMinutes, &out.OffsetsRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.ReplicaFetchMaxBytes != nil {
		in, out := &in.ReplicaFetchMaxBytes, &out.ReplicaFetchMaxBytes
		*out = new(string)
		**out = **in
	}
	if in.SSLCipherSuites != nil {
		in, out := &in.SSLCipherSuites, &out.SSLCipherSuites
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SaslEnabledMechanisms != nil {
		in, out := &in.SaslEnabledMechanisms, &out.SaslEnabledMechanisms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SocketReceiveBufferBytes != nil {
		in, out := &in.SocketReceiveBufferBytes, &out.SocketReceiveBufferBytes
		*out = new(string)
		**out = **in
	}
	if in.SocketSendBufferBytes != nil {
		in, out := &in.SocketSendBufferBytes, &out.SocketSendBufferBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConfigInitParameters.
func (in *KafkaConfigInitParameters) DeepCopy() *KafkaConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConfigObservation) DeepCopyInto(out *KafkaConfigObservation) {
	*out = *in
	if in.AutoCreateTopicsEnable != nil {
		in, out := &in.AutoCreateTopicsEnable, &out.AutoCreateTopicsEnable
		*out = new(bool)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DefaultReplicationFactor != nil {
		in, out := &in.DefaultReplicationFactor, &out.DefaultReplicationFactor
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMessages != nil {
		in, out := &in.LogFlushIntervalMessages, &out.LogFlushIntervalMessages
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMs != nil {
		in, out := &in.LogFlushIntervalMs, &out.LogFlushIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogFlushSchedulerIntervalMs != nil {
		in, out := &in.LogFlushSchedulerIntervalMs, &out.LogFlushSchedulerIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogPreallocate != nil {
		in, out := &in.LogPreallocate, &out.LogPreallocate
		*out = new(bool)
		**out = **in
	}
	if in.LogRetentionBytes != nil {
		in, out := &in.LogRetentionBytes, &out.LogRetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionHours != nil {
		in, out := &in.LogRetentionHours, &out.LogRetentionHours
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMinutes != nil {
		in, out := &in.LogRetentionMinutes, &out.LogRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMs != nil {
		in, out := &in.LogRetentionMs, &out.LogRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.LogSegmentBytes != nil {
		in, out := &in.LogSegmentBytes, &out.LogSegmentBytes
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(string)
		**out = **in
	}
	if in.NumPartitions != nil {
		in, out := &in.NumPartitions, &out.NumPartitions
		*out = new(string)
		**out = **in
	}
	if in.OffsetsRetentionMinutes != nil {
		in, out := &in.OffsetsRetentionMinutes, &out.OffsetsRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.ReplicaFetchMaxBytes != nil {
		in, out := &in.ReplicaFetchMaxBytes, &out.ReplicaFetchMaxBytes
		*out = new(string)
		**out = **in
	}
	if in.SSLCipherSuites != nil {
		in, out := &in.SSLCipherSuites, &out.SSLCipherSuites
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SaslEnabledMechanisms != nil {
		in, out := &in.SaslEnabledMechanisms, &out.SaslEnabledMechanisms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SocketReceiveBufferBytes != nil {
		in, out := &in.SocketReceiveBufferBytes, &out.SocketReceiveBufferBytes
		*out = new(string)
		**out = **in
	}
	if in.SocketSendBufferBytes != nil {
		in, out := &in.SocketSendBufferBytes, &out.SocketSendBufferBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConfigObservation.
func (in *KafkaConfigObservation) DeepCopy() *KafkaConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConfigParameters) DeepCopyInto(out *KafkaConfigParameters) {
	*out = *in
	if in.AutoCreateTopicsEnable != nil {
		in, out := &in.AutoCreateTopicsEnable, &out.AutoCreateTopicsEnable
		*out = new(bool)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DefaultReplicationFactor != nil {
		in, out := &in.DefaultReplicationFactor, &out.DefaultReplicationFactor
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMessages != nil {
		in, out := &in.LogFlushIntervalMessages, &out.LogFlushIntervalMessages
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMs != nil {
		in, out := &in.LogFlushIntervalMs, &out.LogFlushIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogFlushSchedulerIntervalMs != nil {
		in, out := &in.LogFlushSchedulerIntervalMs, &out.LogFlushSchedulerIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogPreallocate != nil {
		in, out := &in.LogPreallocate, &out.LogPreallocate
		*out = new(bool)
		**out = **in
	}
	if in.LogRetentionBytes != nil {
		in, out := &in.LogRetentionBytes, &out.LogRetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionHours != nil {
		in, out := &in.LogRetentionHours, &out.LogRetentionHours
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMinutes != nil {
		in, out := &in.LogRetentionMinutes, &out.LogRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMs != nil {
		in, out := &in.LogRetentionMs, &out.LogRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.LogSegmentBytes != nil {
		in, out := &in.LogSegmentBytes, &out.LogSegmentBytes
		*out = new(string)
		**out = **in
	}
	if in.MessageMaxBytes != nil {
		in, out := &in.MessageMaxBytes, &out.MessageMaxBytes
		*out = new(string)
		**out = **in
	}
	if in.NumPartitions != nil {
		in, out := &in.NumPartitions, &out.NumPartitions
		*out = new(string)
		**out = **in
	}
	if in.OffsetsRetentionMinutes != nil {
		in, out := &in.OffsetsRetentionMinutes, &out.OffsetsRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.ReplicaFetchMaxBytes != nil {
		in, out := &in.ReplicaFetchMaxBytes, &out.ReplicaFetchMaxBytes
		*out = new(string)
		**out = **in
	}
	if in.SSLCipherSuites != nil {
		in, out := &in.SSLCipherSuites, &out.SSLCipherSuites
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SaslEnabledMechanisms != nil {
		in, out := &in.SaslEnabledMechanisms, &out.SaslEnabledMechanisms
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SocketReceiveBufferBytes != nil {
		in, out := &in.SocketReceiveBufferBytes, &out.SocketReceiveBufferBytes
		*out = new(string)
		**out = **in
	}
	if in.SocketSendBufferBytes != nil {
		in, out := &in.SocketSendBufferBytes, &out.SocketSendBufferBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConfigParameters.
func (in *KafkaConfigParameters) DeepCopy() *KafkaConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnector) DeepCopyInto(out *KafkaConnector) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnector.
func (in *KafkaConnector) DeepCopy() *KafkaConnector {
	if in == nil {
		return nil
	}
	out := new(KafkaConnector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaConnector) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnectorInitParameters) DeepCopyInto(out *KafkaConnectorInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectorConfigMirrormaker != nil {
		in, out := &in.ConnectorConfigMirrormaker, &out.ConnectorConfigMirrormaker
		*out = make([]ConnectorConfigMirrormakerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectorConfigS3Sink != nil {
		in, out := &in.ConnectorConfigS3Sink, &out.ConnectorConfigS3Sink
		*out = make([]ConnectorConfigS3SinkInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TasksMax != nil {
		in, out := &in.TasksMax, &out.TasksMax
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnectorInitParameters.
func (in *KafkaConnectorInitParameters) DeepCopy() *KafkaConnectorInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaConnectorInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnectorList) DeepCopyInto(out *KafkaConnectorList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaConnector, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnectorList.
func (in *KafkaConnectorList) DeepCopy() *KafkaConnectorList {
	if in == nil {
		return nil
	}
	out := new(KafkaConnectorList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaConnectorList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnectorObservation) DeepCopyInto(out *KafkaConnectorObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ConnectorConfigMirrormaker != nil {
		in, out := &in.ConnectorConfigMirrormaker, &out.ConnectorConfigMirrormaker
		*out = make([]ConnectorConfigMirrormakerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectorConfigS3Sink != nil {
		in, out := &in.ConnectorConfigS3Sink, &out.ConnectorConfigS3Sink
		*out = make([]ConnectorConfigS3SinkObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TasksMax != nil {
		in, out := &in.TasksMax, &out.TasksMax
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnectorObservation.
func (in *KafkaConnectorObservation) DeepCopy() *KafkaConnectorObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaConnectorObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnectorParameters) DeepCopyInto(out *KafkaConnectorParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectorConfigMirrormaker != nil {
		in, out := &in.ConnectorConfigMirrormaker, &out.ConnectorConfigMirrormaker
		*out = make([]ConnectorConfigMirrormakerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ConnectorConfigS3Sink != nil {
		in, out := &in.ConnectorConfigS3Sink, &out.ConnectorConfigS3Sink
		*out = make([]ConnectorConfigS3SinkParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Properties != nil {
		in, out := &in.Properties, &out.Properties
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TasksMax != nil {
		in, out := &in.TasksMax, &out.TasksMax
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnectorParameters.
func (in *KafkaConnectorParameters) DeepCopy() *KafkaConnectorParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaConnectorParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnectorSpec) DeepCopyInto(out *KafkaConnectorSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnectorSpec.
func (in *KafkaConnectorSpec) DeepCopy() *KafkaConnectorSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaConnectorSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConnectorStatus) DeepCopyInto(out *KafkaConnectorStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConnectorStatus.
func (in *KafkaConnectorStatus) DeepCopy() *KafkaConnectorStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaConnectorStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaInitParameters) DeepCopyInto(out *KafkaInitParameters) {
	*out = *in
	if in.EnableSSLCertificateVerification != nil {
		in, out := &in.EnableSSLCertificateVerification, &out.EnableSSLCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.MaxPollIntervalMs != nil {
		in, out := &in.MaxPollIntervalMs, &out.MaxPollIntervalMs
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeoutMs != nil {
		in, out := &in.SessionTimeoutMs, &out.SessionTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaInitParameters.
func (in *KafkaInitParameters) DeepCopy() *KafkaInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaObservation) DeepCopyInto(out *KafkaObservation) {
	*out = *in
	if in.EnableSSLCertificateVerification != nil {
		in, out := &in.EnableSSLCertificateVerification, &out.EnableSSLCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.MaxPollIntervalMs != nil {
		in, out := &in.MaxPollIntervalMs, &out.MaxPollIntervalMs
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeoutMs != nil {
		in, out := &in.SessionTimeoutMs, &out.SessionTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaObservation.
func (in *KafkaObservation) DeepCopy() *KafkaObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaParameters) DeepCopyInto(out *KafkaParameters) {
	*out = *in
	if in.EnableSSLCertificateVerification != nil {
		in, out := &in.EnableSSLCertificateVerification, &out.EnableSSLCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.MaxPollIntervalMs != nil {
		in, out := &in.MaxPollIntervalMs, &out.MaxPollIntervalMs
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeoutMs != nil {
		in, out := &in.SessionTimeoutMs, &out.SessionTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaParameters.
func (in *KafkaParameters) DeepCopy() *KafkaParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaResourcesInitParameters) DeepCopyInto(out *KafkaResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaResourcesInitParameters.
func (in *KafkaResourcesInitParameters) DeepCopy() *KafkaResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaResourcesObservation) DeepCopyInto(out *KafkaResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaResourcesObservation.
func (in *KafkaResourcesObservation) DeepCopy() *KafkaResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaResourcesParameters) DeepCopyInto(out *KafkaResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaResourcesParameters.
func (in *KafkaResourcesParameters) DeepCopy() *KafkaResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopic) DeepCopyInto(out *KafkaTopic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopic.
func (in *KafkaTopic) DeepCopy() *KafkaTopic {
	if in == nil {
		return nil
	}
	out := new(KafkaTopic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaTopic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicInitParameters) DeepCopyInto(out *KafkaTopicInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]SettingsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicInitParameters.
func (in *KafkaTopicInitParameters) DeepCopy() *KafkaTopicInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicInitParameters_2) DeepCopyInto(out *KafkaTopicInitParameters_2) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]KafkaTopicTopicConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicInitParameters_2.
func (in *KafkaTopicInitParameters_2) DeepCopy() *KafkaTopicInitParameters_2 {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicInitParameters_2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicList) DeepCopyInto(out *KafkaTopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaTopic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicList.
func (in *KafkaTopicList) DeepCopy() *KafkaTopicList {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaTopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicObservation) DeepCopyInto(out *KafkaTopicObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]SettingsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicObservation.
func (in *KafkaTopicObservation) DeepCopy() *KafkaTopicObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicObservation_2) DeepCopyInto(out *KafkaTopicObservation_2) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]KafkaTopicTopicConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicObservation_2.
func (in *KafkaTopicObservation_2) DeepCopy() *KafkaTopicObservation_2 {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicObservation_2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicParameters) DeepCopyInto(out *KafkaTopicParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]SettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicParameters.
func (in *KafkaTopicParameters) DeepCopy() *KafkaTopicParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicParameters_2) DeepCopyInto(out *KafkaTopicParameters_2) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(float64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]KafkaTopicTopicConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicParameters_2.
func (in *KafkaTopicParameters_2) DeepCopy() *KafkaTopicParameters_2 {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicParameters_2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicSpec) DeepCopyInto(out *KafkaTopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicSpec.
func (in *KafkaTopicSpec) DeepCopy() *KafkaTopicSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicStatus) DeepCopyInto(out *KafkaTopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicStatus.
func (in *KafkaTopicStatus) DeepCopy() *KafkaTopicStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicTopicConfigInitParameters) DeepCopyInto(out *KafkaTopicTopicConfigInitParameters) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicTopicConfigInitParameters.
func (in *KafkaTopicTopicConfigInitParameters) DeepCopy() *KafkaTopicTopicConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicTopicConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicTopicConfigObservation) DeepCopyInto(out *KafkaTopicTopicConfigObservation) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicTopicConfigObservation.
func (in *KafkaTopicTopicConfigObservation) DeepCopy() *KafkaTopicTopicConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicTopicConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicTopicConfigParameters) DeepCopyInto(out *KafkaTopicTopicConfigParameters) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicTopicConfigParameters.
func (in *KafkaTopicTopicConfigParameters) DeepCopy() *KafkaTopicTopicConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicTopicConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUser) DeepCopyInto(out *KafkaUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUser.
func (in *KafkaUser) DeepCopy() *KafkaUser {
	if in == nil {
		return nil
	}
	out := new(KafkaUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserInitParameters) DeepCopyInto(out *KafkaUserInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]KafkaUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserInitParameters.
func (in *KafkaUserInitParameters) DeepCopy() *KafkaUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserList) DeepCopyInto(out *KafkaUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserList.
func (in *KafkaUserList) DeepCopy() *KafkaUserList {
	if in == nil {
		return nil
	}
	out := new(KafkaUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserObservation) DeepCopyInto(out *KafkaUserObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]KafkaUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserObservation.
func (in *KafkaUserObservation) DeepCopy() *KafkaUserObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserParameters) DeepCopyInto(out *KafkaUserParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]KafkaUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserParameters.
func (in *KafkaUserParameters) DeepCopy() *KafkaUserParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserPermissionInitParameters) DeepCopyInto(out *KafkaUserPermissionInitParameters) {
	*out = *in
	if in.AllowHosts != nil {
		in, out := &in.AllowHosts, &out.AllowHosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserPermissionInitParameters.
func (in *KafkaUserPermissionInitParameters) DeepCopy() *KafkaUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserPermissionObservation) DeepCopyInto(out *KafkaUserPermissionObservation) {
	*out = *in
	if in.AllowHosts != nil {
		in, out := &in.AllowHosts, &out.AllowHosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserPermissionObservation.
func (in *KafkaUserPermissionObservation) DeepCopy() *KafkaUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserPermissionParameters) DeepCopyInto(out *KafkaUserPermissionParameters) {
	*out = *in
	if in.AllowHosts != nil {
		in, out := &in.AllowHosts, &out.AllowHosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserPermissionParameters.
func (in *KafkaUserPermissionParameters) DeepCopy() *KafkaUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserSpec) DeepCopyInto(out *KafkaUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserSpec.
func (in *KafkaUserSpec) DeepCopy() *KafkaUserSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaUserStatus) DeepCopyInto(out *KafkaUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaUserStatus.
func (in *KafkaUserStatus) DeepCopy() *KafkaUserStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KmipInitParameters) DeepCopyInto(out *KmipInitParameters) {
	*out = *in
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.KeyIdentifier != nil {
		in, out := &in.KeyIdentifier, &out.KeyIdentifier
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.ServerCA != nil {
		in, out := &in.ServerCA, &out.ServerCA
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KmipInitParameters.
func (in *KmipInitParameters) DeepCopy() *KmipInitParameters {
	if in == nil {
		return nil
	}
	out := new(KmipInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KmipObservation) DeepCopyInto(out *KmipObservation) {
	*out = *in
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.KeyIdentifier != nil {
		in, out := &in.KeyIdentifier, &out.KeyIdentifier
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.ServerCA != nil {
		in, out := &in.ServerCA, &out.ServerCA
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KmipObservation.
func (in *KmipObservation) DeepCopy() *KmipObservation {
	if in == nil {
		return nil
	}
	out := new(KmipObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KmipParameters) DeepCopyInto(out *KmipParameters) {
	*out = *in
	if in.ClientCertificate != nil {
		in, out := &in.ClientCertificate, &out.ClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.KeyIdentifier != nil {
		in, out := &in.KeyIdentifier, &out.KeyIdentifier
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(int64)
		**out = **in
	}
	if in.ServerCA != nil {
		in, out := &in.ServerCA, &out.ServerCA
		*out = new(string)
		**out = **in
	}
	if in.ServerName != nil {
		in, out := &in.ServerName, &out.ServerName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KmipParameters.
func (in *KmipParameters) DeepCopy() *KmipParameters {
	if in == nil {
		return nil
	}
	out := new(KmipParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MLModelInitParameters) DeepCopyInto(out *MLModelInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MLModelInitParameters.
func (in *MLModelInitParameters) DeepCopy() *MLModelInitParameters {
	if in == nil {
		return nil
	}
	out := new(MLModelInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MLModelObservation) DeepCopyInto(out *MLModelObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MLModelObservation.
func (in *MLModelObservation) DeepCopy() *MLModelObservation {
	if in == nil {
		return nil
	}
	out := new(MLModelObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MLModelParameters) DeepCopyInto(out *MLModelParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MLModelParameters.
func (in *MLModelParameters) DeepCopy() *MLModelParameters {
	if in == nil {
		return nil
	}
	out := new(MLModelParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowInitParameters) DeepCopyInto(out *MaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowInitParameters.
func (in *MaintenanceWindowInitParameters) DeepCopy() *MaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowObservation) DeepCopyInto(out *MaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowObservation.
func (in *MaintenanceWindowObservation) DeepCopy() *MaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowParameters) DeepCopyInto(out *MaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowParameters.
func (in *MaintenanceWindowParameters) DeepCopy() *MaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeInitParameters) DeepCopyInto(out *MasterNodeInitParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MasterNodeResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeInitParameters.
func (in *MasterNodeInitParameters) DeepCopy() *MasterNodeInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeObservation) DeepCopyInto(out *MasterNodeObservation) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MasterNodeResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeObservation.
func (in *MasterNodeObservation) DeepCopy() *MasterNodeObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeParameters) DeepCopyInto(out *MasterNodeParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MasterNodeResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeParameters.
func (in *MasterNodeParameters) DeepCopy() *MasterNodeParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeResourcesInitParameters) DeepCopyInto(out *MasterNodeResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeResourcesInitParameters.
func (in *MasterNodeResourcesInitParameters) DeepCopy() *MasterNodeResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeResourcesObservation) DeepCopyInto(out *MasterNodeResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeResourcesObservation.
func (in *MasterNodeResourcesObservation) DeepCopy() *MasterNodeResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodeResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeResourcesParameters) DeepCopyInto(out *MasterNodeResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeResourcesParameters.
func (in *MasterNodeResourcesParameters) DeepCopy() *MasterNodeResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MergeTreeInitParameters) DeepCopyInto(out *MergeTreeInitParameters) {
	*out = *in
	if in.CleanupDelayPeriod != nil {
		in, out := &in.CleanupDelayPeriod, &out.CleanupDelayPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MaxAvgPartSizeForTooManyParts != nil {
		in, out := &in.MaxAvgPartSizeForTooManyParts, &out.MaxAvgPartSizeForTooManyParts
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToMergeAtMinSpaceInPool != nil {
		in, out := &in.MaxBytesToMergeAtMinSpaceInPool, &out.MaxBytesToMergeAtMinSpaceInPool
		*out = new(float64)
		**out = **in
	}
	if in.MaxNumberOfMergesWithTTLInPool != nil {
		in, out := &in.MaxNumberOfMergesWithTTLInPool, &out.MaxNumberOfMergesWithTTLInPool
		*out = new(float64)
		**out = **in
	}
	if in.MaxPartsInTotal != nil {
		in, out := &in.MaxPartsInTotal, &out.MaxPartsInTotal
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplicatedMergesInQueue != nil {
		in, out := &in.MaxReplicatedMergesInQueue, &out.MaxReplicatedMergesInQueue
		*out = new(float64)
		**out = **in
	}
	if in.MergeSelectingSleepMs != nil {
		in, out := &in.MergeSelectingSleepMs, &out.MergeSelectingSleepMs
		*out = new(float64)
		**out = **in
	}
	if in.MergeWithRecompressionTTLTimeout != nil {
		in, out := &in.MergeWithRecompressionTTLTimeout, &out.MergeWithRecompressionTTLTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MergeWithTTLTimeout != nil {
		in, out := &in.MergeWithTTLTimeout, &out.MergeWithTTLTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MinAgeToForceMergeOnPartitionOnly != nil {
		in, out := &in.MinAgeToForceMergeOnPartitionOnly, &out.MinAgeToForceMergeOnPartitionOnly
		*out = new(bool)
		**out = **in
	}
	if in.MinAgeToForceMergeSeconds != nil {
		in, out := &in.MinAgeToForceMergeSeconds, &out.MinAgeToForceMergeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MinBytesForWidePart != nil {
		in, out := &in.MinBytesForWidePart, &out.MinBytesForWidePart
		*out = new(float64)
		**out = **in
	}
	if in.MinRowsForWidePart != nil {
		in, out := &in.MinRowsForWidePart, &out.MinRowsForWidePart
		*out = new(float64)
		**out = **in
	}
	if in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge != nil {
		in, out := &in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge, &out.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
		*out = new(float64)
		**out = **in
	}
	if in.PartsToDelayInsert != nil {
		in, out := &in.PartsToDelayInsert, &out.PartsToDelayInsert
		*out = new(float64)
		**out = **in
	}
	if in.PartsToThrowInsert != nil {
		in, out := &in.PartsToThrowInsert, &out.PartsToThrowInsert
		*out = new(float64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindow != nil {
		in, out := &in.ReplicatedDeduplicationWindow, &out.ReplicatedDeduplicationWindow
		*out = new(float64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindowSeconds != nil {
		in, out := &in.ReplicatedDeduplicationWindowSeconds, &out.ReplicatedDeduplicationWindowSeconds
		*out = new(float64)
		**out = **in
	}
	if in.TTLOnlyDropParts != nil {
		in, out := &in.TTLOnlyDropParts, &out.TTLOnlyDropParts
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MergeTreeInitParameters.
func (in *MergeTreeInitParameters) DeepCopy() *MergeTreeInitParameters {
	if in == nil {
		return nil
	}
	out := new(MergeTreeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MergeTreeObservation) DeepCopyInto(out *MergeTreeObservation) {
	*out = *in
	if in.CleanupDelayPeriod != nil {
		in, out := &in.CleanupDelayPeriod, &out.CleanupDelayPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MaxAvgPartSizeForTooManyParts != nil {
		in, out := &in.MaxAvgPartSizeForTooManyParts, &out.MaxAvgPartSizeForTooManyParts
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToMergeAtMinSpaceInPool != nil {
		in, out := &in.MaxBytesToMergeAtMinSpaceInPool, &out.MaxBytesToMergeAtMinSpaceInPool
		*out = new(float64)
		**out = **in
	}
	if in.MaxNumberOfMergesWithTTLInPool != nil {
		in, out := &in.MaxNumberOfMergesWithTTLInPool, &out.MaxNumberOfMergesWithTTLInPool
		*out = new(float64)
		**out = **in
	}
	if in.MaxPartsInTotal != nil {
		in, out := &in.MaxPartsInTotal, &out.MaxPartsInTotal
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplicatedMergesInQueue != nil {
		in, out := &in.MaxReplicatedMergesInQueue, &out.MaxReplicatedMergesInQueue
		*out = new(float64)
		**out = **in
	}
	if in.MergeSelectingSleepMs != nil {
		in, out := &in.MergeSelectingSleepMs, &out.MergeSelectingSleepMs
		*out = new(float64)
		**out = **in
	}
	if in.MergeWithRecompressionTTLTimeout != nil {
		in, out := &in.MergeWithRecompressionTTLTimeout, &out.MergeWithRecompressionTTLTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MergeWithTTLTimeout != nil {
		in, out := &in.MergeWithTTLTimeout, &out.MergeWithTTLTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MinAgeToForceMergeOnPartitionOnly != nil {
		in, out := &in.MinAgeToForceMergeOnPartitionOnly, &out.MinAgeToForceMergeOnPartitionOnly
		*out = new(bool)
		**out = **in
	}
	if in.MinAgeToForceMergeSeconds != nil {
		in, out := &in.MinAgeToForceMergeSeconds, &out.MinAgeToForceMergeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MinBytesForWidePart != nil {
		in, out := &in.MinBytesForWidePart, &out.MinBytesForWidePart
		*out = new(float64)
		**out = **in
	}
	if in.MinRowsForWidePart != nil {
		in, out := &in.MinRowsForWidePart, &out.MinRowsForWidePart
		*out = new(float64)
		**out = **in
	}
	if in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge != nil {
		in, out := &in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge, &out.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
		*out = new(float64)
		**out = **in
	}
	if in.PartsToDelayInsert != nil {
		in, out := &in.PartsToDelayInsert, &out.PartsToDelayInsert
		*out = new(float64)
		**out = **in
	}
	if in.PartsToThrowInsert != nil {
		in, out := &in.PartsToThrowInsert, &out.PartsToThrowInsert
		*out = new(float64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindow != nil {
		in, out := &in.ReplicatedDeduplicationWindow, &out.ReplicatedDeduplicationWindow
		*out = new(float64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindowSeconds != nil {
		in, out := &in.ReplicatedDeduplicationWindowSeconds, &out.ReplicatedDeduplicationWindowSeconds
		*out = new(float64)
		**out = **in
	}
	if in.TTLOnlyDropParts != nil {
		in, out := &in.TTLOnlyDropParts, &out.TTLOnlyDropParts
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MergeTreeObservation.
func (in *MergeTreeObservation) DeepCopy() *MergeTreeObservation {
	if in == nil {
		return nil
	}
	out := new(MergeTreeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MergeTreeParameters) DeepCopyInto(out *MergeTreeParameters) {
	*out = *in
	if in.CleanupDelayPeriod != nil {
		in, out := &in.CleanupDelayPeriod, &out.CleanupDelayPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MaxAvgPartSizeForTooManyParts != nil {
		in, out := &in.MaxAvgPartSizeForTooManyParts, &out.MaxAvgPartSizeForTooManyParts
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToMergeAtMinSpaceInPool != nil {
		in, out := &in.MaxBytesToMergeAtMinSpaceInPool, &out.MaxBytesToMergeAtMinSpaceInPool
		*out = new(float64)
		**out = **in
	}
	if in.MaxNumberOfMergesWithTTLInPool != nil {
		in, out := &in.MaxNumberOfMergesWithTTLInPool, &out.MaxNumberOfMergesWithTTLInPool
		*out = new(float64)
		**out = **in
	}
	if in.MaxPartsInTotal != nil {
		in, out := &in.MaxPartsInTotal, &out.MaxPartsInTotal
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplicatedMergesInQueue != nil {
		in, out := &in.MaxReplicatedMergesInQueue, &out.MaxReplicatedMergesInQueue
		*out = new(float64)
		**out = **in
	}
	if in.MergeSelectingSleepMs != nil {
		in, out := &in.MergeSelectingSleepMs, &out.MergeSelectingSleepMs
		*out = new(float64)
		**out = **in
	}
	if in.MergeWithRecompressionTTLTimeout != nil {
		in, out := &in.MergeWithRecompressionTTLTimeout, &out.MergeWithRecompressionTTLTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MergeWithTTLTimeout != nil {
		in, out := &in.MergeWithTTLTimeout, &out.MergeWithTTLTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MinAgeToForceMergeOnPartitionOnly != nil {
		in, out := &in.MinAgeToForceMergeOnPartitionOnly, &out.MinAgeToForceMergeOnPartitionOnly
		*out = new(bool)
		**out = **in
	}
	if in.MinAgeToForceMergeSeconds != nil {
		in, out := &in.MinAgeToForceMergeSeconds, &out.MinAgeToForceMergeSeconds
		*out = new(float64)
		**out = **in
	}
	if in.MinBytesForWidePart != nil {
		in, out := &in.MinBytesForWidePart, &out.MinBytesForWidePart
		*out = new(float64)
		**out = **in
	}
	if in.MinRowsForWidePart != nil {
		in, out := &in.MinRowsForWidePart, &out.MinRowsForWidePart
		*out = new(float64)
		**out = **in
	}
	if in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge != nil {
		in, out := &in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge, &out.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
		*out = new(float64)
		**out = **in
	}
	if in.PartsToDelayInsert != nil {
		in, out := &in.PartsToDelayInsert, &out.PartsToDelayInsert
		*out = new(float64)
		**out = **in
	}
	if in.PartsToThrowInsert != nil {
		in, out := &in.PartsToThrowInsert, &out.PartsToThrowInsert
		*out = new(float64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindow != nil {
		in, out := &in.ReplicatedDeduplicationWindow, &out.ReplicatedDeduplicationWindow
		*out = new(float64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindowSeconds != nil {
		in, out := &in.ReplicatedDeduplicationWindowSeconds, &out.ReplicatedDeduplicationWindowSeconds
		*out = new(float64)
		**out = **in
	}
	if in.TTLOnlyDropParts != nil {
		in, out := &in.TTLOnlyDropParts, &out.TTLOnlyDropParts
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MergeTreeParameters.
func (in *MergeTreeParameters) DeepCopy() *MergeTreeParameters {
	if in == nil {
		return nil
	}
	out := new(MergeTreeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongocfgInitParameters) DeepCopyInto(out *MongocfgInitParameters) {
	*out = *in
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]NetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationProfiling != nil {
		in, out := &in.OperationProfiling, &out.OperationProfiling
		*out = make([]OperationProfilingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongocfgInitParameters.
func (in *MongocfgInitParameters) DeepCopy() *MongocfgInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongocfgInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongocfgObservation) DeepCopyInto(out *MongocfgObservation) {
	*out = *in
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]NetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationProfiling != nil {
		in, out := &in.OperationProfiling, &out.OperationProfiling
		*out = make([]OperationProfilingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongocfgObservation.
func (in *MongocfgObservation) DeepCopy() *MongocfgObservation {
	if in == nil {
		return nil
	}
	out := new(MongocfgObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongocfgParameters) DeepCopyInto(out *MongocfgParameters) {
	*out = *in
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]NetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationProfiling != nil {
		in, out := &in.OperationProfiling, &out.OperationProfiling
		*out = make([]OperationProfilingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]StorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongocfgParameters.
func (in *MongocfgParameters) DeepCopy() *MongocfgParameters {
	if in == nil {
		return nil
	}
	out := new(MongocfgParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodInitParameters) DeepCopyInto(out *MongodInitParameters) {
	*out = *in
	if in.AuditLog != nil {
		in, out := &in.AuditLog, &out.AuditLog
		*out = make([]AuditLogInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]MongodNetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationProfiling != nil {
		in, out := &in.OperationProfiling, &out.OperationProfiling
		*out = make([]MongodOperationProfilingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Security != nil {
		in, out := &in.Security, &out.Security
		*out = make([]SecurityInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SetParameter != nil {
		in, out := &in.SetParameter, &out.SetParameter
		*out = make([]SetParameterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]MongodStorageInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodInitParameters.
func (in *MongodInitParameters) DeepCopy() *MongodInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodNetInitParameters) DeepCopyInto(out *MongodNetInitParameters) {
	*out = *in
	if in.Compressors != nil {
		in, out := &in.Compressors, &out.Compressors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodNetInitParameters.
func (in *MongodNetInitParameters) DeepCopy() *MongodNetInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodNetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodNetObservation) DeepCopyInto(out *MongodNetObservation) {
	*out = *in
	if in.Compressors != nil {
		in, out := &in.Compressors, &out.Compressors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodNetObservation.
func (in *MongodNetObservation) DeepCopy() *MongodNetObservation {
	if in == nil {
		return nil
	}
	out := new(MongodNetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodNetParameters) DeepCopyInto(out *MongodNetParameters) {
	*out = *in
	if in.Compressors != nil {
		in, out := &in.Compressors, &out.Compressors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodNetParameters.
func (in *MongodNetParameters) DeepCopy() *MongodNetParameters {
	if in == nil {
		return nil
	}
	out := new(MongodNetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodObservation) DeepCopyInto(out *MongodObservation) {
	*out = *in
	if in.AuditLog != nil {
		in, out := &in.AuditLog, &out.AuditLog
		*out = make([]AuditLogObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]MongodNetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationProfiling != nil {
		in, out := &in.OperationProfiling, &out.OperationProfiling
		*out = make([]MongodOperationProfilingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Security != nil {
		in, out := &in.Security, &out.Security
		*out = make([]SecurityObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SetParameter != nil {
		in, out := &in.SetParameter, &out.SetParameter
		*out = make([]SetParameterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]MongodStorageObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodObservation.
func (in *MongodObservation) DeepCopy() *MongodObservation {
	if in == nil {
		return nil
	}
	out := new(MongodObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodOperationProfilingInitParameters) DeepCopyInto(out *MongodOperationProfilingInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SlowOpSampleRate != nil {
		in, out := &in.SlowOpSampleRate, &out.SlowOpSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.SlowOpThreshold != nil {
		in, out := &in.SlowOpThreshold, &out.SlowOpThreshold
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodOperationProfilingInitParameters.
func (in *MongodOperationProfilingInitParameters) DeepCopy() *MongodOperationProfilingInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodOperationProfilingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodOperationProfilingObservation) DeepCopyInto(out *MongodOperationProfilingObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SlowOpSampleRate != nil {
		in, out := &in.SlowOpSampleRate, &out.SlowOpSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.SlowOpThreshold != nil {
		in, out := &in.SlowOpThreshold, &out.SlowOpThreshold
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodOperationProfilingObservation.
func (in *MongodOperationProfilingObservation) DeepCopy() *MongodOperationProfilingObservation {
	if in == nil {
		return nil
	}
	out := new(MongodOperationProfilingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodOperationProfilingParameters) DeepCopyInto(out *MongodOperationProfilingParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SlowOpSampleRate != nil {
		in, out := &in.SlowOpSampleRate, &out.SlowOpSampleRate
		*out = new(float64)
		**out = **in
	}
	if in.SlowOpThreshold != nil {
		in, out := &in.SlowOpThreshold, &out.SlowOpThreshold
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodOperationProfilingParameters.
func (in *MongodOperationProfilingParameters) DeepCopy() *MongodOperationProfilingParameters {
	if in == nil {
		return nil
	}
	out := new(MongodOperationProfilingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodParameters) DeepCopyInto(out *MongodParameters) {
	*out = *in
	if in.AuditLog != nil {
		in, out := &in.AuditLog, &out.AuditLog
		*out = make([]AuditLogParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]MongodNetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OperationProfiling != nil {
		in, out := &in.OperationProfiling, &out.OperationProfiling
		*out = make([]MongodOperationProfilingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Security != nil {
		in, out := &in.Security, &out.Security
		*out = make([]SecurityParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SetParameter != nil {
		in, out := &in.SetParameter, &out.SetParameter
		*out = make([]SetParameterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Storage != nil {
		in, out := &in.Storage, &out.Storage
		*out = make([]MongodStorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodParameters.
func (in *MongodParameters) DeepCopy() *MongodParameters {
	if in == nil {
		return nil
	}
	out := new(MongodParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodStorageInitParameters) DeepCopyInto(out *MongodStorageInitParameters) {
	*out = *in
	if in.Journal != nil {
		in, out := &in.Journal, &out.Journal
		*out = make([]JournalInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WiredTiger != nil {
		in, out := &in.WiredTiger, &out.WiredTiger
		*out = make([]StorageWiredTigerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodStorageInitParameters.
func (in *MongodStorageInitParameters) DeepCopy() *MongodStorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodStorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodStorageObservation) DeepCopyInto(out *MongodStorageObservation) {
	*out = *in
	if in.Journal != nil {
		in, out := &in.Journal, &out.Journal
		*out = make([]JournalObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WiredTiger != nil {
		in, out := &in.WiredTiger, &out.WiredTiger
		*out = make([]StorageWiredTigerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodStorageObservation.
func (in *MongodStorageObservation) DeepCopy() *MongodStorageObservation {
	if in == nil {
		return nil
	}
	out := new(MongodStorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodStorageParameters) DeepCopyInto(out *MongodStorageParameters) {
	*out = *in
	if in.Journal != nil {
		in, out := &in.Journal, &out.Journal
		*out = make([]JournalParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WiredTiger != nil {
		in, out := &in.WiredTiger, &out.WiredTiger
		*out = make([]StorageWiredTigerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodStorageParameters.
func (in *MongodStorageParameters) DeepCopy() *MongodStorageParameters {
	if in == nil {
		return nil
	}
	out := new(MongodStorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbCluster) DeepCopyInto(out *MongodbCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbCluster.
func (in *MongodbCluster) DeepCopy() *MongodbCluster {
	if in == nil {
		return nil
	}
	out := new(MongodbCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterDatabaseInitParameters) DeepCopyInto(out *MongodbClusterDatabaseInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterDatabaseInitParameters.
func (in *MongodbClusterDatabaseInitParameters) DeepCopy() *MongodbClusterDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterDatabaseObservation) DeepCopyInto(out *MongodbClusterDatabaseObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterDatabaseObservation.
func (in *MongodbClusterDatabaseObservation) DeepCopy() *MongodbClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterDatabaseParameters) DeepCopyInto(out *MongodbClusterDatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterDatabaseParameters.
func (in *MongodbClusterDatabaseParameters) DeepCopy() *MongodbClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterHostInitParameters) DeepCopyInto(out *MongodbClusterHostInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostParameters != nil {
		in, out := &in.HostParameters, &out.HostParameters
		*out = make([]HostParametersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterHostInitParameters.
func (in *MongodbClusterHostInitParameters) DeepCopy() *MongodbClusterHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterHostObservation) DeepCopyInto(out *MongodbClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.HostParameters != nil {
		in, out := &in.HostParameters, &out.HostParameters
		*out = make([]HostParametersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterHostObservation.
func (in *MongodbClusterHostObservation) DeepCopy() *MongodbClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterHostParameters) DeepCopyInto(out *MongodbClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostParameters != nil {
		in, out := &in.HostParameters, &out.HostParameters
		*out = make([]HostParametersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterHostParameters.
func (in *MongodbClusterHostParameters) DeepCopy() *MongodbClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterInitParameters) DeepCopyInto(out *MongodbClusterInitParameters) {
	*out = *in
	if in.ClusterConfig != nil {
		in, out := &in.ClusterConfig, &out.ClusterConfig
		*out = make([]ClusterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MongodbClusterDatabaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MongodbClusterHostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MongodbClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MongodbClusterResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongocfg != nil {
		in, out := &in.ResourcesMongocfg, &out.ResourcesMongocfg
		*out = make([]ResourcesMongocfgInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongod != nil {
		in, out := &in.ResourcesMongod, &out.ResourcesMongod
		*out = make([]ResourcesMongodInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongoinfra != nil {
		in, out := &in.ResourcesMongoinfra, &out.ResourcesMongoinfra
		*out = make([]ResourcesMongoinfraInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongos != nil {
		in, out := &in.ResourcesMongos, &out.ResourcesMongos
		*out = make([]ResourcesMongosInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]RestoreInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MongodbClusterUserInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterInitParameters.
func (in *MongodbClusterInitParameters) DeepCopy() *MongodbClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterList) DeepCopyInto(out *MongodbClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MongodbCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterList.
func (in *MongodbClusterList) DeepCopy() *MongodbClusterList {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterMaintenanceWindowInitParameters) DeepCopyInto(out *MongodbClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterMaintenanceWindowInitParameters.
func (in *MongodbClusterMaintenanceWindowInitParameters) DeepCopy() *MongodbClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterMaintenanceWindowObservation) DeepCopyInto(out *MongodbClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterMaintenanceWindowObservation.
func (in *MongodbClusterMaintenanceWindowObservation) DeepCopy() *MongodbClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterMaintenanceWindowParameters) DeepCopyInto(out *MongodbClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterMaintenanceWindowParameters.
func (in *MongodbClusterMaintenanceWindowParameters) DeepCopy() *MongodbClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterObservation) DeepCopyInto(out *MongodbClusterObservation) {
	*out = *in
	if in.ClusterConfig != nil {
		in, out := &in.ClusterConfig, &out.ClusterConfig
		*out = make([]ClusterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MongodbClusterDatabaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MongodbClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MongodbClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MongodbClusterResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongocfg != nil {
		in, out := &in.ResourcesMongocfg, &out.ResourcesMongocfg
		*out = make([]ResourcesMongocfgObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongod != nil {
		in, out := &in.ResourcesMongod, &out.ResourcesMongod
		*out = make([]ResourcesMongodObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongoinfra != nil {
		in, out := &in.ResourcesMongoinfra, &out.ResourcesMongoinfra
		*out = make([]ResourcesMongoinfraObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongos != nil {
		in, out := &in.ResourcesMongos, &out.ResourcesMongos
		*out = make([]ResourcesMongosObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]RestoreObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Sharded != nil {
		in, out := &in.Sharded, &out.Sharded
		*out = new(bool)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MongodbClusterUserObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterObservation.
func (in *MongodbClusterObservation) DeepCopy() *MongodbClusterObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterParameters) DeepCopyInto(out *MongodbClusterParameters) {
	*out = *in
	if in.ClusterConfig != nil {
		in, out := &in.ClusterConfig, &out.ClusterConfig
		*out = make([]ClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MongodbClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MongodbClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MongodbClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MongodbClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongocfg != nil {
		in, out := &in.ResourcesMongocfg, &out.ResourcesMongocfg
		*out = make([]ResourcesMongocfgParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongod != nil {
		in, out := &in.ResourcesMongod, &out.ResourcesMongod
		*out = make([]ResourcesMongodParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongoinfra != nil {
		in, out := &in.ResourcesMongoinfra, &out.ResourcesMongoinfra
		*out = make([]ResourcesMongoinfraParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ResourcesMongos != nil {
		in, out := &in.ResourcesMongos, &out.ResourcesMongos
		*out = make([]ResourcesMongosParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]RestoreParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MongodbClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterParameters.
func (in *MongodbClusterParameters) DeepCopy() *MongodbClusterParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterResourcesInitParameters) DeepCopyInto(out *MongodbClusterResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterResourcesInitParameters.
func (in *MongodbClusterResourcesInitParameters) DeepCopy() *MongodbClusterResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterResourcesObservation) DeepCopyInto(out *MongodbClusterResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterResourcesObservation.
func (in *MongodbClusterResourcesObservation) DeepCopy() *MongodbClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterResourcesParameters) DeepCopyInto(out *MongodbClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterResourcesParameters.
func (in *MongodbClusterResourcesParameters) DeepCopy() *MongodbClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterSpec) DeepCopyInto(out *MongodbClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterSpec.
func (in *MongodbClusterSpec) DeepCopy() *MongodbClusterSpec {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterStatus) DeepCopyInto(out *MongodbClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterStatus.
func (in *MongodbClusterStatus) DeepCopy() *MongodbClusterStatus {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserInitParameters) DeepCopyInto(out *MongodbClusterUserInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbClusterUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserInitParameters.
func (in *MongodbClusterUserInitParameters) DeepCopy() *MongodbClusterUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserObservation) DeepCopyInto(out *MongodbClusterUserObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbClusterUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserObservation.
func (in *MongodbClusterUserObservation) DeepCopy() *MongodbClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserParameters) DeepCopyInto(out *MongodbClusterUserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserParameters.
func (in *MongodbClusterUserParameters) DeepCopy() *MongodbClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserPermissionInitParameters) DeepCopyInto(out *MongodbClusterUserPermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserPermissionInitParameters.
func (in *MongodbClusterUserPermissionInitParameters) DeepCopy() *MongodbClusterUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserPermissionObservation) DeepCopyInto(out *MongodbClusterUserPermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserPermissionObservation.
func (in *MongodbClusterUserPermissionObservation) DeepCopy() *MongodbClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserPermissionParameters) DeepCopyInto(out *MongodbClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserPermissionParameters.
func (in *MongodbClusterUserPermissionParameters) DeepCopy() *MongodbClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabase) DeepCopyInto(out *MongodbDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabase.
func (in *MongodbDatabase) DeepCopy() *MongodbDatabase {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabaseInitParameters) DeepCopyInto(out *MongodbDatabaseInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabaseInitParameters.
func (in *MongodbDatabaseInitParameters) DeepCopy() *MongodbDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabaseList) DeepCopyInto(out *MongodbDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MongodbDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabaseList.
func (in *MongodbDatabaseList) DeepCopy() *MongodbDatabaseList {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabaseObservation) DeepCopyInto(out *MongodbDatabaseObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabaseObservation.
func (in *MongodbDatabaseObservation) DeepCopy() *MongodbDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabaseParameters) DeepCopyInto(out *MongodbDatabaseParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabaseParameters.
func (in *MongodbDatabaseParameters) DeepCopy() *MongodbDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabaseSpec) DeepCopyInto(out *MongodbDatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabaseSpec.
func (in *MongodbDatabaseSpec) DeepCopy() *MongodbDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbDatabaseStatus) DeepCopyInto(out *MongodbDatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbDatabaseStatus.
func (in *MongodbDatabaseStatus) DeepCopy() *MongodbDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(MongodbDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUser) DeepCopyInto(out *MongodbUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUser.
func (in *MongodbUser) DeepCopy() *MongodbUser {
	if in == nil {
		return nil
	}
	out := new(MongodbUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserInitParameters) DeepCopyInto(out *MongodbUserInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserInitParameters.
func (in *MongodbUserInitParameters) DeepCopy() *MongodbUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserList) DeepCopyInto(out *MongodbUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MongodbUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserList.
func (in *MongodbUserList) DeepCopy() *MongodbUserList {
	if in == nil {
		return nil
	}
	out := new(MongodbUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserObservation) DeepCopyInto(out *MongodbUserObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserObservation.
func (in *MongodbUserObservation) DeepCopy() *MongodbUserObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserParameters) DeepCopyInto(out *MongodbUserParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserParameters.
func (in *MongodbUserParameters) DeepCopy() *MongodbUserParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserPermissionInitParameters) DeepCopyInto(out *MongodbUserPermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserPermissionInitParameters.
func (in *MongodbUserPermissionInitParameters) DeepCopy() *MongodbUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserPermissionObservation) DeepCopyInto(out *MongodbUserPermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserPermissionObservation.
func (in *MongodbUserPermissionObservation) DeepCopy() *MongodbUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserPermissionParameters) DeepCopyInto(out *MongodbUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserPermissionParameters.
func (in *MongodbUserPermissionParameters) DeepCopy() *MongodbUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserSpec) DeepCopyInto(out *MongodbUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserSpec.
func (in *MongodbUserSpec) DeepCopy() *MongodbUserSpec {
	if in == nil {
		return nil
	}
	out := new(MongodbUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbUserStatus) DeepCopyInto(out *MongodbUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbUserStatus.
func (in *MongodbUserStatus) DeepCopy() *MongodbUserStatus {
	if in == nil {
		return nil
	}
	out := new(MongodbUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongosInitParameters) DeepCopyInto(out *MongosInitParameters) {
	*out = *in
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]MongosNetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongosInitParameters.
func (in *MongosInitParameters) DeepCopy() *MongosInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongosInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongosNetInitParameters) DeepCopyInto(out *MongosNetInitParameters) {
	*out = *in
	if in.Compressors != nil {
		in, out := &in.Compressors, &out.Compressors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongosNetInitParameters.
func (in *MongosNetInitParameters) DeepCopy() *MongosNetInitParameters {
	if in == nil {
		return nil
	}
	out := new(MongosNetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongosNetObservation) DeepCopyInto(out *MongosNetObservation) {
	*out = *in
	if in.Compressors != nil {
		in, out := &in.Compressors, &out.Compressors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongosNetObservation.
func (in *MongosNetObservation) DeepCopy() *MongosNetObservation {
	if in == nil {
		return nil
	}
	out := new(MongosNetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongosNetParameters) DeepCopyInto(out *MongosNetParameters) {
	*out = *in
	if in.Compressors != nil {
		in, out := &in.Compressors, &out.Compressors
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongosNetParameters.
func (in *MongosNetParameters) DeepCopy() *MongosNetParameters {
	if in == nil {
		return nil
	}
	out := new(MongosNetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongosObservation) DeepCopyInto(out *MongosObservation) {
	*out = *in
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]MongosNetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongosObservation.
func (in *MongosObservation) DeepCopy() *MongosObservation {
	if in == nil {
		return nil
	}
	out := new(MongosObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongosParameters) DeepCopyInto(out *MongosParameters) {
	*out = *in
	if in.Net != nil {
		in, out := &in.Net, &out.Net
		*out = make([]MongosNetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongosParameters.
func (in *MongosParameters) DeepCopy() *MongosParameters {
	if in == nil {
		return nil
	}
	out := new(MongosParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLCluster) DeepCopyInto(out *MySQLCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLCluster.
func (in *MySQLCluster) DeepCopy() *MySQLCluster {
	if in == nil {
		return nil
	}
	out := new(MySQLCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterAccessInitParameters) DeepCopyInto(out *MySQLClusterAccessInitParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterAccessInitParameters.
func (in *MySQLClusterAccessInitParameters) DeepCopy() *MySQLClusterAccessInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterAccessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterAccessObservation) DeepCopyInto(out *MySQLClusterAccessObservation) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterAccessObservation.
func (in *MySQLClusterAccessObservation) DeepCopy() *MySQLClusterAccessObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterAccessParameters) DeepCopyInto(out *MySQLClusterAccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterAccessParameters.
func (in *MySQLClusterAccessParameters) DeepCopy() *MySQLClusterAccessParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterBackupWindowStartInitParameters) DeepCopyInto(out *MySQLClusterBackupWindowStartInitParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterBackupWindowStartInitParameters.
func (in *MySQLClusterBackupWindowStartInitParameters) DeepCopy() *MySQLClusterBackupWindowStartInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterBackupWindowStartInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterBackupWindowStartObservation) DeepCopyInto(out *MySQLClusterBackupWindowStartObservation) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterBackupWindowStartObservation.
func (in *MySQLClusterBackupWindowStartObservation) DeepCopy() *MySQLClusterBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterBackupWindowStartParameters) DeepCopyInto(out *MySQLClusterBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(float64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterBackupWindowStartParameters.
func (in *MySQLClusterBackupWindowStartParameters) DeepCopy() *MySQLClusterBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterDatabaseInitParameters) DeepCopyInto(out *MySQLClusterDatabaseInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterDatabaseInitParameters.
func (in *MySQLClusterDatabaseInitParameters) DeepCopy() *MySQLClusterDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterDatabaseObservation) DeepCopyInto(out *MySQLClusterDatabaseObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterDatabaseObservation.
func (in *MySQLClusterDatabaseObservation) DeepCopy() *MySQLClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterDatabaseParameters) DeepCopyInto(out *MySQLClusterDatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterDatabaseParameters.
func (in *MySQLClusterDatabaseParameters) DeepCopy() *MySQLClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterHostInitParameters) DeepCopyInto(out *MySQLClusterHostInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BackupPriority != nil {
		in, out := &in.BackupPriority, &out.BackupPriority
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterHostInitParameters.
func (in *MySQLClusterHostInitParameters) DeepCopy() *MySQLClusterHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterHostObservation) DeepCopyInto(out *MySQLClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BackupPriority != nil {
		in, out := &in.BackupPriority, &out.BackupPriority
		*out = new(float64)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationSource != nil {
		in, out := &in.ReplicationSource, &out.ReplicationSource
		*out = new(string)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterHostObservation.
func (in *MySQLClusterHostObservation) DeepCopy() *MySQLClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterHostParameters) DeepCopyInto(out *MySQLClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BackupPriority != nil {
		in, out := &in.BackupPriority, &out.BackupPriority
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterHostParameters.
func (in *MySQLClusterHostParameters) DeepCopy() *MySQLClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterInitParameters) DeepCopyInto(out *MySQLClusterInitParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]MySQLClusterAccessInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowRegenerationHost != nil {
		in, out := &in.AllowRegenerationHost, &out.AllowRegenerationHost
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]MySQLClusterBackupWindowStartInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MySQLClusterDatabaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MySQLClusterHostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MySQLClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLConfig != nil {
		in, out := &in.MySQLConfig, &out.MySQLConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]MySQLClusterPerformanceDiagnosticsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MySQLClusterResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]MySQLClusterRestoreInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MySQLClusterUserInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterInitParameters.
func (in *MySQLClusterInitParameters) DeepCopy() *MySQLClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterList) DeepCopyInto(out *MySQLClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterList.
func (in *MySQLClusterList) DeepCopy() *MySQLClusterList {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterMaintenanceWindowInitParameters) DeepCopyInto(out *MySQLClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterMaintenanceWindowInitParameters.
func (in *MySQLClusterMaintenanceWindowInitParameters) DeepCopy() *MySQLClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterMaintenanceWindowObservation) DeepCopyInto(out *MySQLClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterMaintenanceWindowObservation.
func (in *MySQLClusterMaintenanceWindowObservation) DeepCopy() *MySQLClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterMaintenanceWindowParameters) DeepCopyInto(out *MySQLClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterMaintenanceWindowParameters.
func (in *MySQLClusterMaintenanceWindowParameters) DeepCopy() *MySQLClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterObservation) DeepCopyInto(out *MySQLClusterObservation) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]MySQLClusterAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowRegenerationHost != nil {
		in, out := &in.AllowRegenerationHost, &out.AllowRegenerationHost
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]MySQLClusterBackupWindowStartObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MySQLClusterDatabaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MySQLClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MySQLClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLConfig != nil {
		in, out := &in.MySQLConfig, &out.MySQLConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]MySQLClusterPerformanceDiagnosticsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MySQLClusterResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]MySQLClusterRestoreObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MySQLClusterUserObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterObservation.
func (in *MySQLClusterObservation) DeepCopy() *MySQLClusterObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterParameters) DeepCopyInto(out *MySQLClusterParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]MySQLClusterAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowRegenerationHost != nil {
		in, out := &in.AllowRegenerationHost, &out.AllowRegenerationHost
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]MySQLClusterBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MySQLClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MySQLClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MySQLClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MySQLConfig != nil {
		in, out := &in.MySQLConfig, &out.MySQLConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]MySQLClusterPerformanceDiagnosticsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MySQLClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]MySQLClusterRestoreParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MySQLClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterParameters.
func (in *MySQLClusterParameters) DeepCopy() *MySQLClusterParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterPerformanceDiagnosticsInitParameters) DeepCopyInto(out *MySQLClusterPerformanceDiagnosticsInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(float64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterPerformanceDiagnosticsInitParameters.
func (in *MySQLClusterPerformanceDiagnosticsInitParameters) DeepCopy() *MySQLClusterPerformanceDiagnosticsInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterPerformanceDiagnosticsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterPerformanceDiagnosticsObservation) DeepCopyInto(out *MySQLClusterPerformanceDiagnosticsObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(float64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterPerformanceDiagnosticsObservation.
func (in *MySQLClusterPerformanceDiagnosticsObservation) DeepCopy() *MySQLClusterPerformanceDiagnosticsObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterPerformanceDiagnosticsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterPerformanceDiagnosticsParameters) DeepCopyInto(out *MySQLClusterPerformanceDiagnosticsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(float64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterPerformanceDiagnosticsParameters.
func (in *MySQLClusterPerformanceDiagnosticsParameters) DeepCopy() *MySQLClusterPerformanceDiagnosticsParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterPerformanceDiagnosticsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterResourcesInitParameters) DeepCopyInto(out *MySQLClusterResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterResourcesInitParameters.
func (in *MySQLClusterResourcesInitParameters) DeepCopy() *MySQLClusterResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterResourcesObservation) DeepCopyInto(out *MySQLClusterResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterResourcesObservation.
func (in *MySQLClusterResourcesObservation) DeepCopy() *MySQLClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterResourcesParameters) DeepCopyInto(out *MySQLClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterResourcesParameters.
func (in *MySQLClusterResourcesParameters) DeepCopy() *MySQLClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterRestoreInitParameters) DeepCopyInto(out *MySQLClusterRestoreInitParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterRestoreInitParameters.
func (in *MySQLClusterRestoreInitParameters) DeepCopy() *MySQLClusterRestoreInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterRestoreInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterRestoreObservation) DeepCopyInto(out *MySQLClusterRestoreObservation) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterRestoreObservation.
func (in *MySQLClusterRestoreObservation) DeepCopy() *MySQLClusterRestoreObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterRestoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterRestoreParameters) DeepCopyInto(out *MySQLClusterRestoreParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterRestoreParameters.
func (in *MySQLClusterRestoreParameters) DeepCopy() *MySQLClusterRestoreParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterRestoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterSpec) DeepCopyInto(out *MySQLClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterSpec.
func (in *MySQLClusterSpec) DeepCopy() *MySQLClusterSpec {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterStatus) DeepCopyInto(out *MySQLClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterStatus.
func (in *MySQLClusterStatus) DeepCopy() *MySQLClusterStatus {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterUserInitParameters) DeepCopyInto(out *MySQLClusterUserInitParameters) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]ConnectionLimitsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MySQLClusterUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterUserInitParameters.
func (in *MySQLClusterUserInitParameters) DeepCopy() *MySQLClusterUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterUserObservation) DeepCopyInto(out *MySQLClusterUserObservation) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]ConnectionLimitsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MySQLClusterUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterUserObservation.
func (in *MySQLClusterUserObservation) DeepCopy() *MySQLClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterUserParameters) DeepCopyInto(out *MySQLClusterUserParameters) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]ConnectionLimitsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MySQLClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterUserParameters.
func (in *MySQLClusterUserParameters) DeepCopy() *MySQLClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterUserPermissionInitParameters) DeepCopyInto(out *MySQLClusterUserPermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterUserPermissionInitParameters.
func (in *MySQLClusterUserPermissionInitParameters) DeepCopy() *MySQLClusterUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterUserPermissionObservation) DeepCopyInto(out *MySQLClusterUserPermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterUserPermissionObservation.
func (in *MySQLClusterUserPermissionObservation) DeepCopy() *MySQLClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLClusterUserPermissionParameters) DeepCopyInto(out *MySQLClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLClusterUserPermissionParameters.
func (in *MySQLClusterUserPermissionParameters) DeepCopy() *MySQLClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabase) DeepCopyInto(out *MySQLDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabase.
func (in *MySQLDatabase) DeepCopy() *MySQLDatabase {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabaseInitParameters) DeepCopyInto(out *MySQLDatabaseInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabaseInitParameters.
func (in *MySQLDatabaseInitParameters) DeepCopy() *MySQLDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabaseList) DeepCopyInto(out *MySQLDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabaseList.
func (in *MySQLDatabaseList) DeepCopy() *MySQLDatabaseList {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabaseObservation) DeepCopyInto(out *MySQLDatabaseObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabaseObservation.
func (in *MySQLDatabaseObservation) DeepCopy() *MySQLDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabaseParameters) DeepCopyInto(out *MySQLDatabaseParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabaseParameters.
func (in *MySQLDatabaseParameters) DeepCopy() *MySQLDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabaseSpec) DeepCopyInto(out *MySQLDatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabaseSpec.
func (in *MySQLDatabaseSpec) DeepCopy() *MySQLDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLDatabaseStatus) DeepCopyInto(out *MySQLDatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLDatabaseStatus.
func (in *MySQLDatabaseStatus) DeepCopy() *MySQLDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(MySQLDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUser) DeepCopyInto(out *MySQLUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUser.
func (in *MySQLUser) DeepCopy() *MySQLUser {
	if in == nil {
		return nil
	}
	out := new(MySQLUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConnectionLimitsInitParameters) DeepCopyInto(out *MySQLUserConnectionLimitsInitParameters) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConnectionLimitsInitParameters.
func (in *MySQLUserConnectionLimitsInitParameters) DeepCopy() *MySQLUserConnectionLimitsInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConnectionLimitsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConnectionLimitsObservation) DeepCopyInto(out *MySQLUserConnectionLimitsObservation) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConnectionLimitsObservation.
func (in *MySQLUserConnectionLimitsObservation) DeepCopy() *MySQLUserConnectionLimitsObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConnectionLimitsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserConnectionLimitsParameters) DeepCopyInto(out *MySQLUserConnectionLimitsParameters) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(float64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserConnectionLimitsParameters.
func (in *MySQLUserConnectionLimitsParameters) DeepCopy() *MySQLUserConnectionLimitsParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserConnectionLimitsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserInitParameters) DeepCopyInto(out *MySQLUserInitParameters) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]MySQLUserConnectionLimitsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MySQLUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserInitParameters.
func (in *MySQLUserInitParameters) DeepCopy() *MySQLUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserList) DeepCopyInto(out *MySQLUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MySQLUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserList.
func (in *MySQLUserList) DeepCopy() *MySQLUserList {
	if in == nil {
		return nil
	}
	out := new(MySQLUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MySQLUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserObservation) DeepCopyInto(out *MySQLUserObservation) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]MySQLUserConnectionLimitsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MySQLUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserObservation.
func (in *MySQLUserObservation) DeepCopy() *MySQLUserObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserParameters) DeepCopyInto(out *MySQLUserParameters) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]MySQLUserConnectionLimitsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MySQLUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserParameters.
func (in *MySQLUserParameters) DeepCopy() *MySQLUserParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserPermissionInitParameters) DeepCopyInto(out *MySQLUserPermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserPermissionInitParameters.
func (in *MySQLUserPermissionInitParameters) DeepCopy() *MySQLUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserPermissionObservation) DeepCopyInto(out *MySQLUserPermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserPermissionObservation.
func (in *MySQLUserPermissionObservation) DeepCopy() *MySQLUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(MySQLUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserPermissionParameters) DeepCopyInto(out *MySQLUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserPermissionParameters.
func (in *MySQLUserPermissionParameters) DeepCopy() *MySQLUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(MySQLUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserSpec) DeepCopyInto(out *MySQLUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserSpec.
func (in *MySQLUserSpec) DeepCopy() *MySQLUserSpec {
	if in == nil {
		return nil
	}
	out := new(MySQLUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MySQLUserStatus) DeepCopyInto(out *MySQLUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MySQLUserStatus.
func (in *MySQLUserStatus) DeepCopy() *MySQLUserStatus {
	if in == nil {
		return nil
	}
	out := new(MySQLUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetInitParameters) DeepCopyInto(out *NetInitParameters) {
	*out = *in
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetInitParameters.
func (in *NetInitParameters) DeepCopy() *NetInitParameters {
	if in == nil {
		return nil
	}
	out := new(NetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetObservation) DeepCopyInto(out *NetObservation) {
	*out = *in
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetObservation.
func (in *NetObservation) DeepCopy() *NetObservation {
	if in == nil {
		return nil
	}
	out := new(NetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetParameters) DeepCopyInto(out *NetParameters) {
	*out = *in
	if in.MaxIncomingConnections != nil {
		in, out := &in.MaxIncomingConnections, &out.MaxIncomingConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetParameters.
func (in *NetParameters) DeepCopy() *NetParameters {
	if in == nil {
		return nil
	}
	out := new(NetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeGroupsInitParameters) DeepCopyInto(out *NodeGroupsInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostsCount != nil {
		in, out := &in.HostsCount, &out.HostsCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]NodeGroupsResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeGroupsInitParameters.
func (in *NodeGroupsInitParameters) DeepCopy() *NodeGroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeGroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeGroupsObservation) DeepCopyInto(out *NodeGroupsObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostsCount != nil {
		in, out := &in.HostsCount, &out.HostsCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]NodeGroupsResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeGroupsObservation.
func (in *NodeGroupsObservation) DeepCopy() *NodeGroupsObservation {
	if in == nil {
		return nil
	}
	out := new(NodeGroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeGroupsParameters) DeepCopyInto(out *NodeGroupsParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostsCount != nil {
		in, out := &in.HostsCount, &out.HostsCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]NodeGroupsResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeGroupsParameters.
func (in *NodeGroupsParameters) DeepCopy() *NodeGroupsParameters {
	if in == nil {
		return nil
	}
	out := new(NodeGroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeGroupsResourcesInitParameters) DeepCopyInto(out *NodeGroupsResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeGroupsResourcesInitParameters.
func (in *NodeGroupsResourcesInitParameters) DeepCopy() *NodeGroupsResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(NodeGroupsResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeGroupsResourcesObservation) DeepCopyInto(out *NodeGroupsResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeGroupsResourcesObservation.
func (in *NodeGroupsResourcesObservation) DeepCopy() *NodeGroupsResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(NodeGroupsResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NodeGroupsResourcesParameters) DeepCopyInto(out *NodeGroupsResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NodeGroupsResourcesParameters.
func (in *NodeGroupsResourcesParameters) DeepCopy() *NodeGroupsResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(NodeGroupsResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchCluster) DeepCopyInto(out *OpensearchCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchCluster.
func (in *OpensearchCluster) DeepCopy() *OpensearchCluster {
	if in == nil {
		return nil
	}
	out := new(OpensearchCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpensearchCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterConfigInitParameters) DeepCopyInto(out *OpensearchClusterConfigInitParameters) {
	*out = *in
	if in.Dashboards != nil {
		in, out := &in.Dashboards, &out.Dashboards
		*out = make([]DashboardsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = make([]OpensearchInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterConfigInitParameters.
func (in *OpensearchClusterConfigInitParameters) DeepCopy() *OpensearchClusterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterConfigObservation) DeepCopyInto(out *OpensearchClusterConfigObservation) {
	*out = *in
	if in.Dashboards != nil {
		in, out := &in.Dashboards, &out.Dashboards
		*out = make([]DashboardsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = make([]OpensearchObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterConfigObservation.
func (in *OpensearchClusterConfigObservation) DeepCopy() *OpensearchClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterConfigParameters) DeepCopyInto(out *OpensearchClusterConfigParameters) {
	*out = *in
	out.AdminPasswordSecretRef = in.AdminPasswordSecretRef
	if in.Dashboards != nil {
		in, out := &in.Dashboards, &out.Dashboards
		*out = make([]DashboardsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Opensearch != nil {
		in, out := &in.Opensearch, &out.Opensearch
		*out = make([]OpensearchParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterConfigParameters.
func (in *OpensearchClusterConfigParameters) DeepCopy() *OpensearchClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterInitParameters) DeepCopyInto(out *OpensearchClusterInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]OpensearchClusterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]OpensearchClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterInitParameters.
func (in *OpensearchClusterInitParameters) DeepCopy() *OpensearchClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterList) DeepCopyInto(out *OpensearchClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]OpensearchCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterList.
func (in *OpensearchClusterList) DeepCopy() *OpensearchClusterList {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *OpensearchClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterMaintenanceWindowInitParameters) DeepCopyInto(out *OpensearchClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterMaintenanceWindowInitParameters.
func (in *OpensearchClusterMaintenanceWindowInitParameters) DeepCopy() *OpensearchClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterMaintenanceWindowObservation) DeepCopyInto(out *OpensearchClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterMaintenanceWindowObservation.
func (in *OpensearchClusterMaintenanceWindowObservation) DeepCopy() *OpensearchClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterMaintenanceWindowParameters) DeepCopyInto(out *OpensearchClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterMaintenanceWindowParameters.
func (in *OpensearchClusterMaintenanceWindowParameters) DeepCopy() *OpensearchClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterObservation) DeepCopyInto(out *OpensearchClusterObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]OpensearchClusterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Hosts != nil {
		in, out := &in.Hosts, &out.Hosts
		*out = make([]HostsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]OpensearchClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterObservation.
func (in *OpensearchClusterObservation) DeepCopy() *OpensearchClusterObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterParameters) DeepCopyInto(out *OpensearchClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]OpensearchClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]OpensearchClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterParameters.
func (in *OpensearchClusterParameters) DeepCopy() *OpensearchClusterParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterSpec) DeepCopyInto(out *OpensearchClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterSpec.
func (in *OpensearchClusterSpec) DeepCopy() *OpensearchClusterSpec {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchClusterStatus) DeepCopyInto(out *OpensearchClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchClusterStatus.
func (in *OpensearchClusterStatus) DeepCopy() *OpensearchClusterStatus {
	if in == nil {
		return nil
	}
	out := new(OpensearchClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchInitParameters) DeepCopyInto(out *OpensearchInitParameters) {
	*out = *in
	if in.NodeGroups != nil {
		in, out := &in.NodeGroups, &out.NodeGroups
		*out = make([]OpensearchNodeGroupsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchInitParameters.
func (in *OpensearchInitParameters) DeepCopy() *OpensearchInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchNodeGroupsInitParameters) DeepCopyInto(out *OpensearchNodeGroupsInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostsCount != nil {
		in, out := &in.HostsCount, &out.HostsCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]OpensearchNodeGroupsResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIdsRefs != nil {
		in, out := &in.SubnetIdsRefs, &out.SubnetIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIdsSelector != nil {
		in, out := &in.SubnetIdsSelector, &out.SubnetIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchNodeGroupsInitParameters.
func (in *OpensearchNodeGroupsInitParameters) DeepCopy() *OpensearchNodeGroupsInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchNodeGroupsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchNodeGroupsObservation) DeepCopyInto(out *OpensearchNodeGroupsObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostsCount != nil {
		in, out := &in.HostsCount, &out.HostsCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]OpensearchNodeGroupsResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchNodeGroupsObservation.
func (in *OpensearchNodeGroupsObservation) DeepCopy() *OpensearchNodeGroupsObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchNodeGroupsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchNodeGroupsParameters) DeepCopyInto(out *OpensearchNodeGroupsParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.HostsCount != nil {
		in, out := &in.HostsCount, &out.HostsCount
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]OpensearchNodeGroupsResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIdsRefs != nil {
		in, out := &in.SubnetIdsRefs, &out.SubnetIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetIdsSelector != nil {
		in, out := &in.SubnetIdsSelector, &out.SubnetIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchNodeGroupsParameters.
func (in *OpensearchNodeGroupsParameters) DeepCopy() *OpensearchNodeGroupsParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchNodeGroupsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchNodeGroupsResourcesInitParameters) DeepCopyInto(out *OpensearchNodeGroupsResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchNodeGroupsResourcesInitParameters.
func (in *OpensearchNodeGroupsResourcesInitParameters) DeepCopy() *OpensearchNodeGroupsResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchNodeGroupsResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchNodeGroupsResourcesObservation) DeepCopyInto(out *OpensearchNodeGroupsResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchNodeGroupsResourcesObservation.
func (in *OpensearchNodeGroupsResourcesObservation) DeepCopy() *OpensearchNodeGroupsResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchNodeGroupsResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchNodeGroupsResourcesParameters) DeepCopyInto(out *OpensearchNodeGroupsResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchNodeGroupsResourcesParameters.
func (in *OpensearchNodeGroupsResourcesParameters) DeepCopy() *OpensearchNodeGroupsResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchNodeGroupsResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchObservation) DeepCopyInto(out *OpensearchObservation) {
	*out = *in
	if in.NodeGroups != nil {
		in, out := &in.NodeGroups, &out.NodeGroups
		*out = make([]OpensearchNodeGroupsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchObservation.
func (in *OpensearchObservation) DeepCopy() *OpensearchObservation {
	if in == nil {
		return nil
	}
	out := new(OpensearchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OpensearchParameters) DeepCopyInto(out *OpensearchParameters) {
	*out = *in
	if in.NodeGroups != nil {
		in, out := &in.NodeGroups, &out.NodeGroups
		*out = make([]OpensearchNodeGroupsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OpensearchParameters.
func (in *OpensearchParameters) DeepCopy() *OpensearchParameters {
	if in == nil {
		return nil
	}
	out := new(OpensearchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationProfilingInitParameters) DeepCopyInto(out *OperationProfilingInitParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SlowOpThreshold != nil {
		in, out := &in.SlowOpThreshold, &out.SlowOpThreshold
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationProfilingInitParameters.
func (in *OperationProfilingInitParameters) DeepCopy() *OperationProfilingInitParameters {
	if in == nil {
		return nil
	}
	out := new(OperationProfilingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationProfilingObservation) DeepCopyInto(out *OperationProfilingObservation) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SlowOpThreshold != nil {
		in, out := &in.SlowOpThreshold, &out.SlowOpThreshold
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationProfilingObservation.
func (in *OperationProfilingObservation) DeepCopy() *OperationProfilingObservation {
	if in == nil {
		return nil
	}
	out := new(OperationProfilingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationProfilingParameters) DeepCopyInto(out *OperationProfilingParameters) {
	*out = *in
	if in.Mode != nil {
		in, out := &in.Mode, &out.Mode
		*out = new(string)
		**out = **in
	}
	if in.SlowOpThreshold != nil {
		in, out := &in.SlowOpThreshold, &out.SlowOpThreshold
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationProfilingParameters.
func (in *OperationProfilingParameters) DeepCopy() *OperationProfilingParameters {
	if in == nil {
		return nil
	}
	out := new(OperationProfilingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PatternInitParameters) DeepCopyInto(out *PatternInitParameters) {
	*out = *in
	if in.Function != nil {
		in, out := &in.Function, &out.Function
		*out = new(string)
		**out = **in
	}
	if in.Regexp != nil {
		in, out := &in.Regexp, &out.Regexp
		*out = new(string)
		**out = **in
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PatternInitParameters.
func (in *PatternInitParameters) DeepCopy() *PatternInitParameters {
	if in == nil {
		return nil
	}
	out := new(PatternInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PatternObservation) DeepCopyInto(out *PatternObservation) {
	*out = *in
	if in.Function != nil {
		in, out := &in.Function, &out.Function
		*out = new(string)
		**out = **in
	}
	if in.Regexp != nil {
		in, out := &in.Regexp, &out.Regexp
		*out = new(string)
		**out = **in
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PatternObservation.
func (in *PatternObservation) DeepCopy() *PatternObservation {
	if in == nil {
		return nil
	}
	out := new(PatternObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PatternParameters) DeepCopyInto(out *PatternParameters) {
	*out = *in
	if in.Function != nil {
		in, out := &in.Function, &out.Function
		*out = new(string)
		**out = **in
	}
	if in.Regexp != nil {
		in, out := &in.Regexp, &out.Regexp
		*out = new(string)
		**out = **in
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PatternParameters.
func (in *PatternParameters) DeepCopy() *PatternParameters {
	if in == nil {
		return nil
	}
	out := new(PatternParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceDiagnosticsInitParameters) DeepCopyInto(out *PerformanceDiagnosticsInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceDiagnosticsInitParameters.
func (in *PerformanceDiagnosticsInitParameters) DeepCopy() *PerformanceDiagnosticsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PerformanceDiagnosticsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceDiagnosticsObservation) DeepCopyInto(out *PerformanceDiagnosticsObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceDiagnosticsObservation.
func (in *PerformanceDiagnosticsObservation) DeepCopy() *PerformanceDiagnosticsObservation {
	if in == nil {
		return nil
	}
	out := new(PerformanceDiagnosticsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceDiagnosticsParameters) DeepCopyInto(out *PerformanceDiagnosticsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceDiagnosticsParameters.
func (in *PerformanceDiagnosticsParameters) DeepCopy() *PerformanceDiagnosticsParameters {
	if in == nil {
		return nil
	}
	out := new(PerformanceDiagnosticsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionInitParameters) DeepCopyInto(out *PermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionInitParameters.
func (in *PermissionInitParameters) DeepCopy() *PermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionObservation) DeepCopyInto(out *PermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionObservation.
func (in *PermissionObservation) DeepCopy() *PermissionObservation {
	if in == nil {
		return nil
	}
	out := new(PermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionParameters) DeepCopyInto(out *PermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionParameters.
func (in *PermissionParameters) DeepCopy() *PermissionParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolerConfigInitParameters) DeepCopyInto(out *PoolerConfigInitParameters) {
	*out = *in
	if in.PoolDiscard != nil {
		in, out := &in.PoolDiscard, &out.PoolDiscard
		*out = new(bool)
		**out = **in
	}
	if in.PoolingMode != nil {
		in, out := &in.PoolingMode, &out.PoolingMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolerConfigInitParameters.
func (in *PoolerConfigInitParameters) DeepCopy() *PoolerConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(PoolerConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolerConfigObservation) DeepCopyInto(out *PoolerConfigObservation) {
	*out = *in
	if in.PoolDiscard != nil {
		in, out := &in.PoolDiscard, &out.PoolDiscard
		*out = new(bool)
		**out = **in
	}
	if in.PoolingMode != nil {
		in, out := &in.PoolingMode, &out.PoolingMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolerConfigObservation.
func (in *PoolerConfigObservation) DeepCopy() *PoolerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(PoolerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolerConfigParameters) DeepCopyInto(out *PoolerConfigParameters) {
	*out = *in
	if in.PoolDiscard != nil {
		in, out := &in.PoolDiscard, &out.PoolDiscard
		*out = new(bool)
		**out = **in
	}
	if in.PoolingMode != nil {
		in, out := &in.PoolingMode, &out.PoolingMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolerConfigParameters.
func (in *PoolerConfigParameters) DeepCopy() *PoolerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(PoolerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlCluster) DeepCopyInto(out *PostgresqlCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlCluster.
func (in *PostgresqlCluster) DeepCopy() *PostgresqlCluster {
	if in == nil {
		return nil
	}
	out := new(PostgresqlCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigAccessInitParameters) DeepCopyInto(out *PostgresqlClusterConfigAccessInitParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigAccessInitParameters.
func (in *PostgresqlClusterConfigAccessInitParameters) DeepCopy() *PostgresqlClusterConfigAccessInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigAccessInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigAccessObservation) DeepCopyInto(out *PostgresqlClusterConfigAccessObservation) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigAccessObservation.
func (in *PostgresqlClusterConfigAccessObservation) DeepCopy() *PostgresqlClusterConfigAccessObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigAccessParameters) DeepCopyInto(out *PostgresqlClusterConfigAccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.DataTransfer != nil {
		in, out := &in.DataTransfer, &out.DataTransfer
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigAccessParameters.
func (in *PostgresqlClusterConfigAccessParameters) DeepCopy() *PostgresqlClusterConfigAccessParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigInitParameters) DeepCopyInto(out *PostgresqlClusterConfigInitParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]PostgresqlClusterConfigAccessInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autofailover != nil {
		in, out := &in.Autofailover, &out.Autofailover
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ConfigBackupWindowStartInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DiskSizeAutoscaling != nil {
		in, out := &in.DiskSizeAutoscaling, &out.DiskSizeAutoscaling
		*out = make([]DiskSizeAutoscalingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]ConfigPerformanceDiagnosticsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PoolerConfig != nil {
		in, out := &in.PoolerConfig, &out.PoolerConfig
		*out = make([]PoolerConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PostgresqlConfig != nil {
		in, out := &in.PostgresqlConfig, &out.PostgresqlConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigInitParameters.
func (in *PostgresqlClusterConfigInitParameters) DeepCopy() *PostgresqlClusterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigObservation) DeepCopyInto(out *PostgresqlClusterConfigObservation) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]PostgresqlClusterConfigAccessObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autofailover != nil {
		in, out := &in.Autofailover, &out.Autofailover
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ConfigBackupWindowStartObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DiskSizeAutoscaling != nil {
		in, out := &in.DiskSizeAutoscaling, &out.DiskSizeAutoscaling
		*out = make([]DiskSizeAutoscalingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]ConfigPerformanceDiagnosticsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PoolerConfig != nil {
		in, out := &in.PoolerConfig, &out.PoolerConfig
		*out = make([]PoolerConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PostgresqlConfig != nil {
		in, out := &in.PostgresqlConfig, &out.PostgresqlConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigObservation.
func (in *PostgresqlClusterConfigObservation) DeepCopy() *PostgresqlClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigParameters) DeepCopyInto(out *PostgresqlClusterConfigParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]PostgresqlClusterConfigAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autofailover != nil {
		in, out := &in.Autofailover, &out.Autofailover
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(float64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ConfigBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DiskSizeAutoscaling != nil {
		in, out := &in.DiskSizeAutoscaling, &out.DiskSizeAutoscaling
		*out = make([]DiskSizeAutoscalingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]ConfigPerformanceDiagnosticsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PoolerConfig != nil {
		in, out := &in.PoolerConfig, &out.PoolerConfig
		*out = make([]PoolerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PostgresqlConfig != nil {
		in, out := &in.PostgresqlConfig, &out.PostgresqlConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigParameters.
func (in *PostgresqlClusterConfigParameters) DeepCopy() *PostgresqlClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterDatabaseInitParameters) DeepCopyInto(out *PostgresqlClusterDatabaseInitParameters) {
	*out = *in
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]ExtensionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.TemplateDB != nil {
		in, out := &in.TemplateDB, &out.TemplateDB
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterDatabaseInitParameters.
func (in *PostgresqlClusterDatabaseInitParameters) DeepCopy() *PostgresqlClusterDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterDatabaseObservation) DeepCopyInto(out *PostgresqlClusterDatabaseObservation) {
	*out = *in
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]ExtensionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.TemplateDB != nil {
		in, out := &in.TemplateDB, &out.TemplateDB
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterDatabaseObservation.
func (in *PostgresqlClusterDatabaseObservation) DeepCopy() *PostgresqlClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterDatabaseParameters) DeepCopyInto(out *PostgresqlClusterDatabaseParameters) {
	*out = *in
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]ExtensionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.TemplateDB != nil {
		in, out := &in.TemplateDB, &out.TemplateDB
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterDatabaseParameters.
func (in *PostgresqlClusterDatabaseParameters) DeepCopy() *PostgresqlClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterHostInitParameters) DeepCopyInto(out *PostgresqlClusterHostInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterHostInitParameters.
func (in *PostgresqlClusterHostInitParameters) DeepCopy() *PostgresqlClusterHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterHostObservation) DeepCopyInto(out *PostgresqlClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationSource != nil {
		in, out := &in.ReplicationSource, &out.ReplicationSource
		*out = new(string)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterHostObservation.
func (in *PostgresqlClusterHostObservation) DeepCopy() *PostgresqlClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterHostParameters) DeepCopyInto(out *PostgresqlClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterHostParameters.
func (in *PostgresqlClusterHostParameters) DeepCopy() *PostgresqlClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterInitParameters) DeepCopyInto(out *PostgresqlClusterInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]PostgresqlClusterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]PostgresqlClusterDatabaseInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]PostgresqlClusterHostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HostMasterName != nil {
		in, out := &in.HostMasterName, &out.HostMasterName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]PostgresqlClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]PostgresqlClusterRestoreInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]PostgresqlClusterUserInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterInitParameters.
func (in *PostgresqlClusterInitParameters) DeepCopy() *PostgresqlClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterList) DeepCopyInto(out *PostgresqlClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PostgresqlCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterList.
func (in *PostgresqlClusterList) DeepCopy() *PostgresqlClusterList {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterMaintenanceWindowInitParameters) DeepCopyInto(out *PostgresqlClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterMaintenanceWindowInitParameters.
func (in *PostgresqlClusterMaintenanceWindowInitParameters) DeepCopy() *PostgresqlClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterMaintenanceWindowObservation) DeepCopyInto(out *PostgresqlClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterMaintenanceWindowObservation.
func (in *PostgresqlClusterMaintenanceWindowObservation) DeepCopy() *PostgresqlClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterMaintenanceWindowParameters) DeepCopyInto(out *PostgresqlClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterMaintenanceWindowParameters.
func (in *PostgresqlClusterMaintenanceWindowParameters) DeepCopy() *PostgresqlClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterObservation) DeepCopyInto(out *PostgresqlClusterObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]PostgresqlClusterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]PostgresqlClusterDatabaseObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]PostgresqlClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HostMasterName != nil {
		in, out := &in.HostMasterName, &out.HostMasterName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]PostgresqlClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]PostgresqlClusterRestoreObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]PostgresqlClusterUserObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterObservation.
func (in *PostgresqlClusterObservation) DeepCopy() *PostgresqlClusterObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterParameters) DeepCopyInto(out *PostgresqlClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]PostgresqlClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]PostgresqlClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]PostgresqlClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HostMasterName != nil {
		in, out := &in.HostMasterName, &out.HostMasterName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]PostgresqlClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]PostgresqlClusterRestoreParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]PostgresqlClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterParameters.
func (in *PostgresqlClusterParameters) DeepCopy() *PostgresqlClusterParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterRestoreInitParameters) DeepCopyInto(out *PostgresqlClusterRestoreInitParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
	if in.TimeInclusive != nil {
		in, out := &in.TimeInclusive, &out.TimeInclusive
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterRestoreInitParameters.
func (in *PostgresqlClusterRestoreInitParameters) DeepCopy() *PostgresqlClusterRestoreInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterRestoreInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterRestoreObservation) DeepCopyInto(out *PostgresqlClusterRestoreObservation) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
	if in.TimeInclusive != nil {
		in, out := &in.TimeInclusive, &out.TimeInclusive
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterRestoreObservation.
func (in *PostgresqlClusterRestoreObservation) DeepCopy() *PostgresqlClusterRestoreObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterRestoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterRestoreParameters) DeepCopyInto(out *PostgresqlClusterRestoreParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
	if in.TimeInclusive != nil {
		in, out := &in.TimeInclusive, &out.TimeInclusive
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterRestoreParameters.
func (in *PostgresqlClusterRestoreParameters) DeepCopy() *PostgresqlClusterRestoreParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterRestoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterSpec) DeepCopyInto(out *PostgresqlClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterSpec.
func (in *PostgresqlClusterSpec) DeepCopy() *PostgresqlClusterSpec {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterStatus) DeepCopyInto(out *PostgresqlClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterStatus.
func (in *PostgresqlClusterStatus) DeepCopy() *PostgresqlClusterStatus {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserInitParameters) DeepCopyInto(out *PostgresqlClusterUserInitParameters) {
	*out = *in
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(float64)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlClusterUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserInitParameters.
func (in *PostgresqlClusterUserInitParameters) DeepCopy() *PostgresqlClusterUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserObservation) DeepCopyInto(out *PostgresqlClusterUserObservation) {
	*out = *in
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(float64)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlClusterUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserObservation.
func (in *PostgresqlClusterUserObservation) DeepCopy() *PostgresqlClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserParameters) DeepCopyInto(out *PostgresqlClusterUserParameters) {
	*out = *in
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(float64)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserParameters.
func (in *PostgresqlClusterUserParameters) DeepCopy() *PostgresqlClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserPermissionInitParameters) DeepCopyInto(out *PostgresqlClusterUserPermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserPermissionInitParameters.
func (in *PostgresqlClusterUserPermissionInitParameters) DeepCopy() *PostgresqlClusterUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserPermissionObservation) DeepCopyInto(out *PostgresqlClusterUserPermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserPermissionObservation.
func (in *PostgresqlClusterUserPermissionObservation) DeepCopy() *PostgresqlClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserPermissionParameters) DeepCopyInto(out *PostgresqlClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserPermissionParameters.
func (in *PostgresqlClusterUserPermissionParameters) DeepCopy() *PostgresqlClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabase) DeepCopyInto(out *PostgresqlDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabase.
func (in *PostgresqlDatabase) DeepCopy() *PostgresqlDatabase {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabase)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseExtensionInitParameters) DeepCopyInto(out *PostgresqlDatabaseExtensionInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseExtensionInitParameters.
func (in *PostgresqlDatabaseExtensionInitParameters) DeepCopy() *PostgresqlDatabaseExtensionInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseExtensionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseExtensionObservation) DeepCopyInto(out *PostgresqlDatabaseExtensionObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseExtensionObservation.
func (in *PostgresqlDatabaseExtensionObservation) DeepCopy() *PostgresqlDatabaseExtensionObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseExtensionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseExtensionParameters) DeepCopyInto(out *PostgresqlDatabaseExtensionParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseExtensionParameters.
func (in *PostgresqlDatabaseExtensionParameters) DeepCopy() *PostgresqlDatabaseExtensionParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseExtensionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseInitParameters) DeepCopyInto(out *PostgresqlDatabaseInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(string)
		**out = **in
	}
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]PostgresqlDatabaseExtensionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.TemplateDB != nil {
		in, out := &in.TemplateDB, &out.TemplateDB
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseInitParameters.
func (in *PostgresqlDatabaseInitParameters) DeepCopy() *PostgresqlDatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseList) DeepCopyInto(out *PostgresqlDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PostgresqlDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseList.
func (in *PostgresqlDatabaseList) DeepCopy() *PostgresqlDatabaseList {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseObservation) DeepCopyInto(out *PostgresqlDatabaseObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(string)
		**out = **in
	}
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]PostgresqlDatabaseExtensionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.TemplateDB != nil {
		in, out := &in.TemplateDB, &out.TemplateDB
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseObservation.
func (in *PostgresqlDatabaseObservation) DeepCopy() *PostgresqlDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseParameters) DeepCopyInto(out *PostgresqlDatabaseParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(string)
		**out = **in
	}
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]PostgresqlDatabaseExtensionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.TemplateDB != nil {
		in, out := &in.TemplateDB, &out.TemplateDB
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseParameters.
func (in *PostgresqlDatabaseParameters) DeepCopy() *PostgresqlDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseSpec) DeepCopyInto(out *PostgresqlDatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseSpec.
func (in *PostgresqlDatabaseSpec) DeepCopy() *PostgresqlDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlDatabaseStatus) DeepCopyInto(out *PostgresqlDatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlDatabaseStatus.
func (in *PostgresqlDatabaseStatus) DeepCopy() *PostgresqlDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(PostgresqlDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUser) DeepCopyInto(out *PostgresqlUser) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUser.
func (in *PostgresqlUser) DeepCopy() *PostgresqlUser {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUser)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlUser) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserInitParameters) DeepCopyInto(out *PostgresqlUserInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(float64)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(string)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlUserPermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserInitParameters.
func (in *PostgresqlUserInitParameters) DeepCopy() *PostgresqlUserInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserList) DeepCopyInto(out *PostgresqlUserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PostgresqlUser, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserList.
func (in *PostgresqlUserList) DeepCopy() *PostgresqlUserList {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlUserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserObservation) DeepCopyInto(out *PostgresqlUserObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(float64)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(string)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlUserPermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserObservation.
func (in *PostgresqlUserObservation) DeepCopy() *PostgresqlUserObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserParameters) DeepCopyInto(out *PostgresqlUserParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRef != nil {
		in, out := &in.ClusterIDRef, &out.ClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(float64)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(string)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserParameters.
func (in *PostgresqlUserParameters) DeepCopy() *PostgresqlUserParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserPermissionInitParameters) DeepCopyInto(out *PostgresqlUserPermissionInitParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserPermissionInitParameters.
func (in *PostgresqlUserPermissionInitParameters) DeepCopy() *PostgresqlUserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserPermissionObservation) DeepCopyInto(out *PostgresqlUserPermissionObservation) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserPermissionObservation.
func (in *PostgresqlUserPermissionObservation) DeepCopy() *PostgresqlUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserPermissionParameters) DeepCopyInto(out *PostgresqlUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserPermissionParameters.
func (in *PostgresqlUserPermissionParameters) DeepCopy() *PostgresqlUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserSpec) DeepCopyInto(out *PostgresqlUserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserSpec.
func (in *PostgresqlUserSpec) DeepCopy() *PostgresqlUserSpec {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlUserStatus) DeepCopyInto(out *PostgresqlUserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlUserStatus.
func (in *PostgresqlUserStatus) DeepCopy() *PostgresqlUserStatus {
	if in == nil {
		return nil
	}
	out := new(PostgresqlUserStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotaInitParameters) DeepCopyInto(out *QuotaInitParameters) {
	*out = *in
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = new(float64)
		**out = **in
	}
	if in.ExecutionTime != nil {
		in, out := &in.ExecutionTime, &out.ExecutionTime
		*out = new(float64)
		**out = **in
	}
	if in.IntervalDuration != nil {
		in, out := &in.IntervalDuration, &out.IntervalDuration
		*out = new(float64)
		**out = **in
	}
	if in.Queries != nil {
		in, out := &in.Queries, &out.Queries
		*out = new(float64)
		**out = **in
	}
	if in.ReadRows != nil {
		in, out := &in.ReadRows, &out.ReadRows
		*out = new(float64)
		**out = **in
	}
	if in.ResultRows != nil {
		in, out := &in.ResultRows, &out.ResultRows
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotaInitParameters.
func (in *QuotaInitParameters) DeepCopy() *QuotaInitParameters {
	if in == nil {
		return nil
	}
	out := new(QuotaInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotaObservation) DeepCopyInto(out *QuotaObservation) {
	*out = *in
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = new(float64)
		**out = **in
	}
	if in.ExecutionTime != nil {
		in, out := &in.ExecutionTime, &out.ExecutionTime
		*out = new(float64)
		**out = **in
	}
	if in.IntervalDuration != nil {
		in, out := &in.IntervalDuration, &out.IntervalDuration
		*out = new(float64)
		**out = **in
	}
	if in.Queries != nil {
		in, out := &in.Queries, &out.Queries
		*out = new(float64)
		**out = **in
	}
	if in.ReadRows != nil {
		in, out := &in.ReadRows, &out.ReadRows
		*out = new(float64)
		**out = **in
	}
	if in.ResultRows != nil {
		in, out := &in.ResultRows, &out.ResultRows
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotaObservation.
func (in *QuotaObservation) DeepCopy() *QuotaObservation {
	if in == nil {
		return nil
	}
	out := new(QuotaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotaParameters) DeepCopyInto(out *QuotaParameters) {
	*out = *in
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = new(float64)
		**out = **in
	}
	if in.ExecutionTime != nil {
		in, out := &in.ExecutionTime, &out.ExecutionTime
		*out = new(float64)
		**out = **in
	}
	if in.IntervalDuration != nil {
		in, out := &in.IntervalDuration, &out.IntervalDuration
		*out = new(float64)
		**out = **in
	}
	if in.Queries != nil {
		in, out := &in.Queries, &out.Queries
		*out = new(float64)
		**out = **in
	}
	if in.ReadRows != nil {
		in, out := &in.ReadRows, &out.ReadRows
		*out = new(float64)
		**out = **in
	}
	if in.ResultRows != nil {
		in, out := &in.ResultRows, &out.ResultRows
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotaParameters.
func (in *QuotaParameters) DeepCopy() *QuotaParameters {
	if in == nil {
		return nil
	}
	out := new(QuotaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitmqInitParameters) DeepCopyInto(out *RabbitmqInitParameters) {
	*out = *in
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Vhost != nil {
		in, out := &in.Vhost, &out.Vhost
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitmqInitParameters.
func (in *RabbitmqInitParameters) DeepCopy() *RabbitmqInitParameters {
	if in == nil {
		return nil
	}
	out := new(RabbitmqInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitmqObservation) DeepCopyInto(out *RabbitmqObservation) {
	*out = *in
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Vhost != nil {
		in, out := &in.Vhost, &out.Vhost
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitmqObservation.
func (in *RabbitmqObservation) DeepCopy() *RabbitmqObservation {
	if in == nil {
		return nil
	}
	out := new(RabbitmqObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitmqParameters) DeepCopyInto(out *RabbitmqParameters) {
	*out = *in
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
	if in.Vhost != nil {
		in, out := &in.Vhost, &out.Vhost
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitmqParameters.
func (in *RabbitmqParameters) DeepCopy() *RabbitmqParameters {
	if in == nil {
		return nil
	}
	out := new(RabbitmqParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisCluster) DeepCopyInto(out *RedisCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisCluster.
func (in *RedisCluster) DeepCopy() *RedisCluster {
	if in == nil {
		return nil
	}
	out := new(RedisCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterConfigInitParameters) DeepCopyInto(out *RedisClusterConfigInitParameters) {
	*out = *in
	if in.ClientOutputBufferLimitNormal != nil {
		in, out := &in.ClientOutputBufferLimitNormal, &out.ClientOutputBufferLimitNormal
		*out = new(string)
		**out = **in
	}
	if in.ClientOutputBufferLimitPubsub != nil {
		in, out := &in.ClientOutputBufferLimitPubsub, &out.ClientOutputBufferLimitPubsub
		*out = new(string)
		**out = **in
	}
	if in.Databases != nil {
		in, out := &in.Databases, &out.Databases
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPercent != nil {
		in, out := &in.MaxmemoryPercent, &out.MaxmemoryPercent
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPolicy != nil {
		in, out := &in.MaxmemoryPolicy, &out.MaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.NotifyKeyspaceEvents != nil {
		in, out := &in.NotifyKeyspaceEvents, &out.NotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	if in.SlowlogLogSlowerThan != nil {
		in, out := &in.SlowlogLogSlowerThan, &out.SlowlogLogSlowerThan
		*out = new(int64)
		**out = **in
	}
	if in.SlowlogMaxLen != nil {
		in, out := &in.SlowlogMaxLen, &out.SlowlogMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterConfigInitParameters.
func (in *RedisClusterConfigInitParameters) DeepCopy() *RedisClusterConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterConfigObservation) DeepCopyInto(out *RedisClusterConfigObservation) {
	*out = *in
	if in.ClientOutputBufferLimitNormal != nil {
		in, out := &in.ClientOutputBufferLimitNormal, &out.ClientOutputBufferLimitNormal
		*out = new(string)
		**out = **in
	}
	if in.ClientOutputBufferLimitPubsub != nil {
		in, out := &in.ClientOutputBufferLimitPubsub, &out.ClientOutputBufferLimitPubsub
		*out = new(string)
		**out = **in
	}
	if in.Databases != nil {
		in, out := &in.Databases, &out.Databases
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPercent != nil {
		in, out := &in.MaxmemoryPercent, &out.MaxmemoryPercent
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPolicy != nil {
		in, out := &in.MaxmemoryPolicy, &out.MaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.NotifyKeyspaceEvents != nil {
		in, out := &in.NotifyKeyspaceEvents, &out.NotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	if in.SlowlogLogSlowerThan != nil {
		in, out := &in.SlowlogLogSlowerThan, &out.SlowlogLogSlowerThan
		*out = new(int64)
		**out = **in
	}
	if in.SlowlogMaxLen != nil {
		in, out := &in.SlowlogMaxLen, &out.SlowlogMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterConfigObservation.
func (in *RedisClusterConfigObservation) DeepCopy() *RedisClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterConfigParameters) DeepCopyInto(out *RedisClusterConfigParameters) {
	*out = *in
	if in.ClientOutputBufferLimitNormal != nil {
		in, out := &in.ClientOutputBufferLimitNormal, &out.ClientOutputBufferLimitNormal
		*out = new(string)
		**out = **in
	}
	if in.ClientOutputBufferLimitPubsub != nil {
		in, out := &in.ClientOutputBufferLimitPubsub, &out.ClientOutputBufferLimitPubsub
		*out = new(string)
		**out = **in
	}
	if in.Databases != nil {
		in, out := &in.Databases, &out.Databases
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPercent != nil {
		in, out := &in.MaxmemoryPercent, &out.MaxmemoryPercent
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPolicy != nil {
		in, out := &in.MaxmemoryPolicy, &out.MaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.NotifyKeyspaceEvents != nil {
		in, out := &in.NotifyKeyspaceEvents, &out.NotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.SlowlogLogSlowerThan != nil {
		in, out := &in.SlowlogLogSlowerThan, &out.SlowlogLogSlowerThan
		*out = new(int64)
		**out = **in
	}
	if in.SlowlogMaxLen != nil {
		in, out := &in.SlowlogMaxLen, &out.SlowlogMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterConfigParameters.
func (in *RedisClusterConfigParameters) DeepCopy() *RedisClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterHostInitParameters) DeepCopyInto(out *RedisClusterHostInitParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.ReplicaPriority != nil {
		in, out := &in.ReplicaPriority, &out.ReplicaPriority
		*out = new(int64)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterHostInitParameters.
func (in *RedisClusterHostInitParameters) DeepCopy() *RedisClusterHostInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterHostInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterHostObservation) DeepCopyInto(out *RedisClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.ReplicaPriority != nil {
		in, out := &in.ReplicaPriority, &out.ReplicaPriority
		*out = new(int64)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterHostObservation.
func (in *RedisClusterHostObservation) DeepCopy() *RedisClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterHostParameters) DeepCopyInto(out *RedisClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.ReplicaPriority != nil {
		in, out := &in.ReplicaPriority, &out.ReplicaPriority
		*out = new(int64)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.SubnetIDRef != nil {
		in, out := &in.SubnetIDRef, &out.SubnetIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SubnetIDSelector != nil {
		in, out := &in.SubnetIDSelector, &out.SubnetIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterHostParameters.
func (in *RedisClusterHostParameters) DeepCopy() *RedisClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterInitParameters) DeepCopyInto(out *RedisClusterInitParameters) {
	*out = *in
	if in.AnnounceHostnames != nil {
		in, out := &in.AnnounceHostnames, &out.AnnounceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]RedisClusterConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]RedisClusterHostInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]RedisClusterMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PersistenceMode != nil {
		in, out := &in.PersistenceMode, &out.PersistenceMode
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]RedisClusterResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Sharded != nil {
		in, out := &in.Sharded, &out.Sharded
		*out = new(bool)
		**out = **in
	}
	if in.TLSEnabled != nil {
		in, out := &in.TLSEnabled, &out.TLSEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterInitParameters.
func (in *RedisClusterInitParameters) DeepCopy() *RedisClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterList) DeepCopyInto(out *RedisClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RedisCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterList.
func (in *RedisClusterList) DeepCopy() *RedisClusterList {
	if in == nil {
		return nil
	}
	out := new(RedisClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterMaintenanceWindowInitParameters) DeepCopyInto(out *RedisClusterMaintenanceWindowInitParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterMaintenanceWindowInitParameters.
func (in *RedisClusterMaintenanceWindowInitParameters) DeepCopy() *RedisClusterMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterMaintenanceWindowObservation) DeepCopyInto(out *RedisClusterMaintenanceWindowObservation) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterMaintenanceWindowObservation.
func (in *RedisClusterMaintenanceWindowObservation) DeepCopy() *RedisClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterMaintenanceWindowParameters) DeepCopyInto(out *RedisClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterMaintenanceWindowParameters.
func (in *RedisClusterMaintenanceWindowParameters) DeepCopy() *RedisClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterObservation) DeepCopyInto(out *RedisClusterObservation) {
	*out = *in
	if in.AnnounceHostnames != nil {
		in, out := &in.AnnounceHostnames, &out.AnnounceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]RedisClusterConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]RedisClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]RedisClusterMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.PersistenceMode != nil {
		in, out := &in.PersistenceMode, &out.PersistenceMode
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]RedisClusterResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Sharded != nil {
		in, out := &in.Sharded, &out.Sharded
		*out = new(bool)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.TLSEnabled != nil {
		in, out := &in.TLSEnabled, &out.TLSEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterObservation.
func (in *RedisClusterObservation) DeepCopy() *RedisClusterObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterParameters) DeepCopyInto(out *RedisClusterParameters) {
	*out = *in
	if in.AnnounceHostnames != nil {
		in, out := &in.AnnounceHostnames, &out.AnnounceHostnames
		*out = new(bool)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]RedisClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]RedisClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]RedisClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.PersistenceMode != nil {
		in, out := &in.PersistenceMode, &out.PersistenceMode
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]RedisClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupIdsRefs != nil {
		in, out := &in.SecurityGroupIdsRefs, &out.SecurityGroupIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIdsSelector != nil {
		in, out := &in.SecurityGroupIdsSelector, &out.SecurityGroupIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Sharded != nil {
		in, out := &in.Sharded, &out.Sharded
		*out = new(bool)
		**out = **in
	}
	if in.TLSEnabled != nil {
		in, out := &in.TLSEnabled, &out.TLSEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterParameters.
func (in *RedisClusterParameters) DeepCopy() *RedisClusterParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterResourcesInitParameters) DeepCopyInto(out *RedisClusterResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterResourcesInitParameters.
func (in *RedisClusterResourcesInitParameters) DeepCopy() *RedisClusterResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterResourcesObservation) DeepCopyInto(out *RedisClusterResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterResourcesObservation.
func (in *RedisClusterResourcesObservation) DeepCopy() *RedisClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterResourcesParameters) DeepCopyInto(out *RedisClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterResourcesParameters.
func (in *RedisClusterResourcesParameters) DeepCopy() *RedisClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterSpec) DeepCopyInto(out *RedisClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterSpec.
func (in *RedisClusterSpec) DeepCopy() *RedisClusterSpec {
	if in == nil {
		return nil
	}
	out := new(RedisClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterStatus) DeepCopyInto(out *RedisClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterStatus.
func (in *RedisClusterStatus) DeepCopy() *RedisClusterStatus {
	if in == nil {
		return nil
	}
	out := new(RedisClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesInitParameters) DeepCopyInto(out *ResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesInitParameters.
func (in *ResourcesInitParameters) DeepCopy() *ResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongocfgInitParameters) DeepCopyInto(out *ResourcesMongocfgInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongocfgInitParameters.
func (in *ResourcesMongocfgInitParameters) DeepCopy() *ResourcesMongocfgInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongocfgInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongocfgObservation) DeepCopyInto(out *ResourcesMongocfgObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongocfgObservation.
func (in *ResourcesMongocfgObservation) DeepCopy() *ResourcesMongocfgObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongocfgObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongocfgParameters) DeepCopyInto(out *ResourcesMongocfgParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongocfgParameters.
func (in *ResourcesMongocfgParameters) DeepCopy() *ResourcesMongocfgParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongocfgParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongodInitParameters) DeepCopyInto(out *ResourcesMongodInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongodInitParameters.
func (in *ResourcesMongodInitParameters) DeepCopy() *ResourcesMongodInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongodInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongodObservation) DeepCopyInto(out *ResourcesMongodObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongodObservation.
func (in *ResourcesMongodObservation) DeepCopy() *ResourcesMongodObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongodObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongodParameters) DeepCopyInto(out *ResourcesMongodParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongodParameters.
func (in *ResourcesMongodParameters) DeepCopy() *ResourcesMongodParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongodParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongoinfraInitParameters) DeepCopyInto(out *ResourcesMongoinfraInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongoinfraInitParameters.
func (in *ResourcesMongoinfraInitParameters) DeepCopy() *ResourcesMongoinfraInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongoinfraInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongoinfraObservation) DeepCopyInto(out *ResourcesMongoinfraObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongoinfraObservation.
func (in *ResourcesMongoinfraObservation) DeepCopy() *ResourcesMongoinfraObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongoinfraObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongoinfraParameters) DeepCopyInto(out *ResourcesMongoinfraParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongoinfraParameters.
func (in *ResourcesMongoinfraParameters) DeepCopy() *ResourcesMongoinfraParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongoinfraParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongosInitParameters) DeepCopyInto(out *ResourcesMongosInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongosInitParameters.
func (in *ResourcesMongosInitParameters) DeepCopy() *ResourcesMongosInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongosInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongosObservation) DeepCopyInto(out *ResourcesMongosObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongosObservation.
func (in *ResourcesMongosObservation) DeepCopy() *ResourcesMongosObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongosObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesMongosParameters) DeepCopyInto(out *ResourcesMongosParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesMongosParameters.
func (in *ResourcesMongosParameters) DeepCopy() *ResourcesMongosParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesMongosParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesObservation) DeepCopyInto(out *ResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesObservation.
func (in *ResourcesObservation) DeepCopy() *ResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesParameters) DeepCopyInto(out *ResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesParameters.
func (in *ResourcesParameters) DeepCopy() *ResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreInitParameters) DeepCopyInto(out *RestoreInitParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreInitParameters.
func (in *RestoreInitParameters) DeepCopy() *RestoreInitParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreObservation) DeepCopyInto(out *RestoreObservation) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreObservation.
func (in *RestoreObservation) DeepCopy() *RestoreObservation {
	if in == nil {
		return nil
	}
	out := new(RestoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreParameters) DeepCopyInto(out *RestoreParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreParameters.
func (in *RestoreParameters) DeepCopy() *RestoreParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionInitParameters) DeepCopyInto(out *RetentionInitParameters) {
	*out = *in
	if in.Age != nil {
		in, out := &in.Age, &out.Age
		*out = new(float64)
		**out = **in
	}
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionInitParameters.
func (in *RetentionInitParameters) DeepCopy() *RetentionInitParameters {
	if in == nil {
		return nil
	}
	out := new(RetentionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionObservation) DeepCopyInto(out *RetentionObservation) {
	*out = *in
	if in.Age != nil {
		in, out := &in.Age, &out.Age
		*out = new(float64)
		**out = **in
	}
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionObservation.
func (in *RetentionObservation) DeepCopy() *RetentionObservation {
	if in == nil {
		return nil
	}
	out := new(RetentionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionParameters) DeepCopyInto(out *RetentionParameters) {
	*out = *in
	if in.Age != nil {
		in, out := &in.Age, &out.Age
		*out = new(float64)
		**out = **in
	}
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionParameters.
func (in *RetentionParameters) DeepCopy() *RetentionParameters {
	if in == nil {
		return nil
	}
	out := new(RetentionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3ConnectionInitParameters) DeepCopyInto(out *S3ConnectionInitParameters) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.ExternalS3 != nil {
		in, out := &in.ExternalS3, &out.ExternalS3
		*out = make([]ExternalS3InitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3ConnectionInitParameters.
func (in *S3ConnectionInitParameters) DeepCopy() *S3ConnectionInitParameters {
	if in == nil {
		return nil
	}
	out := new(S3ConnectionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3ConnectionObservation) DeepCopyInto(out *S3ConnectionObservation) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.ExternalS3 != nil {
		in, out := &in.ExternalS3, &out.ExternalS3
		*out = make([]ExternalS3Observation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3ConnectionObservation.
func (in *S3ConnectionObservation) DeepCopy() *S3ConnectionObservation {
	if in == nil {
		return nil
	}
	out := new(S3ConnectionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *S3ConnectionParameters) DeepCopyInto(out *S3ConnectionParameters) {
	*out = *in
	if in.BucketName != nil {
		in, out := &in.BucketName, &out.BucketName
		*out = new(string)
		**out = **in
	}
	if in.ExternalS3 != nil {
		in, out := &in.ExternalS3, &out.ExternalS3
		*out = make([]ExternalS3Parameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new S3ConnectionParameters.
func (in *S3ConnectionParameters) DeepCopy() *S3ConnectionParameters {
	if in == nil {
		return nil
	}
	out := new(S3ConnectionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecurityInitParameters) DeepCopyInto(out *SecurityInitParameters) {
	*out = *in
	if in.EnableEncryption != nil {
		in, out := &in.EnableEncryption, &out.EnableEncryption
		*out = new(bool)
		**out = **in
	}
	if in.Kmip != nil {
		in, out := &in.Kmip, &out.Kmip
		*out = make([]KmipInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecurityInitParameters.
func (in *SecurityInitParameters) DeepCopy() *SecurityInitParameters {
	if in == nil {
		return nil
	}
	out := new(SecurityInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecurityObservation) DeepCopyInto(out *SecurityObservation) {
	*out = *in
	if in.EnableEncryption != nil {
		in, out := &in.EnableEncryption, &out.EnableEncryption
		*out = new(bool)
		**out = **in
	}
	if in.Kmip != nil {
		in, out := &in.Kmip, &out.Kmip
		*out = make([]KmipObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecurityObservation.
func (in *SecurityObservation) DeepCopy() *SecurityObservation {
	if in == nil {
		return nil
	}
	out := new(SecurityObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SecurityParameters) DeepCopyInto(out *SecurityParameters) {
	*out = *in
	if in.EnableEncryption != nil {
		in, out := &in.EnableEncryption, &out.EnableEncryption
		*out = new(bool)
		**out = **in
	}
	if in.Kmip != nil {
		in, out := &in.Kmip, &out.Kmip
		*out = make([]KmipParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SecurityParameters.
func (in *SecurityParameters) DeepCopy() *SecurityParameters {
	if in == nil {
		return nil
	}
	out := new(SecurityParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SetParameterInitParameters) DeepCopyInto(out *SetParameterInitParameters) {
	*out = *in
	if in.AuditAuthorizationSuccess != nil {
		in, out := &in.AuditAuthorizationSuccess, &out.AuditAuthorizationSuccess
		*out = new(bool)
		**out = **in
	}
	if in.EnableFlowControl != nil {
		in, out := &in.EnableFlowControl, &out.EnableFlowControl
		*out = new(bool)
		**out = **in
	}
	if in.MinSnapshotHistoryWindowInSeconds != nil {
		in, out := &in.MinSnapshotHistoryWindowInSeconds, &out.MinSnapshotHistoryWindowInSeconds
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SetParameterInitParameters.
func (in *SetParameterInitParameters) DeepCopy() *SetParameterInitParameters {
	if in == nil {
		return nil
	}
	out := new(SetParameterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SetParameterObservation) DeepCopyInto(out *SetParameterObservation) {
	*out = *in
	if in.AuditAuthorizationSuccess != nil {
		in, out := &in.AuditAuthorizationSuccess, &out.AuditAuthorizationSuccess
		*out = new(bool)
		**out = **in
	}
	if in.EnableFlowControl != nil {
		in, out := &in.EnableFlowControl, &out.EnableFlowControl
		*out = new(bool)
		**out = **in
	}
	if in.MinSnapshotHistoryWindowInSeconds != nil {
		in, out := &in.MinSnapshotHistoryWindowInSeconds, &out.MinSnapshotHistoryWindowInSeconds
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SetParameterObservation.
func (in *SetParameterObservation) DeepCopy() *SetParameterObservation {
	if in == nil {
		return nil
	}
	out := new(SetParameterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SetParameterParameters) DeepCopyInto(out *SetParameterParameters) {
	*out = *in
	if in.AuditAuthorizationSuccess != nil {
		in, out := &in.AuditAuthorizationSuccess, &out.AuditAuthorizationSuccess
		*out = new(bool)
		**out = **in
	}
	if in.EnableFlowControl != nil {
		in, out := &in.EnableFlowControl, &out.EnableFlowControl
		*out = new(bool)
		**out = **in
	}
	if in.MinSnapshotHistoryWindowInSeconds != nil {
		in, out := &in.MinSnapshotHistoryWindowInSeconds, &out.MinSnapshotHistoryWindowInSeconds
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SetParameterParameters.
func (in *SetParameterParameters) DeepCopy() *SetParameterParameters {
	if in == nil {
		return nil
	}
	out := new(SetParameterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsInitParameters) DeepCopyInto(out *SettingsInitParameters) {
	*out = *in
	if in.EnableSSLCertificateVerification != nil {
		in, out := &in.EnableSSLCertificateVerification, &out.EnableSSLCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.MaxPollIntervalMs != nil {
		in, out := &in.MaxPollIntervalMs, &out.MaxPollIntervalMs
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeoutMs != nil {
		in, out := &in.SessionTimeoutMs, &out.SessionTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsInitParameters.
func (in *SettingsInitParameters) DeepCopy() *SettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsObservation) DeepCopyInto(out *SettingsObservation) {
	*out = *in
	if in.EnableSSLCertificateVerification != nil {
		in, out := &in.EnableSSLCertificateVerification, &out.EnableSSLCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.MaxPollIntervalMs != nil {
		in, out := &in.MaxPollIntervalMs, &out.MaxPollIntervalMs
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeoutMs != nil {
		in, out := &in.SessionTimeoutMs, &out.SessionTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsObservation.
func (in *SettingsObservation) DeepCopy() *SettingsObservation {
	if in == nil {
		return nil
	}
	out := new(SettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsParameters) DeepCopyInto(out *SettingsParameters) {
	*out = *in
	if in.EnableSSLCertificateVerification != nil {
		in, out := &in.EnableSSLCertificateVerification, &out.EnableSSLCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.MaxPollIntervalMs != nil {
		in, out := &in.MaxPollIntervalMs, &out.MaxPollIntervalMs
		*out = new(float64)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
	if in.SessionTimeoutMs != nil {
		in, out := &in.SessionTimeoutMs, &out.SessionTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsParameters.
func (in *SettingsParameters) DeepCopy() *SettingsParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardGroupInitParameters) DeepCopyInto(out *ShardGroupInitParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ShardNames != nil {
		in, out := &in.ShardNames, &out.ShardNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardGroupInitParameters.
func (in *ShardGroupInitParameters) DeepCopy() *ShardGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(ShardGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardGroupObservation) DeepCopyInto(out *ShardGroupObservation) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ShardNames != nil {
		in, out := &in.ShardNames, &out.ShardNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardGroupObservation.
func (in *ShardGroupObservation) DeepCopy() *ShardGroupObservation {
	if in == nil {
		return nil
	}
	out := new(ShardGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardGroupParameters) DeepCopyInto(out *ShardGroupParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ShardNames != nil {
		in, out := &in.ShardNames, &out.ShardNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardGroupParameters.
func (in *ShardGroupParameters) DeepCopy() *ShardGroupParameters {
	if in == nil {
		return nil
	}
	out := new(ShardGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardInitParameters) DeepCopyInto(out *ShardInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ShardResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardInitParameters.
func (in *ShardInitParameters) DeepCopy() *ShardInitParameters {
	if in == nil {
		return nil
	}
	out := new(ShardInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardObservation) DeepCopyInto(out *ShardObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ShardResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardObservation.
func (in *ShardObservation) DeepCopy() *ShardObservation {
	if in == nil {
		return nil
	}
	out := new(ShardObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardParameters) DeepCopyInto(out *ShardParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ShardResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardParameters.
func (in *ShardParameters) DeepCopy() *ShardParameters {
	if in == nil {
		return nil
	}
	out := new(ShardParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardResourcesInitParameters) DeepCopyInto(out *ShardResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardResourcesInitParameters.
func (in *ShardResourcesInitParameters) DeepCopy() *ShardResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ShardResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardResourcesObservation) DeepCopyInto(out *ShardResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardResourcesObservation.
func (in *ShardResourcesObservation) DeepCopy() *ShardResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ShardResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardResourcesParameters) DeepCopyInto(out *ShardResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardResourcesParameters.
func (in *ShardResourcesParameters) DeepCopy() *ShardResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ShardResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceClusterInitParameters) DeepCopyInto(out *SourceClusterInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ExternalCluster != nil {
		in, out := &in.ExternalCluster, &out.ExternalCluster
		*out = make([]ExternalClusterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ThisCluster != nil {
		in, out := &in.ThisCluster, &out.ThisCluster
		*out = make([]ThisClusterInitParameters, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceClusterInitParameters.
func (in *SourceClusterInitParameters) DeepCopy() *SourceClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(SourceClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceClusterObservation) DeepCopyInto(out *SourceClusterObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ExternalCluster != nil {
		in, out := &in.ExternalCluster, &out.ExternalCluster
		*out = make([]ExternalClusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ThisCluster != nil {
		in, out := &in.ThisCluster, &out.ThisCluster
		*out = make([]ThisClusterParameters, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceClusterObservation.
func (in *SourceClusterObservation) DeepCopy() *SourceClusterObservation {
	if in == nil {
		return nil
	}
	out := new(SourceClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SourceClusterParameters) DeepCopyInto(out *SourceClusterParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ExternalCluster != nil {
		in, out := &in.ExternalCluster, &out.ExternalCluster
		*out = make([]ExternalClusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ThisCluster != nil {
		in, out := &in.ThisCluster, &out.ThisCluster
		*out = make([]ThisClusterParameters, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SourceClusterParameters.
func (in *SourceClusterParameters) DeepCopy() *SourceClusterParameters {
	if in == nil {
		return nil
	}
	out := new(SourceClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageInitParameters) DeepCopyInto(out *StorageInitParameters) {
	*out = *in
	if in.WiredTiger != nil {
		in, out := &in.WiredTiger, &out.WiredTiger
		*out = make([]WiredTigerInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageInitParameters.
func (in *StorageInitParameters) DeepCopy() *StorageInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageObservation) DeepCopyInto(out *StorageObservation) {
	*out = *in
	if in.WiredTiger != nil {
		in, out := &in.WiredTiger, &out.WiredTiger
		*out = make([]WiredTigerObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageObservation.
func (in *StorageObservation) DeepCopy() *StorageObservation {
	if in == nil {
		return nil
	}
	out := new(StorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageParameters) DeepCopyInto(out *StorageParameters) {
	*out = *in
	if in.WiredTiger != nil {
		in, out := &in.WiredTiger, &out.WiredTiger
		*out = make([]WiredTigerParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageParameters.
func (in *StorageParameters) DeepCopy() *StorageParameters {
	if in == nil {
		return nil
	}
	out := new(StorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageWiredTigerInitParameters) DeepCopyInto(out *StorageWiredTigerInitParameters) {
	*out = *in
	if in.BlockCompressor != nil {
		in, out := &in.BlockCompressor, &out.BlockCompressor
		*out = new(string)
		**out = **in
	}
	if in.CacheSizeGb != nil {
		in, out := &in.CacheSizeGb, &out.CacheSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.PrefixCompression != nil {
		in, out := &in.PrefixCompression, &out.PrefixCompression
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageWiredTigerInitParameters.
func (in *StorageWiredTigerInitParameters) DeepCopy() *StorageWiredTigerInitParameters {
	if in == nil {
		return nil
	}
	out := new(StorageWiredTigerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageWiredTigerObservation) DeepCopyInto(out *StorageWiredTigerObservation) {
	*out = *in
	if in.BlockCompressor != nil {
		in, out := &in.BlockCompressor, &out.BlockCompressor
		*out = new(string)
		**out = **in
	}
	if in.CacheSizeGb != nil {
		in, out := &in.CacheSizeGb, &out.CacheSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.PrefixCompression != nil {
		in, out := &in.PrefixCompression, &out.PrefixCompression
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageWiredTigerObservation.
func (in *StorageWiredTigerObservation) DeepCopy() *StorageWiredTigerObservation {
	if in == nil {
		return nil
	}
	out := new(StorageWiredTigerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageWiredTigerParameters) DeepCopyInto(out *StorageWiredTigerParameters) {
	*out = *in
	if in.BlockCompressor != nil {
		in, out := &in.BlockCompressor, &out.BlockCompressor
		*out = new(string)
		**out = **in
	}
	if in.CacheSizeGb != nil {
		in, out := &in.CacheSizeGb, &out.CacheSizeGb
		*out = new(float64)
		**out = **in
	}
	if in.PrefixCompression != nil {
		in, out := &in.PrefixCompression, &out.PrefixCompression
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageWiredTigerParameters.
func (in *StorageWiredTigerParameters) DeepCopy() *StorageWiredTigerParameters {
	if in == nil {
		return nil
	}
	out := new(StorageWiredTigerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterExternalClusterInitParameters) DeepCopyInto(out *TargetClusterExternalClusterInitParameters) {
	*out = *in
	if in.BootstrapServers != nil {
		in, out := &in.BootstrapServers, &out.BootstrapServers
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterExternalClusterInitParameters.
func (in *TargetClusterExternalClusterInitParameters) DeepCopy() *TargetClusterExternalClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(TargetClusterExternalClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterExternalClusterObservation) DeepCopyInto(out *TargetClusterExternalClusterObservation) {
	*out = *in
	if in.BootstrapServers != nil {
		in, out := &in.BootstrapServers, &out.BootstrapServers
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterExternalClusterObservation.
func (in *TargetClusterExternalClusterObservation) DeepCopy() *TargetClusterExternalClusterObservation {
	if in == nil {
		return nil
	}
	out := new(TargetClusterExternalClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterExternalClusterParameters) DeepCopyInto(out *TargetClusterExternalClusterParameters) {
	*out = *in
	if in.BootstrapServers != nil {
		in, out := &in.BootstrapServers, &out.BootstrapServers
		*out = new(string)
		**out = **in
	}
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterExternalClusterParameters.
func (in *TargetClusterExternalClusterParameters) DeepCopy() *TargetClusterExternalClusterParameters {
	if in == nil {
		return nil
	}
	out := new(TargetClusterExternalClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterInitParameters) DeepCopyInto(out *TargetClusterInitParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ExternalCluster != nil {
		in, out := &in.ExternalCluster, &out.ExternalCluster
		*out = make([]TargetClusterExternalClusterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ThisCluster != nil {
		in, out := &in.ThisCluster, &out.ThisCluster
		*out = make([]TargetClusterThisClusterInitParameters, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterInitParameters.
func (in *TargetClusterInitParameters) DeepCopy() *TargetClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(TargetClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterObservation) DeepCopyInto(out *TargetClusterObservation) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ExternalCluster != nil {
		in, out := &in.ExternalCluster, &out.ExternalCluster
		*out = make([]TargetClusterExternalClusterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ThisCluster != nil {
		in, out := &in.ThisCluster, &out.ThisCluster
		*out = make([]TargetClusterThisClusterParameters, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterObservation.
func (in *TargetClusterObservation) DeepCopy() *TargetClusterObservation {
	if in == nil {
		return nil
	}
	out := new(TargetClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterParameters) DeepCopyInto(out *TargetClusterParameters) {
	*out = *in
	if in.Alias != nil {
		in, out := &in.Alias, &out.Alias
		*out = new(string)
		**out = **in
	}
	if in.ExternalCluster != nil {
		in, out := &in.ExternalCluster, &out.ExternalCluster
		*out = make([]TargetClusterExternalClusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ThisCluster != nil {
		in, out := &in.ThisCluster, &out.ThisCluster
		*out = make([]TargetClusterThisClusterParameters, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterParameters.
func (in *TargetClusterParameters) DeepCopy() *TargetClusterParameters {
	if in == nil {
		return nil
	}
	out := new(TargetClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterThisClusterInitParameters) DeepCopyInto(out *TargetClusterThisClusterInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterThisClusterInitParameters.
func (in *TargetClusterThisClusterInitParameters) DeepCopy() *TargetClusterThisClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(TargetClusterThisClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterThisClusterObservation) DeepCopyInto(out *TargetClusterThisClusterObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterThisClusterObservation.
func (in *TargetClusterThisClusterObservation) DeepCopy() *TargetClusterThisClusterObservation {
	if in == nil {
		return nil
	}
	out := new(TargetClusterThisClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TargetClusterThisClusterParameters) DeepCopyInto(out *TargetClusterThisClusterParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TargetClusterThisClusterParameters.
func (in *TargetClusterThisClusterParameters) DeepCopy() *TargetClusterThisClusterParameters {
	if in == nil {
		return nil
	}
	out := new(TargetClusterThisClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThisClusterInitParameters) DeepCopyInto(out *ThisClusterInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThisClusterInitParameters.
func (in *ThisClusterInitParameters) DeepCopy() *ThisClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ThisClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThisClusterObservation) DeepCopyInto(out *ThisClusterObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThisClusterObservation.
func (in *ThisClusterObservation) DeepCopy() *ThisClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ThisClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ThisClusterParameters) DeepCopyInto(out *ThisClusterParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ThisClusterParameters.
func (in *ThisClusterParameters) DeepCopy() *ThisClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ThisClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConfigInitParameters) DeepCopyInto(out *TopicConfigInitParameters) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConfigInitParameters.
func (in *TopicConfigInitParameters) DeepCopy() *TopicConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConfigObservation) DeepCopyInto(out *TopicConfigObservation) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConfigObservation.
func (in *TopicConfigObservation) DeepCopy() *TopicConfigObservation {
	if in == nil {
		return nil
	}
	out := new(TopicConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConfigParameters) DeepCopyInto(out *TopicConfigParameters) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConfigParameters.
func (in *TopicConfigParameters) DeepCopy() *TopicConfigParameters {
	if in == nil {
		return nil
	}
	out := new(TopicConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicInitParameters) DeepCopyInto(out *TopicInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]TopicConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicInitParameters.
func (in *TopicInitParameters) DeepCopy() *TopicInitParameters {
	if in == nil {
		return nil
	}
	out := new(TopicInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicObservation) DeepCopyInto(out *TopicObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]TopicConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicObservation.
func (in *TopicObservation) DeepCopy() *TopicObservation {
	if in == nil {
		return nil
	}
	out := new(TopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicParameters) DeepCopyInto(out *TopicParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]TopicConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicParameters.
func (in *TopicParameters) DeepCopy() *TopicParameters {
	if in == nil {
		return nil
	}
	out := new(TopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserInitParameters) DeepCopyInto(out *UserInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PermissionInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Quota != nil {
		in, out := &in.Quota, &out.Quota
		*out = make([]QuotaInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]UserSettingsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserInitParameters.
func (in *UserInitParameters) DeepCopy() *UserInitParameters {
	if in == nil {
		return nil
	}
	out := new(UserInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserObservation) DeepCopyInto(out *UserObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PermissionObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Quota != nil {
		in, out := &in.Quota, &out.Quota
		*out = make([]QuotaObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]UserSettingsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserObservation.
func (in *UserObservation) DeepCopy() *UserObservation {
	if in == nil {
		return nil
	}
	out := new(UserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserParameters) DeepCopyInto(out *UserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Quota != nil {
		in, out := &in.Quota, &out.Quota
		*out = make([]QuotaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]UserSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserParameters.
func (in *UserParameters) DeepCopy() *UserParameters {
	if in == nil {
		return nil
	}
	out := new(UserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionInitParameters) DeepCopyInto(out *UserPermissionInitParameters) {
	*out = *in
	if in.AllowHosts != nil {
		in, out := &in.AllowHosts, &out.AllowHosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionInitParameters.
func (in *UserPermissionInitParameters) DeepCopy() *UserPermissionInitParameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionObservation) DeepCopyInto(out *UserPermissionObservation) {
	*out = *in
	if in.AllowHosts != nil {
		in, out := &in.AllowHosts, &out.AllowHosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionObservation.
func (in *UserPermissionObservation) DeepCopy() *UserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(UserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionParameters) DeepCopyInto(out *UserPermissionParameters) {
	*out = *in
	if in.AllowHosts != nil {
		in, out := &in.AllowHosts, &out.AllowHosts
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionParameters.
func (in *UserPermissionParameters) DeepCopy() *UserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSettingsInitParameters) DeepCopyInto(out *UserSettingsInitParameters) {
	*out = *in
	if in.AddHTTPCorsHeader != nil {
		in, out := &in.AddHTTPCorsHeader, &out.AddHTTPCorsHeader
		*out = new(bool)
		**out = **in
	}
	if in.AllowDdl != nil {
		in, out := &in.AllowDdl, &out.AllowDdl
		*out = new(bool)
		**out = **in
	}
	if in.AllowIntrospectionFunctions != nil {
		in, out := &in.AllowIntrospectionFunctions, &out.AllowIntrospectionFunctions
		*out = new(bool)
		**out = **in
	}
	if in.AllowSuspiciousLowCardinalityTypes != nil {
		in, out := &in.AllowSuspiciousLowCardinalityTypes, &out.AllowSuspiciousLowCardinalityTypes
		*out = new(bool)
		**out = **in
	}
	if in.AsyncInsert != nil {
		in, out := &in.AsyncInsert, &out.AsyncInsert
		*out = new(bool)
		**out = **in
	}
	if in.AsyncInsertBusyTimeout != nil {
		in, out := &in.AsyncInsertBusyTimeout, &out.AsyncInsertBusyTimeout
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertMaxDataSize != nil {
		in, out := &in.AsyncInsertMaxDataSize, &out.AsyncInsertMaxDataSize
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertStaleTimeout != nil {
		in, out := &in.AsyncInsertStaleTimeout, &out.AsyncInsertStaleTimeout
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertThreads != nil {
		in, out := &in.AsyncInsertThreads, &out.AsyncInsertThreads
		*out = new(float64)
		**out = **in
	}
	if in.CancelHTTPReadonlyQueriesOnClientClose != nil {
		in, out := &in.CancelHTTPReadonlyQueriesOnClientClose, &out.CancelHTTPReadonlyQueriesOnClientClose
		*out = new(bool)
		**out = **in
	}
	if in.Compile != nil {
		in, out := &in.Compile, &out.Compile
		*out = new(bool)
		**out = **in
	}
	if in.CompileExpressions != nil {
		in, out := &in.CompileExpressions, &out.CompileExpressions
		*out = new(bool)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.ConnectTimeoutWithFailover != nil {
		in, out := &in.ConnectTimeoutWithFailover, &out.ConnectTimeoutWithFailover
		*out = new(float64)
		**out = **in
	}
	if in.CountDistinctImplementation != nil {
		in, out := &in.CountDistinctImplementation, &out.CountDistinctImplementation
		*out = new(string)
		**out = **in
	}
	if in.DistinctOverflowMode != nil {
		in, out := &in.DistinctOverflowMode, &out.DistinctOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.DistributedAggregationMemoryEfficient != nil {
		in, out := &in.DistributedAggregationMemoryEfficient, &out.DistributedAggregationMemoryEfficient
		*out = new(bool)
		**out = **in
	}
	if in.DistributedDdlTaskTimeout != nil {
		in, out := &in.DistributedDdlTaskTimeout, &out.DistributedDdlTaskTimeout
		*out = new(float64)
		**out = **in
	}
	if in.DistributedProductMode != nil {
		in, out := &in.DistributedProductMode, &out.DistributedProductMode
		*out = new(string)
		**out = **in
	}
	if in.EmptyResultForAggregationByEmptySet != nil {
		in, out := &in.EmptyResultForAggregationByEmptySet, &out.EmptyResultForAggregationByEmptySet
		*out = new(bool)
		**out = **in
	}
	if in.EnableHTTPCompression != nil {
		in, out := &in.EnableHTTPCompression, &out.EnableHTTPCompression
		*out = new(bool)
		**out = **in
	}
	if in.FallbackToStaleReplicasForDistributedQueries != nil {
		in, out := &in.FallbackToStaleReplicasForDistributedQueries, &out.FallbackToStaleReplicasForDistributedQueries
		*out = new(bool)
		**out = **in
	}
	if in.FlattenNested != nil {
		in, out := &in.FlattenNested, &out.FlattenNested
		*out = new(bool)
		**out = **in
	}
	if in.ForceIndexByDate != nil {
		in, out := &in.ForceIndexByDate, &out.ForceIndexByDate
		*out = new(bool)
		**out = **in
	}
	if in.ForcePrimaryKey != nil {
		in, out := &in.ForcePrimaryKey, &out.ForcePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.GroupByOverflowMode != nil {
		in, out := &in.GroupByOverflowMode, &out.GroupByOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.GroupByTwoLevelThreshold != nil {
		in, out := &in.GroupByTwoLevelThreshold, &out.GroupByTwoLevelThreshold
		*out = new(float64)
		**out = **in
	}
	if in.GroupByTwoLevelThresholdBytes != nil {
		in, out := &in.GroupByTwoLevelThresholdBytes, &out.GroupByTwoLevelThresholdBytes
		*out = new(float64)
		**out = **in
	}
	if in.HTTPConnectionTimeout != nil {
		in, out := &in.HTTPConnectionTimeout, &out.HTTPConnectionTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HTTPHeadersProgressInterval != nil {
		in, out := &in.HTTPHeadersProgressInterval, &out.HTTPHeadersProgressInterval
		*out = new(float64)
		**out = **in
	}
	if in.HTTPReceiveTimeout != nil {
		in, out := &in.HTTPReceiveTimeout, &out.HTTPReceiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HTTPSendTimeout != nil {
		in, out := &in.HTTPSendTimeout, &out.HTTPSendTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InputFormatDefaultsForOmittedFields != nil {
		in, out := &in.InputFormatDefaultsForOmittedFields, &out.InputFormatDefaultsForOmittedFields
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatImportNestedJSON != nil {
		in, out := &in.InputFormatImportNestedJSON, &out.InputFormatImportNestedJSON
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatParallelParsing != nil {
		in, out := &in.InputFormatParallelParsing, &out.InputFormatParallelParsing
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatValuesInterpretExpressions != nil {
		in, out := &in.InputFormatValuesInterpretExpressions, &out.InputFormatValuesInterpretExpressions
		*out = new(bool)
		**out = **in
	}
	if in.InsertKeeperMaxRetries != nil {
		in, out := &in.InsertKeeperMaxRetries, &out.InsertKeeperMaxRetries
		*out = new(float64)
		**out = **in
	}
	if in.InsertNullAsDefault != nil {
		in, out := &in.InsertNullAsDefault, &out.InsertNullAsDefault
		*out = new(bool)
		**out = **in
	}
	if in.InsertQuorum != nil {
		in, out := &in.InsertQuorum, &out.InsertQuorum
		*out = new(float64)
		**out = **in
	}
	if in.InsertQuorumTimeout != nil {
		in, out := &in.InsertQuorumTimeout, &out.InsertQuorumTimeout
		*out = new(float64)
		**out = **in
	}
	if in.JoinOverflowMode != nil {
		in, out := &in.JoinOverflowMode, &out.JoinOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.JoinUseNulls != nil {
		in, out := &in.JoinUseNulls, &out.JoinUseNulls
		*out = new(bool)
		**out = **in
	}
	if in.JoinedSubqueryRequiresAlias != nil {
		in, out := &in.JoinedSubqueryRequiresAlias, &out.JoinedSubqueryRequiresAlias
		*out = new(bool)
		**out = **in
	}
	if in.LocalFilesystemReadMethod != nil {
		in, out := &in.LocalFilesystemReadMethod, &out.LocalFilesystemReadMethod
		*out = new(string)
		**out = **in
	}
	if in.LowCardinalityAllowInNativeFormat != nil {
		in, out := &in.LowCardinalityAllowInNativeFormat, &out.LowCardinalityAllowInNativeFormat
		*out = new(bool)
		**out = **in
	}
	if in.MaxAstDepth != nil {
		in, out := &in.MaxAstDepth, &out.MaxAstDepth
		*out = new(float64)
		**out = **in
	}
	if in.MaxAstElements != nil {
		in, out := &in.MaxAstElements, &out.MaxAstElements
		*out = new(float64)
		**out = **in
	}
	if in.MaxBlockSize != nil {
		in, out := &in.MaxBlockSize, &out.MaxBlockSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalGroupBy != nil {
		in, out := &in.MaxBytesBeforeExternalGroupBy, &out.MaxBytesBeforeExternalGroupBy
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalSort != nil {
		in, out := &in.MaxBytesBeforeExternalSort, &out.MaxBytesBeforeExternalSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInDistinct != nil {
		in, out := &in.MaxBytesInDistinct, &out.MaxBytesInDistinct
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInJoin != nil {
		in, out := &in.MaxBytesInJoin, &out.MaxBytesInJoin
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInSet != nil {
		in, out := &in.MaxBytesInSet, &out.MaxBytesInSet
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToRead != nil {
		in, out := &in.MaxBytesToRead, &out.MaxBytesToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToSort != nil {
		in, out := &in.MaxBytesToSort, &out.MaxBytesToSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToTransfer != nil {
		in, out := &in.MaxBytesToTransfer, &out.MaxBytesToTransfer
		*out = new(float64)
		**out = **in
	}
	if in.MaxColumnsToRead != nil {
		in, out := &in.MaxColumnsToRead, &out.MaxColumnsToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrentQueriesForUser != nil {
		in, out := &in.MaxConcurrentQueriesForUser, &out.MaxConcurrentQueriesForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxExecutionTime != nil {
		in, out := &in.MaxExecutionTime, &out.MaxExecutionTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxExpandedAstElements != nil {
		in, out := &in.MaxExpandedAstElements, &out.MaxExpandedAstElements
		*out = new(float64)
		**out = **in
	}
	if in.MaxFinalThreads != nil {
		in, out := &in.MaxFinalThreads, &out.MaxFinalThreads
		*out = new(float64)
		**out = **in
	}
	if in.MaxHTTPGetRedirects != nil {
		in, out := &in.MaxHTTPGetRedirects, &out.MaxHTTPGetRedirects
		*out = new(float64)
		**out = **in
	}
	if in.MaxInsertBlockSize != nil {
		in, out := &in.MaxInsertBlockSize, &out.MaxInsertBlockSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxMemoryUsage != nil {
		in, out := &in.MaxMemoryUsage, &out.MaxMemoryUsage
		*out = new(float64)
		**out = **in
	}
	if in.MaxMemoryUsageForUser != nil {
		in, out := &in.MaxMemoryUsageForUser, &out.MaxMemoryUsageForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxNetworkBandwidth != nil {
		in, out := &in.MaxNetworkBandwidth, &out.MaxNetworkBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.MaxNetworkBandwidthForUser != nil {
		in, out := &in.MaxNetworkBandwidthForUser, &out.MaxNetworkBandwidthForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxParserDepth != nil {
		in, out := &in.MaxParserDepth, &out.MaxParserDepth
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuerySize != nil {
		in, out := &in.MaxQuerySize, &out.MaxQuerySize
		*out = new(float64)
		**out = **in
	}
	if in.MaxReadBufferSize != nil {
		in, out := &in.MaxReadBufferSize, &out.MaxReadBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplicaDelayForDistributedQueries != nil {
		in, out := &in.MaxReplicaDelayForDistributedQueries, &out.MaxReplicaDelayForDistributedQueries
		*out = new(float64)
		**out = **in
	}
	if in.MaxResultBytes != nil {
		in, out := &in.MaxResultBytes, &out.MaxResultBytes
		*out = new(float64)
		**out = **in
	}
	if in.MaxResultRows != nil {
		in, out := &in.MaxResultRows, &out.MaxResultRows
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInDistinct != nil {
		in, out := &in.MaxRowsInDistinct, &out.MaxRowsInDistinct
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInJoin != nil {
		in, out := &in.MaxRowsInJoin, &out.MaxRowsInJoin
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInSet != nil {
		in, out := &in.MaxRowsInSet, &out.MaxRowsInSet
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToGroupBy != nil {
		in, out := &in.MaxRowsToGroupBy, &out.MaxRowsToGroupBy
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToRead != nil {
		in, out := &in.MaxRowsToRead, &out.MaxRowsToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToSort != nil {
		in, out := &in.MaxRowsToSort, &out.MaxRowsToSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToTransfer != nil {
		in, out := &in.MaxRowsToTransfer, &out.MaxRowsToTransfer
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryColumns != nil {
		in, out := &in.MaxTemporaryColumns, &out.MaxTemporaryColumns
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryDataOnDiskSizeForQuery != nil {
		in, out := &in.MaxTemporaryDataOnDiskSizeForQuery, &out.MaxTemporaryDataOnDiskSizeForQuery
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryDataOnDiskSizeForUser != nil {
		in, out := &in.MaxTemporaryDataOnDiskSizeForUser, &out.MaxTemporaryDataOnDiskSizeForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryNonConstColumns != nil {
		in, out := &in.MaxTemporaryNonConstColumns, &out.MaxTemporaryNonConstColumns
		*out = new(float64)
		**out = **in
	}
	if in.MaxThreads != nil {
		in, out := &in.MaxThreads, &out.MaxThreads
		*out = new(float64)
		**out = **in
	}
	if in.MemoryOvercommitRatioDenominator != nil {
		in, out := &in.MemoryOvercommitRatioDenominator, &out.MemoryOvercommitRatioDenominator
		*out = new(float64)
		**out = **in
	}
	if in.MemoryOvercommitRatioDenominatorForUser != nil {
		in, out := &in.MemoryOvercommitRatioDenominatorForUser, &out.MemoryOvercommitRatioDenominatorForUser
		*out = new(float64)
		**out = **in
	}
	if in.MemoryProfilerSampleProbability != nil {
		in, out := &in.MemoryProfilerSampleProbability, &out.MemoryProfilerSampleProbability
		*out = new(float64)
		**out = **in
	}
	if in.MemoryProfilerStep != nil {
		in, out := &in.MemoryProfilerStep, &out.MemoryProfilerStep
		*out = new(float64)
		**out = **in
	}
	if in.MemoryUsageOvercommitMaxWaitMicroseconds != nil {
		in, out := &in.MemoryUsageOvercommitMaxWaitMicroseconds, &out.MemoryUsageOvercommitMaxWaitMicroseconds
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMaxBytesToUseCache != nil {
		in, out := &in.MergeTreeMaxBytesToUseCache, &out.MergeTreeMaxBytesToUseCache
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMaxRowsToUseCache != nil {
		in, out := &in.MergeTreeMaxRowsToUseCache, &out.MergeTreeMaxRowsToUseCache
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMinBytesForConcurrentRead != nil {
		in, out := &in.MergeTreeMinBytesForConcurrentRead, &out.MergeTreeMinBytesForConcurrentRead
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMinRowsForConcurrentRead != nil {
		in, out := &in.MergeTreeMinRowsForConcurrentRead, &out.MergeTreeMinRowsForConcurrentRead
		*out = new(float64)
		**out = **in
	}
	if in.MinBytesToUseDirectIo != nil {
		in, out := &in.MinBytesToUseDirectIo, &out.MinBytesToUseDirectIo
		*out = new(float64)
		**out = **in
	}
	if in.MinCountToCompile != nil {
		in, out := &in.MinCountToCompile, &out.MinCountToCompile
		*out = new(float64)
		**out = **in
	}
	if in.MinCountToCompileExpression != nil {
		in, out := &in.MinCountToCompileExpression, &out.MinCountToCompileExpression
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutionSpeed != nil {
		in, out := &in.MinExecutionSpeed, &out.MinExecutionSpeed
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutionSpeedBytes != nil {
		in, out := &in.MinExecutionSpeedBytes, &out.MinExecutionSpeedBytes
		*out = new(float64)
		**out = **in
	}
	if in.MinInsertBlockSizeBytes != nil {
		in, out := &in.MinInsertBlockSizeBytes, &out.MinInsertBlockSizeBytes
		*out = new(float64)
		**out = **in
	}
	if in.MinInsertBlockSizeRows != nil {
		in, out := &in.MinInsertBlockSizeRows, &out.MinInsertBlockSizeRows
		*out = new(float64)
		**out = **in
	}
	if in.OutputFormatJSONQuote64BitIntegers != nil {
		in, out := &in.OutputFormatJSONQuote64BitIntegers, &out.OutputFormatJSONQuote64BitIntegers
		*out = new(bool)
		**out = **in
	}
	if in.OutputFormatJSONQuoteDenormals != nil {
		in, out := &in.OutputFormatJSONQuoteDenormals, &out.OutputFormatJSONQuoteDenormals
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.QuotaMode != nil {
		in, out := &in.QuotaMode, &out.QuotaMode
		*out = new(string)
		**out = **in
	}
	if in.ReadOverflowMode != nil {
		in, out := &in.ReadOverflowMode, &out.ReadOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(float64)
		**out = **in
	}
	if in.ReceiveTimeout != nil {
		in, out := &in.ReceiveTimeout, &out.ReceiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RemoteFilesystemReadMethod != nil {
		in, out := &in.RemoteFilesystemReadMethod, &out.RemoteFilesystemReadMethod
		*out = new(string)
		**out = **in
	}
	if in.ReplicationAlterPartitionsSync != nil {
		in, out := &in.ReplicationAlterPartitionsSync, &out.ReplicationAlterPartitionsSync
		*out = new(float64)
		**out = **in
	}
	if in.ResultOverflowMode != nil {
		in, out := &in.ResultOverflowMode, &out.ResultOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SelectSequentialConsistency != nil {
		in, out := &in.SelectSequentialConsistency, &out.SelectSequentialConsistency
		*out = new(bool)
		**out = **in
	}
	if in.SendProgressInHTTPHeaders != nil {
		in, out := &in.SendProgressInHTTPHeaders, &out.SendProgressInHTTPHeaders
		*out = new(bool)
		**out = **in
	}
	if in.SendTimeout != nil {
		in, out := &in.SendTimeout, &out.SendTimeout
		*out = new(float64)
		**out = **in
	}
	if in.SetOverflowMode != nil {
		in, out := &in.SetOverflowMode, &out.SetOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SkipUnavailableShards != nil {
		in, out := &in.SkipUnavailableShards, &out.SkipUnavailableShards
		*out = new(bool)
		**out = **in
	}
	if in.SortOverflowMode != nil {
		in, out := &in.SortOverflowMode, &out.SortOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TimeoutBeforeCheckingExecutionSpeed != nil {
		in, out := &in.TimeoutBeforeCheckingExecutionSpeed, &out.TimeoutBeforeCheckingExecutionSpeed
		*out = new(float64)
		**out = **in
	}
	if in.TimeoutOverflowMode != nil {
		in, out := &in.TimeoutOverflowMode, &out.TimeoutOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransferOverflowMode != nil {
		in, out := &in.TransferOverflowMode, &out.TransferOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransformNullIn != nil {
		in, out := &in.TransformNullIn, &out.TransformNullIn
		*out = new(bool)
		**out = **in
	}
	if in.UseUncompressedCache != nil {
		in, out := &in.UseUncompressedCache, &out.UseUncompressedCache
		*out = new(bool)
		**out = **in
	}
	if in.WaitForAsyncInsert != nil {
		in, out := &in.WaitForAsyncInsert, &out.WaitForAsyncInsert
		*out = new(bool)
		**out = **in
	}
	if in.WaitForAsyncInsertTimeout != nil {
		in, out := &in.WaitForAsyncInsertTimeout, &out.WaitForAsyncInsertTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSettingsInitParameters.
func (in *UserSettingsInitParameters) DeepCopy() *UserSettingsInitParameters {
	if in == nil {
		return nil
	}
	out := new(UserSettingsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSettingsObservation) DeepCopyInto(out *UserSettingsObservation) {
	*out = *in
	if in.AddHTTPCorsHeader != nil {
		in, out := &in.AddHTTPCorsHeader, &out.AddHTTPCorsHeader
		*out = new(bool)
		**out = **in
	}
	if in.AllowDdl != nil {
		in, out := &in.AllowDdl, &out.AllowDdl
		*out = new(bool)
		**out = **in
	}
	if in.AllowIntrospectionFunctions != nil {
		in, out := &in.AllowIntrospectionFunctions, &out.AllowIntrospectionFunctions
		*out = new(bool)
		**out = **in
	}
	if in.AllowSuspiciousLowCardinalityTypes != nil {
		in, out := &in.AllowSuspiciousLowCardinalityTypes, &out.AllowSuspiciousLowCardinalityTypes
		*out = new(bool)
		**out = **in
	}
	if in.AsyncInsert != nil {
		in, out := &in.AsyncInsert, &out.AsyncInsert
		*out = new(bool)
		**out = **in
	}
	if in.AsyncInsertBusyTimeout != nil {
		in, out := &in.AsyncInsertBusyTimeout, &out.AsyncInsertBusyTimeout
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertMaxDataSize != nil {
		in, out := &in.AsyncInsertMaxDataSize, &out.AsyncInsertMaxDataSize
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertStaleTimeout != nil {
		in, out := &in.AsyncInsertStaleTimeout, &out.AsyncInsertStaleTimeout
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertThreads != nil {
		in, out := &in.AsyncInsertThreads, &out.AsyncInsertThreads
		*out = new(float64)
		**out = **in
	}
	if in.CancelHTTPReadonlyQueriesOnClientClose != nil {
		in, out := &in.CancelHTTPReadonlyQueriesOnClientClose, &out.CancelHTTPReadonlyQueriesOnClientClose
		*out = new(bool)
		**out = **in
	}
	if in.Compile != nil {
		in, out := &in.Compile, &out.Compile
		*out = new(bool)
		**out = **in
	}
	if in.CompileExpressions != nil {
		in, out := &in.CompileExpressions, &out.CompileExpressions
		*out = new(bool)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.ConnectTimeoutWithFailover != nil {
		in, out := &in.ConnectTimeoutWithFailover, &out.ConnectTimeoutWithFailover
		*out = new(float64)
		**out = **in
	}
	if in.CountDistinctImplementation != nil {
		in, out := &in.CountDistinctImplementation, &out.CountDistinctImplementation
		*out = new(string)
		**out = **in
	}
	if in.DistinctOverflowMode != nil {
		in, out := &in.DistinctOverflowMode, &out.DistinctOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.DistributedAggregationMemoryEfficient != nil {
		in, out := &in.DistributedAggregationMemoryEfficient, &out.DistributedAggregationMemoryEfficient
		*out = new(bool)
		**out = **in
	}
	if in.DistributedDdlTaskTimeout != nil {
		in, out := &in.DistributedDdlTaskTimeout, &out.DistributedDdlTaskTimeout
		*out = new(float64)
		**out = **in
	}
	if in.DistributedProductMode != nil {
		in, out := &in.DistributedProductMode, &out.DistributedProductMode
		*out = new(string)
		**out = **in
	}
	if in.EmptyResultForAggregationByEmptySet != nil {
		in, out := &in.EmptyResultForAggregationByEmptySet, &out.EmptyResultForAggregationByEmptySet
		*out = new(bool)
		**out = **in
	}
	if in.EnableHTTPCompression != nil {
		in, out := &in.EnableHTTPCompression, &out.EnableHTTPCompression
		*out = new(bool)
		**out = **in
	}
	if in.FallbackToStaleReplicasForDistributedQueries != nil {
		in, out := &in.FallbackToStaleReplicasForDistributedQueries, &out.FallbackToStaleReplicasForDistributedQueries
		*out = new(bool)
		**out = **in
	}
	if in.FlattenNested != nil {
		in, out := &in.FlattenNested, &out.FlattenNested
		*out = new(bool)
		**out = **in
	}
	if in.ForceIndexByDate != nil {
		in, out := &in.ForceIndexByDate, &out.ForceIndexByDate
		*out = new(bool)
		**out = **in
	}
	if in.ForcePrimaryKey != nil {
		in, out := &in.ForcePrimaryKey, &out.ForcePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.GroupByOverflowMode != nil {
		in, out := &in.GroupByOverflowMode, &out.GroupByOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.GroupByTwoLevelThreshold != nil {
		in, out := &in.GroupByTwoLevelThreshold, &out.GroupByTwoLevelThreshold
		*out = new(float64)
		**out = **in
	}
	if in.GroupByTwoLevelThresholdBytes != nil {
		in, out := &in.GroupByTwoLevelThresholdBytes, &out.GroupByTwoLevelThresholdBytes
		*out = new(float64)
		**out = **in
	}
	if in.HTTPConnectionTimeout != nil {
		in, out := &in.HTTPConnectionTimeout, &out.HTTPConnectionTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HTTPHeadersProgressInterval != nil {
		in, out := &in.HTTPHeadersProgressInterval, &out.HTTPHeadersProgressInterval
		*out = new(float64)
		**out = **in
	}
	if in.HTTPReceiveTimeout != nil {
		in, out := &in.HTTPReceiveTimeout, &out.HTTPReceiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HTTPSendTimeout != nil {
		in, out := &in.HTTPSendTimeout, &out.HTTPSendTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InputFormatDefaultsForOmittedFields != nil {
		in, out := &in.InputFormatDefaultsForOmittedFields, &out.InputFormatDefaultsForOmittedFields
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatImportNestedJSON != nil {
		in, out := &in.InputFormatImportNestedJSON, &out.InputFormatImportNestedJSON
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatParallelParsing != nil {
		in, out := &in.InputFormatParallelParsing, &out.InputFormatParallelParsing
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatValuesInterpretExpressions != nil {
		in, out := &in.InputFormatValuesInterpretExpressions, &out.InputFormatValuesInterpretExpressions
		*out = new(bool)
		**out = **in
	}
	if in.InsertKeeperMaxRetries != nil {
		in, out := &in.InsertKeeperMaxRetries, &out.InsertKeeperMaxRetries
		*out = new(float64)
		**out = **in
	}
	if in.InsertNullAsDefault != nil {
		in, out := &in.InsertNullAsDefault, &out.InsertNullAsDefault
		*out = new(bool)
		**out = **in
	}
	if in.InsertQuorum != nil {
		in, out := &in.InsertQuorum, &out.InsertQuorum
		*out = new(float64)
		**out = **in
	}
	if in.InsertQuorumTimeout != nil {
		in, out := &in.InsertQuorumTimeout, &out.InsertQuorumTimeout
		*out = new(float64)
		**out = **in
	}
	if in.JoinOverflowMode != nil {
		in, out := &in.JoinOverflowMode, &out.JoinOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.JoinUseNulls != nil {
		in, out := &in.JoinUseNulls, &out.JoinUseNulls
		*out = new(bool)
		**out = **in
	}
	if in.JoinedSubqueryRequiresAlias != nil {
		in, out := &in.JoinedSubqueryRequiresAlias, &out.JoinedSubqueryRequiresAlias
		*out = new(bool)
		**out = **in
	}
	if in.LocalFilesystemReadMethod != nil {
		in, out := &in.LocalFilesystemReadMethod, &out.LocalFilesystemReadMethod
		*out = new(string)
		**out = **in
	}
	if in.LowCardinalityAllowInNativeFormat != nil {
		in, out := &in.LowCardinalityAllowInNativeFormat, &out.LowCardinalityAllowInNativeFormat
		*out = new(bool)
		**out = **in
	}
	if in.MaxAstDepth != nil {
		in, out := &in.MaxAstDepth, &out.MaxAstDepth
		*out = new(float64)
		**out = **in
	}
	if in.MaxAstElements != nil {
		in, out := &in.MaxAstElements, &out.MaxAstElements
		*out = new(float64)
		**out = **in
	}
	if in.MaxBlockSize != nil {
		in, out := &in.MaxBlockSize, &out.MaxBlockSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalGroupBy != nil {
		in, out := &in.MaxBytesBeforeExternalGroupBy, &out.MaxBytesBeforeExternalGroupBy
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalSort != nil {
		in, out := &in.MaxBytesBeforeExternalSort, &out.MaxBytesBeforeExternalSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInDistinct != nil {
		in, out := &in.MaxBytesInDistinct, &out.MaxBytesInDistinct
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInJoin != nil {
		in, out := &in.MaxBytesInJoin, &out.MaxBytesInJoin
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInSet != nil {
		in, out := &in.MaxBytesInSet, &out.MaxBytesInSet
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToRead != nil {
		in, out := &in.MaxBytesToRead, &out.MaxBytesToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToSort != nil {
		in, out := &in.MaxBytesToSort, &out.MaxBytesToSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToTransfer != nil {
		in, out := &in.MaxBytesToTransfer, &out.MaxBytesToTransfer
		*out = new(float64)
		**out = **in
	}
	if in.MaxColumnsToRead != nil {
		in, out := &in.MaxColumnsToRead, &out.MaxColumnsToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrentQueriesForUser != nil {
		in, out := &in.MaxConcurrentQueriesForUser, &out.MaxConcurrentQueriesForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxExecutionTime != nil {
		in, out := &in.MaxExecutionTime, &out.MaxExecutionTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxExpandedAstElements != nil {
		in, out := &in.MaxExpandedAstElements, &out.MaxExpandedAstElements
		*out = new(float64)
		**out = **in
	}
	if in.MaxFinalThreads != nil {
		in, out := &in.MaxFinalThreads, &out.MaxFinalThreads
		*out = new(float64)
		**out = **in
	}
	if in.MaxHTTPGetRedirects != nil {
		in, out := &in.MaxHTTPGetRedirects, &out.MaxHTTPGetRedirects
		*out = new(float64)
		**out = **in
	}
	if in.MaxInsertBlockSize != nil {
		in, out := &in.MaxInsertBlockSize, &out.MaxInsertBlockSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxMemoryUsage != nil {
		in, out := &in.MaxMemoryUsage, &out.MaxMemoryUsage
		*out = new(float64)
		**out = **in
	}
	if in.MaxMemoryUsageForUser != nil {
		in, out := &in.MaxMemoryUsageForUser, &out.MaxMemoryUsageForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxNetworkBandwidth != nil {
		in, out := &in.MaxNetworkBandwidth, &out.MaxNetworkBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.MaxNetworkBandwidthForUser != nil {
		in, out := &in.MaxNetworkBandwidthForUser, &out.MaxNetworkBandwidthForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxParserDepth != nil {
		in, out := &in.MaxParserDepth, &out.MaxParserDepth
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuerySize != nil {
		in, out := &in.MaxQuerySize, &out.MaxQuerySize
		*out = new(float64)
		**out = **in
	}
	if in.MaxReadBufferSize != nil {
		in, out := &in.MaxReadBufferSize, &out.MaxReadBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplicaDelayForDistributedQueries != nil {
		in, out := &in.MaxReplicaDelayForDistributedQueries, &out.MaxReplicaDelayForDistributedQueries
		*out = new(float64)
		**out = **in
	}
	if in.MaxResultBytes != nil {
		in, out := &in.MaxResultBytes, &out.MaxResultBytes
		*out = new(float64)
		**out = **in
	}
	if in.MaxResultRows != nil {
		in, out := &in.MaxResultRows, &out.MaxResultRows
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInDistinct != nil {
		in, out := &in.MaxRowsInDistinct, &out.MaxRowsInDistinct
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInJoin != nil {
		in, out := &in.MaxRowsInJoin, &out.MaxRowsInJoin
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInSet != nil {
		in, out := &in.MaxRowsInSet, &out.MaxRowsInSet
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToGroupBy != nil {
		in, out := &in.MaxRowsToGroupBy, &out.MaxRowsToGroupBy
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToRead != nil {
		in, out := &in.MaxRowsToRead, &out.MaxRowsToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToSort != nil {
		in, out := &in.MaxRowsToSort, &out.MaxRowsToSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToTransfer != nil {
		in, out := &in.MaxRowsToTransfer, &out.MaxRowsToTransfer
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryColumns != nil {
		in, out := &in.MaxTemporaryColumns, &out.MaxTemporaryColumns
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryDataOnDiskSizeForQuery != nil {
		in, out := &in.MaxTemporaryDataOnDiskSizeForQuery, &out.MaxTemporaryDataOnDiskSizeForQuery
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryDataOnDiskSizeForUser != nil {
		in, out := &in.MaxTemporaryDataOnDiskSizeForUser, &out.MaxTemporaryDataOnDiskSizeForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryNonConstColumns != nil {
		in, out := &in.MaxTemporaryNonConstColumns, &out.MaxTemporaryNonConstColumns
		*out = new(float64)
		**out = **in
	}
	if in.MaxThreads != nil {
		in, out := &in.MaxThreads, &out.MaxThreads
		*out = new(float64)
		**out = **in
	}
	if in.MemoryOvercommitRatioDenominator != nil {
		in, out := &in.MemoryOvercommitRatioDenominator, &out.MemoryOvercommitRatioDenominator
		*out = new(float64)
		**out = **in
	}
	if in.MemoryOvercommitRatioDenominatorForUser != nil {
		in, out := &in.MemoryOvercommitRatioDenominatorForUser, &out.MemoryOvercommitRatioDenominatorForUser
		*out = new(float64)
		**out = **in
	}
	if in.MemoryProfilerSampleProbability != nil {
		in, out := &in.MemoryProfilerSampleProbability, &out.MemoryProfilerSampleProbability
		*out = new(float64)
		**out = **in
	}
	if in.MemoryProfilerStep != nil {
		in, out := &in.MemoryProfilerStep, &out.MemoryProfilerStep
		*out = new(float64)
		**out = **in
	}
	if in.MemoryUsageOvercommitMaxWaitMicroseconds != nil {
		in, out := &in.MemoryUsageOvercommitMaxWaitMicroseconds, &out.MemoryUsageOvercommitMaxWaitMicroseconds
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMaxBytesToUseCache != nil {
		in, out := &in.MergeTreeMaxBytesToUseCache, &out.MergeTreeMaxBytesToUseCache
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMaxRowsToUseCache != nil {
		in, out := &in.MergeTreeMaxRowsToUseCache, &out.MergeTreeMaxRowsToUseCache
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMinBytesForConcurrentRead != nil {
		in, out := &in.MergeTreeMinBytesForConcurrentRead, &out.MergeTreeMinBytesForConcurrentRead
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMinRowsForConcurrentRead != nil {
		in, out := &in.MergeTreeMinRowsForConcurrentRead, &out.MergeTreeMinRowsForConcurrentRead
		*out = new(float64)
		**out = **in
	}
	if in.MinBytesToUseDirectIo != nil {
		in, out := &in.MinBytesToUseDirectIo, &out.MinBytesToUseDirectIo
		*out = new(float64)
		**out = **in
	}
	if in.MinCountToCompile != nil {
		in, out := &in.MinCountToCompile, &out.MinCountToCompile
		*out = new(float64)
		**out = **in
	}
	if in.MinCountToCompileExpression != nil {
		in, out := &in.MinCountToCompileExpression, &out.MinCountToCompileExpression
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutionSpeed != nil {
		in, out := &in.MinExecutionSpeed, &out.MinExecutionSpeed
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutionSpeedBytes != nil {
		in, out := &in.MinExecutionSpeedBytes, &out.MinExecutionSpeedBytes
		*out = new(float64)
		**out = **in
	}
	if in.MinInsertBlockSizeBytes != nil {
		in, out := &in.MinInsertBlockSizeBytes, &out.MinInsertBlockSizeBytes
		*out = new(float64)
		**out = **in
	}
	if in.MinInsertBlockSizeRows != nil {
		in, out := &in.MinInsertBlockSizeRows, &out.MinInsertBlockSizeRows
		*out = new(float64)
		**out = **in
	}
	if in.OutputFormatJSONQuote64BitIntegers != nil {
		in, out := &in.OutputFormatJSONQuote64BitIntegers, &out.OutputFormatJSONQuote64BitIntegers
		*out = new(bool)
		**out = **in
	}
	if in.OutputFormatJSONQuoteDenormals != nil {
		in, out := &in.OutputFormatJSONQuoteDenormals, &out.OutputFormatJSONQuoteDenormals
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.QuotaMode != nil {
		in, out := &in.QuotaMode, &out.QuotaMode
		*out = new(string)
		**out = **in
	}
	if in.ReadOverflowMode != nil {
		in, out := &in.ReadOverflowMode, &out.ReadOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(float64)
		**out = **in
	}
	if in.ReceiveTimeout != nil {
		in, out := &in.ReceiveTimeout, &out.ReceiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RemoteFilesystemReadMethod != nil {
		in, out := &in.RemoteFilesystemReadMethod, &out.RemoteFilesystemReadMethod
		*out = new(string)
		**out = **in
	}
	if in.ReplicationAlterPartitionsSync != nil {
		in, out := &in.ReplicationAlterPartitionsSync, &out.ReplicationAlterPartitionsSync
		*out = new(float64)
		**out = **in
	}
	if in.ResultOverflowMode != nil {
		in, out := &in.ResultOverflowMode, &out.ResultOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SelectSequentialConsistency != nil {
		in, out := &in.SelectSequentialConsistency, &out.SelectSequentialConsistency
		*out = new(bool)
		**out = **in
	}
	if in.SendProgressInHTTPHeaders != nil {
		in, out := &in.SendProgressInHTTPHeaders, &out.SendProgressInHTTPHeaders
		*out = new(bool)
		**out = **in
	}
	if in.SendTimeout != nil {
		in, out := &in.SendTimeout, &out.SendTimeout
		*out = new(float64)
		**out = **in
	}
	if in.SetOverflowMode != nil {
		in, out := &in.SetOverflowMode, &out.SetOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SkipUnavailableShards != nil {
		in, out := &in.SkipUnavailableShards, &out.SkipUnavailableShards
		*out = new(bool)
		**out = **in
	}
	if in.SortOverflowMode != nil {
		in, out := &in.SortOverflowMode, &out.SortOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TimeoutBeforeCheckingExecutionSpeed != nil {
		in, out := &in.TimeoutBeforeCheckingExecutionSpeed, &out.TimeoutBeforeCheckingExecutionSpeed
		*out = new(float64)
		**out = **in
	}
	if in.TimeoutOverflowMode != nil {
		in, out := &in.TimeoutOverflowMode, &out.TimeoutOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransferOverflowMode != nil {
		in, out := &in.TransferOverflowMode, &out.TransferOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransformNullIn != nil {
		in, out := &in.TransformNullIn, &out.TransformNullIn
		*out = new(bool)
		**out = **in
	}
	if in.UseUncompressedCache != nil {
		in, out := &in.UseUncompressedCache, &out.UseUncompressedCache
		*out = new(bool)
		**out = **in
	}
	if in.WaitForAsyncInsert != nil {
		in, out := &in.WaitForAsyncInsert, &out.WaitForAsyncInsert
		*out = new(bool)
		**out = **in
	}
	if in.WaitForAsyncInsertTimeout != nil {
		in, out := &in.WaitForAsyncInsertTimeout, &out.WaitForAsyncInsertTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSettingsObservation.
func (in *UserSettingsObservation) DeepCopy() *UserSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(UserSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSettingsParameters) DeepCopyInto(out *UserSettingsParameters) {
	*out = *in
	if in.AddHTTPCorsHeader != nil {
		in, out := &in.AddHTTPCorsHeader, &out.AddHTTPCorsHeader
		*out = new(bool)
		**out = **in
	}
	if in.AllowDdl != nil {
		in, out := &in.AllowDdl, &out.AllowDdl
		*out = new(bool)
		**out = **in
	}
	if in.AllowIntrospectionFunctions != nil {
		in, out := &in.AllowIntrospectionFunctions, &out.AllowIntrospectionFunctions
		*out = new(bool)
		**out = **in
	}
	if in.AllowSuspiciousLowCardinalityTypes != nil {
		in, out := &in.AllowSuspiciousLowCardinalityTypes, &out.AllowSuspiciousLowCardinalityTypes
		*out = new(bool)
		**out = **in
	}
	if in.AsyncInsert != nil {
		in, out := &in.AsyncInsert, &out.AsyncInsert
		*out = new(bool)
		**out = **in
	}
	if in.AsyncInsertBusyTimeout != nil {
		in, out := &in.AsyncInsertBusyTimeout, &out.AsyncInsertBusyTimeout
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertMaxDataSize != nil {
		in, out := &in.AsyncInsertMaxDataSize, &out.AsyncInsertMaxDataSize
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertStaleTimeout != nil {
		in, out := &in.AsyncInsertStaleTimeout, &out.AsyncInsertStaleTimeout
		*out = new(float64)
		**out = **in
	}
	if in.AsyncInsertThreads != nil {
		in, out := &in.AsyncInsertThreads, &out.AsyncInsertThreads
		*out = new(float64)
		**out = **in
	}
	if in.CancelHTTPReadonlyQueriesOnClientClose != nil {
		in, out := &in.CancelHTTPReadonlyQueriesOnClientClose, &out.CancelHTTPReadonlyQueriesOnClientClose
		*out = new(bool)
		**out = **in
	}
	if in.Compile != nil {
		in, out := &in.Compile, &out.Compile
		*out = new(bool)
		**out = **in
	}
	if in.CompileExpressions != nil {
		in, out := &in.CompileExpressions, &out.CompileExpressions
		*out = new(bool)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(float64)
		**out = **in
	}
	if in.ConnectTimeoutWithFailover != nil {
		in, out := &in.ConnectTimeoutWithFailover, &out.ConnectTimeoutWithFailover
		*out = new(float64)
		**out = **in
	}
	if in.CountDistinctImplementation != nil {
		in, out := &in.CountDistinctImplementation, &out.CountDistinctImplementation
		*out = new(string)
		**out = **in
	}
	if in.DistinctOverflowMode != nil {
		in, out := &in.DistinctOverflowMode, &out.DistinctOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.DistributedAggregationMemoryEfficient != nil {
		in, out := &in.DistributedAggregationMemoryEfficient, &out.DistributedAggregationMemoryEfficient
		*out = new(bool)
		**out = **in
	}
	if in.DistributedDdlTaskTimeout != nil {
		in, out := &in.DistributedDdlTaskTimeout, &out.DistributedDdlTaskTimeout
		*out = new(float64)
		**out = **in
	}
	if in.DistributedProductMode != nil {
		in, out := &in.DistributedProductMode, &out.DistributedProductMode
		*out = new(string)
		**out = **in
	}
	if in.EmptyResultForAggregationByEmptySet != nil {
		in, out := &in.EmptyResultForAggregationByEmptySet, &out.EmptyResultForAggregationByEmptySet
		*out = new(bool)
		**out = **in
	}
	if in.EnableHTTPCompression != nil {
		in, out := &in.EnableHTTPCompression, &out.EnableHTTPCompression
		*out = new(bool)
		**out = **in
	}
	if in.FallbackToStaleReplicasForDistributedQueries != nil {
		in, out := &in.FallbackToStaleReplicasForDistributedQueries, &out.FallbackToStaleReplicasForDistributedQueries
		*out = new(bool)
		**out = **in
	}
	if in.FlattenNested != nil {
		in, out := &in.FlattenNested, &out.FlattenNested
		*out = new(bool)
		**out = **in
	}
	if in.ForceIndexByDate != nil {
		in, out := &in.ForceIndexByDate, &out.ForceIndexByDate
		*out = new(bool)
		**out = **in
	}
	if in.ForcePrimaryKey != nil {
		in, out := &in.ForcePrimaryKey, &out.ForcePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.GroupByOverflowMode != nil {
		in, out := &in.GroupByOverflowMode, &out.GroupByOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.GroupByTwoLevelThreshold != nil {
		in, out := &in.GroupByTwoLevelThreshold, &out.GroupByTwoLevelThreshold
		*out = new(float64)
		**out = **in
	}
	if in.GroupByTwoLevelThresholdBytes != nil {
		in, out := &in.GroupByTwoLevelThresholdBytes, &out.GroupByTwoLevelThresholdBytes
		*out = new(float64)
		**out = **in
	}
	if in.HTTPConnectionTimeout != nil {
		in, out := &in.HTTPConnectionTimeout, &out.HTTPConnectionTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HTTPHeadersProgressInterval != nil {
		in, out := &in.HTTPHeadersProgressInterval, &out.HTTPHeadersProgressInterval
		*out = new(float64)
		**out = **in
	}
	if in.HTTPReceiveTimeout != nil {
		in, out := &in.HTTPReceiveTimeout, &out.HTTPReceiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HTTPSendTimeout != nil {
		in, out := &in.HTTPSendTimeout, &out.HTTPSendTimeout
		*out = new(float64)
		**out = **in
	}
	if in.InputFormatDefaultsForOmittedFields != nil {
		in, out := &in.InputFormatDefaultsForOmittedFields, &out.InputFormatDefaultsForOmittedFields
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatImportNestedJSON != nil {
		in, out := &in.InputFormatImportNestedJSON, &out.InputFormatImportNestedJSON
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatParallelParsing != nil {
		in, out := &in.InputFormatParallelParsing, &out.InputFormatParallelParsing
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatValuesInterpretExpressions != nil {
		in, out := &in.InputFormatValuesInterpretExpressions, &out.InputFormatValuesInterpretExpressions
		*out = new(bool)
		**out = **in
	}
	if in.InsertKeeperMaxRetries != nil {
		in, out := &in.InsertKeeperMaxRetries, &out.InsertKeeperMaxRetries
		*out = new(float64)
		**out = **in
	}
	if in.InsertNullAsDefault != nil {
		in, out := &in.InsertNullAsDefault, &out.InsertNullAsDefault
		*out = new(bool)
		**out = **in
	}
	if in.InsertQuorum != nil {
		in, out := &in.InsertQuorum, &out.InsertQuorum
		*out = new(float64)
		**out = **in
	}
	if in.InsertQuorumTimeout != nil {
		in, out := &in.InsertQuorumTimeout, &out.InsertQuorumTimeout
		*out = new(float64)
		**out = **in
	}
	if in.JoinOverflowMode != nil {
		in, out := &in.JoinOverflowMode, &out.JoinOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.JoinUseNulls != nil {
		in, out := &in.JoinUseNulls, &out.JoinUseNulls
		*out = new(bool)
		**out = **in
	}
	if in.JoinedSubqueryRequiresAlias != nil {
		in, out := &in.JoinedSubqueryRequiresAlias, &out.JoinedSubqueryRequiresAlias
		*out = new(bool)
		**out = **in
	}
	if in.LocalFilesystemReadMethod != nil {
		in, out := &in.LocalFilesystemReadMethod, &out.LocalFilesystemReadMethod
		*out = new(string)
		**out = **in
	}
	if in.LowCardinalityAllowInNativeFormat != nil {
		in, out := &in.LowCardinalityAllowInNativeFormat, &out.LowCardinalityAllowInNativeFormat
		*out = new(bool)
		**out = **in
	}
	if in.MaxAstDepth != nil {
		in, out := &in.MaxAstDepth, &out.MaxAstDepth
		*out = new(float64)
		**out = **in
	}
	if in.MaxAstElements != nil {
		in, out := &in.MaxAstElements, &out.MaxAstElements
		*out = new(float64)
		**out = **in
	}
	if in.MaxBlockSize != nil {
		in, out := &in.MaxBlockSize, &out.MaxBlockSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalGroupBy != nil {
		in, out := &in.MaxBytesBeforeExternalGroupBy, &out.MaxBytesBeforeExternalGroupBy
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalSort != nil {
		in, out := &in.MaxBytesBeforeExternalSort, &out.MaxBytesBeforeExternalSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInDistinct != nil {
		in, out := &in.MaxBytesInDistinct, &out.MaxBytesInDistinct
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInJoin != nil {
		in, out := &in.MaxBytesInJoin, &out.MaxBytesInJoin
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesInSet != nil {
		in, out := &in.MaxBytesInSet, &out.MaxBytesInSet
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToRead != nil {
		in, out := &in.MaxBytesToRead, &out.MaxBytesToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToSort != nil {
		in, out := &in.MaxBytesToSort, &out.MaxBytesToSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxBytesToTransfer != nil {
		in, out := &in.MaxBytesToTransfer, &out.MaxBytesToTransfer
		*out = new(float64)
		**out = **in
	}
	if in.MaxColumnsToRead != nil {
		in, out := &in.MaxColumnsToRead, &out.MaxColumnsToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxConcurrentQueriesForUser != nil {
		in, out := &in.MaxConcurrentQueriesForUser, &out.MaxConcurrentQueriesForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxExecutionTime != nil {
		in, out := &in.MaxExecutionTime, &out.MaxExecutionTime
		*out = new(float64)
		**out = **in
	}
	if in.MaxExpandedAstElements != nil {
		in, out := &in.MaxExpandedAstElements, &out.MaxExpandedAstElements
		*out = new(float64)
		**out = **in
	}
	if in.MaxFinalThreads != nil {
		in, out := &in.MaxFinalThreads, &out.MaxFinalThreads
		*out = new(float64)
		**out = **in
	}
	if in.MaxHTTPGetRedirects != nil {
		in, out := &in.MaxHTTPGetRedirects, &out.MaxHTTPGetRedirects
		*out = new(float64)
		**out = **in
	}
	if in.MaxInsertBlockSize != nil {
		in, out := &in.MaxInsertBlockSize, &out.MaxInsertBlockSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxMemoryUsage != nil {
		in, out := &in.MaxMemoryUsage, &out.MaxMemoryUsage
		*out = new(float64)
		**out = **in
	}
	if in.MaxMemoryUsageForUser != nil {
		in, out := &in.MaxMemoryUsageForUser, &out.MaxMemoryUsageForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxNetworkBandwidth != nil {
		in, out := &in.MaxNetworkBandwidth, &out.MaxNetworkBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.MaxNetworkBandwidthForUser != nil {
		in, out := &in.MaxNetworkBandwidthForUser, &out.MaxNetworkBandwidthForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxParserDepth != nil {
		in, out := &in.MaxParserDepth, &out.MaxParserDepth
		*out = new(float64)
		**out = **in
	}
	if in.MaxQuerySize != nil {
		in, out := &in.MaxQuerySize, &out.MaxQuerySize
		*out = new(float64)
		**out = **in
	}
	if in.MaxReadBufferSize != nil {
		in, out := &in.MaxReadBufferSize, &out.MaxReadBufferSize
		*out = new(float64)
		**out = **in
	}
	if in.MaxReplicaDelayForDistributedQueries != nil {
		in, out := &in.MaxReplicaDelayForDistributedQueries, &out.MaxReplicaDelayForDistributedQueries
		*out = new(float64)
		**out = **in
	}
	if in.MaxResultBytes != nil {
		in, out := &in.MaxResultBytes, &out.MaxResultBytes
		*out = new(float64)
		**out = **in
	}
	if in.MaxResultRows != nil {
		in, out := &in.MaxResultRows, &out.MaxResultRows
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInDistinct != nil {
		in, out := &in.MaxRowsInDistinct, &out.MaxRowsInDistinct
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInJoin != nil {
		in, out := &in.MaxRowsInJoin, &out.MaxRowsInJoin
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsInSet != nil {
		in, out := &in.MaxRowsInSet, &out.MaxRowsInSet
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToGroupBy != nil {
		in, out := &in.MaxRowsToGroupBy, &out.MaxRowsToGroupBy
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToRead != nil {
		in, out := &in.MaxRowsToRead, &out.MaxRowsToRead
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToSort != nil {
		in, out := &in.MaxRowsToSort, &out.MaxRowsToSort
		*out = new(float64)
		**out = **in
	}
	if in.MaxRowsToTransfer != nil {
		in, out := &in.MaxRowsToTransfer, &out.MaxRowsToTransfer
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryColumns != nil {
		in, out := &in.MaxTemporaryColumns, &out.MaxTemporaryColumns
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryDataOnDiskSizeForQuery != nil {
		in, out := &in.MaxTemporaryDataOnDiskSizeForQuery, &out.MaxTemporaryDataOnDiskSizeForQuery
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryDataOnDiskSizeForUser != nil {
		in, out := &in.MaxTemporaryDataOnDiskSizeForUser, &out.MaxTemporaryDataOnDiskSizeForUser
		*out = new(float64)
		**out = **in
	}
	if in.MaxTemporaryNonConstColumns != nil {
		in, out := &in.MaxTemporaryNonConstColumns, &out.MaxTemporaryNonConstColumns
		*out = new(float64)
		**out = **in
	}
	if in.MaxThreads != nil {
		in, out := &in.MaxThreads, &out.MaxThreads
		*out = new(float64)
		**out = **in
	}
	if in.MemoryOvercommitRatioDenominator != nil {
		in, out := &in.MemoryOvercommitRatioDenominator, &out.MemoryOvercommitRatioDenominator
		*out = new(float64)
		**out = **in
	}
	if in.MemoryOvercommitRatioDenominatorForUser != nil {
		in, out := &in.MemoryOvercommitRatioDenominatorForUser, &out.MemoryOvercommitRatioDenominatorForUser
		*out = new(float64)
		**out = **in
	}
	if in.MemoryProfilerSampleProbability != nil {
		in, out := &in.MemoryProfilerSampleProbability, &out.MemoryProfilerSampleProbability
		*out = new(float64)
		**out = **in
	}
	if in.MemoryProfilerStep != nil {
		in, out := &in.MemoryProfilerStep, &out.MemoryProfilerStep
		*out = new(float64)
		**out = **in
	}
	if in.MemoryUsageOvercommitMaxWaitMicroseconds != nil {
		in, out := &in.MemoryUsageOvercommitMaxWaitMicroseconds, &out.MemoryUsageOvercommitMaxWaitMicroseconds
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMaxBytesToUseCache != nil {
		in, out := &in.MergeTreeMaxBytesToUseCache, &out.MergeTreeMaxBytesToUseCache
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMaxRowsToUseCache != nil {
		in, out := &in.MergeTreeMaxRowsToUseCache, &out.MergeTreeMaxRowsToUseCache
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMinBytesForConcurrentRead != nil {
		in, out := &in.MergeTreeMinBytesForConcurrentRead, &out.MergeTreeMinBytesForConcurrentRead
		*out = new(float64)
		**out = **in
	}
	if in.MergeTreeMinRowsForConcurrentRead != nil {
		in, out := &in.MergeTreeMinRowsForConcurrentRead, &out.MergeTreeMinRowsForConcurrentRead
		*out = new(float64)
		**out = **in
	}
	if in.MinBytesToUseDirectIo != nil {
		in, out := &in.MinBytesToUseDirectIo, &out.MinBytesToUseDirectIo
		*out = new(float64)
		**out = **in
	}
	if in.MinCountToCompile != nil {
		in, out := &in.MinCountToCompile, &out.MinCountToCompile
		*out = new(float64)
		**out = **in
	}
	if in.MinCountToCompileExpression != nil {
		in, out := &in.MinCountToCompileExpression, &out.MinCountToCompileExpression
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutionSpeed != nil {
		in, out := &in.MinExecutionSpeed, &out.MinExecutionSpeed
		*out = new(float64)
		**out = **in
	}
	if in.MinExecutionSpeedBytes != nil {
		in, out := &in.MinExecutionSpeedBytes, &out.MinExecutionSpeedBytes
		*out = new(float64)
		**out = **in
	}
	if in.MinInsertBlockSizeBytes != nil {
		in, out := &in.MinInsertBlockSizeBytes, &out.MinInsertBlockSizeBytes
		*out = new(float64)
		**out = **in
	}
	if in.MinInsertBlockSizeRows != nil {
		in, out := &in.MinInsertBlockSizeRows, &out.MinInsertBlockSizeRows
		*out = new(float64)
		**out = **in
	}
	if in.OutputFormatJSONQuote64BitIntegers != nil {
		in, out := &in.OutputFormatJSONQuote64BitIntegers, &out.OutputFormatJSONQuote64BitIntegers
		*out = new(bool)
		**out = **in
	}
	if in.OutputFormatJSONQuoteDenormals != nil {
		in, out := &in.OutputFormatJSONQuoteDenormals, &out.OutputFormatJSONQuoteDenormals
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(float64)
		**out = **in
	}
	if in.QuotaMode != nil {
		in, out := &in.QuotaMode, &out.QuotaMode
		*out = new(string)
		**out = **in
	}
	if in.ReadOverflowMode != nil {
		in, out := &in.ReadOverflowMode, &out.ReadOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(float64)
		**out = **in
	}
	if in.ReceiveTimeout != nil {
		in, out := &in.ReceiveTimeout, &out.ReceiveTimeout
		*out = new(float64)
		**out = **in
	}
	if in.RemoteFilesystemReadMethod != nil {
		in, out := &in.RemoteFilesystemReadMethod, &out.RemoteFilesystemReadMethod
		*out = new(string)
		**out = **in
	}
	if in.ReplicationAlterPartitionsSync != nil {
		in, out := &in.ReplicationAlterPartitionsSync, &out.ReplicationAlterPartitionsSync
		*out = new(float64)
		**out = **in
	}
	if in.ResultOverflowMode != nil {
		in, out := &in.ResultOverflowMode, &out.ResultOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SelectSequentialConsistency != nil {
		in, out := &in.SelectSequentialConsistency, &out.SelectSequentialConsistency
		*out = new(bool)
		**out = **in
	}
	if in.SendProgressInHTTPHeaders != nil {
		in, out := &in.SendProgressInHTTPHeaders, &out.SendProgressInHTTPHeaders
		*out = new(bool)
		**out = **in
	}
	if in.SendTimeout != nil {
		in, out := &in.SendTimeout, &out.SendTimeout
		*out = new(float64)
		**out = **in
	}
	if in.SetOverflowMode != nil {
		in, out := &in.SetOverflowMode, &out.SetOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SkipUnavailableShards != nil {
		in, out := &in.SkipUnavailableShards, &out.SkipUnavailableShards
		*out = new(bool)
		**out = **in
	}
	if in.SortOverflowMode != nil {
		in, out := &in.SortOverflowMode, &out.SortOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TimeoutBeforeCheckingExecutionSpeed != nil {
		in, out := &in.TimeoutBeforeCheckingExecutionSpeed, &out.TimeoutBeforeCheckingExecutionSpeed
		*out = new(float64)
		**out = **in
	}
	if in.TimeoutOverflowMode != nil {
		in, out := &in.TimeoutOverflowMode, &out.TimeoutOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransferOverflowMode != nil {
		in, out := &in.TransferOverflowMode, &out.TransferOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransformNullIn != nil {
		in, out := &in.TransformNullIn, &out.TransformNullIn
		*out = new(bool)
		**out = **in
	}
	if in.UseUncompressedCache != nil {
		in, out := &in.UseUncompressedCache, &out.UseUncompressedCache
		*out = new(bool)
		**out = **in
	}
	if in.WaitForAsyncInsert != nil {
		in, out := &in.WaitForAsyncInsert, &out.WaitForAsyncInsert
		*out = new(bool)
		**out = **in
	}
	if in.WaitForAsyncInsertTimeout != nil {
		in, out := &in.WaitForAsyncInsertTimeout, &out.WaitForAsyncInsertTimeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSettingsParameters.
func (in *UserSettingsParameters) DeepCopy() *UserSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(UserSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WiredTigerInitParameters) DeepCopyInto(out *WiredTigerInitParameters) {
	*out = *in
	if in.CacheSizeGb != nil {
		in, out := &in.CacheSizeGb, &out.CacheSizeGb
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WiredTigerInitParameters.
func (in *WiredTigerInitParameters) DeepCopy() *WiredTigerInitParameters {
	if in == nil {
		return nil
	}
	out := new(WiredTigerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WiredTigerObservation) DeepCopyInto(out *WiredTigerObservation) {
	*out = *in
	if in.CacheSizeGb != nil {
		in, out := &in.CacheSizeGb, &out.CacheSizeGb
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WiredTigerObservation.
func (in *WiredTigerObservation) DeepCopy() *WiredTigerObservation {
	if in == nil {
		return nil
	}
	out := new(WiredTigerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WiredTigerParameters) DeepCopyInto(out *WiredTigerParameters) {
	*out = *in
	if in.CacheSizeGb != nil {
		in, out := &in.CacheSizeGb, &out.CacheSizeGb
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WiredTigerParameters.
func (in *WiredTigerParameters) DeepCopy() *WiredTigerParameters {
	if in == nil {
		return nil
	}
	out := new(WiredTigerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperInitParameters) DeepCopyInto(out *ZookeeperInitParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ZookeeperResourcesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperInitParameters.
func (in *ZookeeperInitParameters) DeepCopy() *ZookeeperInitParameters {
	if in == nil {
		return nil
	}
	out := new(ZookeeperInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperObservation) DeepCopyInto(out *ZookeeperObservation) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ZookeeperResourcesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperObservation.
func (in *ZookeeperObservation) DeepCopy() *ZookeeperObservation {
	if in == nil {
		return nil
	}
	out := new(ZookeeperObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperParameters) DeepCopyInto(out *ZookeeperParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ZookeeperResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperParameters.
func (in *ZookeeperParameters) DeepCopy() *ZookeeperParameters {
	if in == nil {
		return nil
	}
	out := new(ZookeeperParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperResourcesInitParameters) DeepCopyInto(out *ZookeeperResourcesInitParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperResourcesInitParameters.
func (in *ZookeeperResourcesInitParameters) DeepCopy() *ZookeeperResourcesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ZookeeperResourcesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperResourcesObservation) DeepCopyInto(out *ZookeeperResourcesObservation) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperResourcesObservation.
func (in *ZookeeperResourcesObservation) DeepCopy() *ZookeeperResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ZookeeperResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperResourcesParameters) DeepCopyInto(out *ZookeeperResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(float64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperResourcesParameters.
func (in *ZookeeperResourcesParameters) DeepCopy() *ZookeeperResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ZookeeperResourcesParameters)
	in.DeepCopyInto(out)
	return out
}
