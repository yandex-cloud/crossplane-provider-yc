/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigAccessInitParameters struct {

	// Allow access for DataTransfer
	DataTransfer *bool `json:"dataTransfer,omitempty" tf:"data_transfer,omitempty"`
}

type ConfigAccessObservation struct {

	// Allow access for DataTransfer
	DataTransfer *bool `json:"dataTransfer,omitempty" tf:"data_transfer,omitempty"`
}

type ConfigAccessParameters struct {

	// Allow access for DataTransfer
	// +kubebuilder:validation:Optional
	DataTransfer *bool `json:"dataTransfer,omitempty" tf:"data_transfer,omitempty"`
}

type ConfigKafkaInitParameters struct {

	// User-defined settings for the Kafka cluster. The structure is documented below.
	KafkaConfig []KafkaConfigInitParameters `json:"kafkaConfig,omitempty" tf:"kafka_config,omitempty"`

	// Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
	Resources []KafkaResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ConfigKafkaObservation struct {

	// User-defined settings for the Kafka cluster. The structure is documented below.
	KafkaConfig []KafkaConfigObservation `json:"kafkaConfig,omitempty" tf:"kafka_config,omitempty"`

	// Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
	Resources []KafkaResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ConfigKafkaParameters struct {

	// User-defined settings for the Kafka cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	KafkaConfig []KafkaConfigParameters `json:"kafkaConfig,omitempty" tf:"kafka_config,omitempty"`

	// Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []KafkaResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type ConfigZookeeperInitParameters struct {

	// Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
	Resources []ConfigZookeeperResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ConfigZookeeperObservation struct {

	// Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
	Resources []ConfigZookeeperResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ConfigZookeeperParameters struct {

	// Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Resources []ConfigZookeeperResourcesParameters `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ConfigZookeeperResourcesInitParameters struct {

	// Volume of the storage available to a ZooKeeper host, in gigabytes.
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of ZooKeeper hosts.
	// For more information see the official documentation.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type ConfigZookeeperResourcesObservation struct {

	// Volume of the storage available to a ZooKeeper host, in gigabytes.
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of ZooKeeper hosts.
	// For more information see the official documentation.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type ConfigZookeeperResourcesParameters struct {

	// Volume of the storage available to a ZooKeeper host, in gigabytes.
	// +kubebuilder:validation:Optional
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of ZooKeeper hosts.
	// For more information see the official documentation.
	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type KafkaClusterConfigInitParameters struct {

	// Access policy to the Kafka cluster. The structure is documented below.
	Access []ConfigAccessInitParameters `json:"access,omitempty" tf:"access,omitempty"`

	// Determines whether each broker will be assigned a public IP address. The default is false.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Count of brokers per availability zone. The default is 1.
	BrokersCount *int64 `json:"brokersCount,omitempty" tf:"brokers_count,omitempty"`

	// Configuration of the Kafka subcluster. The structure is documented below.
	Kafka []ConfigKafkaInitParameters `json:"kafka,omitempty" tf:"kafka,omitempty"`

	// Enables managed schema registry on cluster. The default is false.
	SchemaRegistry *bool `json:"schemaRegistry,omitempty" tf:"schema_registry,omitempty"`

	UnmanagedTopics *bool `json:"unmanagedTopics,omitempty" tf:"unmanaged_topics,omitempty"`

	// Version of the Kafka server software.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// List of availability zones.
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`

	// Configuration of the ZooKeeper subcluster. The structure is documented below.
	Zookeeper []ConfigZookeeperInitParameters `json:"zookeeper,omitempty" tf:"zookeeper,omitempty"`
}

type KafkaClusterConfigObservation struct {

	// Access policy to the Kafka cluster. The structure is documented below.
	Access []ConfigAccessObservation `json:"access,omitempty" tf:"access,omitempty"`

	// Determines whether each broker will be assigned a public IP address. The default is false.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Count of brokers per availability zone. The default is 1.
	BrokersCount *int64 `json:"brokersCount,omitempty" tf:"brokers_count,omitempty"`

	// Configuration of the Kafka subcluster. The structure is documented below.
	Kafka []ConfigKafkaObservation `json:"kafka,omitempty" tf:"kafka,omitempty"`

	// Enables managed schema registry on cluster. The default is false.
	SchemaRegistry *bool `json:"schemaRegistry,omitempty" tf:"schema_registry,omitempty"`

	UnmanagedTopics *bool `json:"unmanagedTopics,omitempty" tf:"unmanaged_topics,omitempty"`

	// Version of the Kafka server software.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// List of availability zones.
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`

	// Configuration of the ZooKeeper subcluster. The structure is documented below.
	Zookeeper []ConfigZookeeperObservation `json:"zookeeper,omitempty" tf:"zookeeper,omitempty"`
}

type KafkaClusterConfigParameters struct {

	// Access policy to the Kafka cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Access []ConfigAccessParameters `json:"access,omitempty" tf:"access,omitempty"`

	// Determines whether each broker will be assigned a public IP address. The default is false.
	// +kubebuilder:validation:Optional
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Count of brokers per availability zone. The default is 1.
	// +kubebuilder:validation:Optional
	BrokersCount *int64 `json:"brokersCount,omitempty" tf:"brokers_count,omitempty"`

	// Configuration of the Kafka subcluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Kafka []ConfigKafkaParameters `json:"kafka" tf:"kafka,omitempty"`

	// Enables managed schema registry on cluster. The default is false.
	// +kubebuilder:validation:Optional
	SchemaRegistry *bool `json:"schemaRegistry,omitempty" tf:"schema_registry,omitempty"`

	// +kubebuilder:validation:Optional
	UnmanagedTopics *bool `json:"unmanagedTopics,omitempty" tf:"unmanaged_topics,omitempty"`

	// Version of the Kafka server software.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`

	// List of availability zones.
	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones" tf:"zones,omitempty"`

	// Configuration of the ZooKeeper subcluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Zookeeper []ConfigZookeeperParameters `json:"zookeeper,omitempty" tf:"zookeeper,omitempty"`
}

type KafkaClusterHostInitParameters struct {
}

type KafkaClusterHostObservation struct {

	// The flag that defines whether a public IP address is assigned to the node.
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	// Health of the host.
	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	// The fully qualified domain name of the host.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Role of the host in the cluster.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The ID of the subnet, to which the host belongs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The availability zone where the Kafka host was created.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type KafkaClusterHostParameters struct {
}

type KafkaClusterInitParameters struct {

	// Configuration of the Kafka cluster. The structure is documented below.
	Config []KafkaClusterConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the Kafka cluster.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the Kafka cluster. Can be either PRESTABLE or PRODUCTION.
	// The default is PRODUCTION.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A list of IDs of the host groups to place VMs of the cluster on.
	// +listType=set
	HostGroupIds []*string `json:"hostGroupIds,omitempty" tf:"host_group_ids,omitempty"`

	// A set of key/value label pairs to assign to the Kafka cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Maintenance policy of the Kafka cluster. The structure is documented below.
	MaintenanceWindow []KafkaClusterMaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Name of the Kafka cluster. Provided by the client when the cluster is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the Kafka cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Security group ids, to which the Kafka cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.SecurityGroup
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// IDs of the subnets, to which the Kafka cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Subnet
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`

	// (Deprecated) To manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic.
	Topic []TopicInitParameters `json:"topic,omitempty" tf:"topic,omitempty"`

	// (Deprecated) To manage users, please switch to using a separate resource type yandex_mdb_kafka_user.
	User []KafkaClusterUserInitParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type KafkaClusterMaintenanceWindowInitParameters struct {

	// Day of the week (in DDD format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of the day in UTC (in HH format). Allowed value is between 1 and 24.
	Hour *int64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type KafkaClusterMaintenanceWindowObservation struct {

	// Day of the week (in DDD format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of the day in UTC (in HH format). Allowed value is between 1 and 24.
	Hour *int64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type KafkaClusterMaintenanceWindowParameters struct {

	// Day of the week (in DDD format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// Hour of the day in UTC (in HH format). Allowed value is between 1 and 24.
	// +kubebuilder:validation:Optional
	Hour *int64 `json:"hour,omitempty" tf:"hour,omitempty"`

	// Type of maintenance window. Can be either ANYTIME or WEEKLY. A day and hour of window need to be specified with weekly window.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type KafkaClusterObservation struct {

	// Configuration of the Kafka cluster. The structure is documented below.
	Config []KafkaClusterConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Timestamp of cluster creation.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the Kafka cluster.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the Kafka cluster. Can be either PRESTABLE or PRODUCTION.
	// The default is PRODUCTION.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Aggregated health of the cluster. Can be either ALIVE, DEGRADED, DEAD or HEALTH_UNKNOWN.
	// For more information see health field of JSON representation in the official documentation.
	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	// A host of the Kafka cluster. The structure is documented below.
	Host []KafkaClusterHostObservation `json:"host,omitempty" tf:"host,omitempty"`

	// A list of IDs of the host groups to place VMs of the cluster on.
	// +listType=set
	HostGroupIds []*string `json:"hostGroupIds,omitempty" tf:"host_group_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the Kafka cluster.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Maintenance policy of the Kafka cluster. The structure is documented below.
	MaintenanceWindow []KafkaClusterMaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Name of the Kafka cluster. Provided by the client when the cluster is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the Kafka cluster belongs.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Security group ids, to which the Kafka cluster belongs.
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// Status of the cluster. Can be either CREATING, STARTING, RUNNING, UPDATING, STOPPING, STOPPED, ERROR or STATUS_UNKNOWN.
	// For more information see status field of JSON representation in the official documentation.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// IDs of the subnets, to which the Kafka cluster belongs.
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// (Deprecated) To manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic.
	Topic []TopicObservation `json:"topic,omitempty" tf:"topic,omitempty"`

	// (Deprecated) To manage users, please switch to using a separate resource type yandex_mdb_kafka_user.
	User []KafkaClusterUserObservation `json:"user,omitempty" tf:"user,omitempty"`
}

type KafkaClusterParameters struct {

	// Configuration of the Kafka cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	Config []KafkaClusterConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Inhibits deletion of the cluster.  Can be either true or false.
	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// Description of the Kafka cluster.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Deployment environment of the Kafka cluster. Can be either PRESTABLE or PRODUCTION.
	// The default is PRODUCTION.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A list of IDs of the host groups to place VMs of the cluster on.
	// +kubebuilder:validation:Optional
	// +listType=set
	HostGroupIds []*string `json:"hostGroupIds,omitempty" tf:"host_group_ids,omitempty"`

	// A set of key/value label pairs to assign to the Kafka cluster.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Maintenance policy of the Kafka cluster. The structure is documented below.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []KafkaClusterMaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// Name of the Kafka cluster. Provided by the client when the cluster is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// ID of the network, to which the Kafka cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network in vpc to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// Security group ids, to which the Kafka cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// IDs of the subnets, to which the Kafka cluster belongs.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet in vpc to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`

	// (Deprecated) To manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic.
	// +kubebuilder:validation:Optional
	Topic []TopicParameters `json:"topic,omitempty" tf:"topic,omitempty"`

	// (Deprecated) To manage users, please switch to using a separate resource type yandex_mdb_kafka_user.
	// +kubebuilder:validation:Optional
	User []KafkaClusterUserParameters `json:"user,omitempty" tf:"user,omitempty"`
}

type KafkaClusterUserInitParameters struct {

	// The name of the user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set of permissions granted to the user. The structure is documented below.
	Permission []UserPermissionInitParameters `json:"permission,omitempty" tf:"permission,omitempty"`
}

type KafkaClusterUserObservation struct {

	// The name of the user.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set of permissions granted to the user. The structure is documented below.
	Permission []UserPermissionObservation `json:"permission,omitempty" tf:"permission,omitempty"`
}

type KafkaClusterUserParameters struct {

	// The name of the user.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The password of the user.
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// Set of permissions granted to the user. The structure is documented below.
	// +kubebuilder:validation:Optional
	Permission []UserPermissionParameters `json:"permission,omitempty" tf:"permission,omitempty"`
}

type KafkaConfigInitParameters struct {
	AutoCreateTopicsEnable *bool `json:"autoCreateTopicsEnable,omitempty" tf:"auto_create_topics_enable,omitempty"`

	// Kafka topic settings. For more information, see
	// the official documentation
	// and the Kafka documentation.
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	DefaultReplicationFactor *string `json:"defaultReplicationFactor,omitempty" tf:"default_replication_factor,omitempty"`

	LogFlushIntervalMessages *string `json:"logFlushIntervalMessages,omitempty" tf:"log_flush_interval_messages,omitempty"`

	LogFlushIntervalMs *string `json:"logFlushIntervalMs,omitempty" tf:"log_flush_interval_ms,omitempty"`

	LogFlushSchedulerIntervalMs *string `json:"logFlushSchedulerIntervalMs,omitempty" tf:"log_flush_scheduler_interval_ms,omitempty"`

	LogPreallocate *bool `json:"logPreallocate,omitempty" tf:"log_preallocate,omitempty"`

	LogRetentionBytes *string `json:"logRetentionBytes,omitempty" tf:"log_retention_bytes,omitempty"`

	LogRetentionHours *string `json:"logRetentionHours,omitempty" tf:"log_retention_hours,omitempty"`

	LogRetentionMinutes *string `json:"logRetentionMinutes,omitempty" tf:"log_retention_minutes,omitempty"`

	LogRetentionMs *string `json:"logRetentionMs,omitempty" tf:"log_retention_ms,omitempty"`

	LogSegmentBytes *string `json:"logSegmentBytes,omitempty" tf:"log_segment_bytes,omitempty"`

	MessageMaxBytes *string `json:"messageMaxBytes,omitempty" tf:"message_max_bytes,omitempty"`

	NumPartitions *string `json:"numPartitions,omitempty" tf:"num_partitions,omitempty"`

	OffsetsRetentionMinutes *string `json:"offsetsRetentionMinutes,omitempty" tf:"offsets_retention_minutes,omitempty"`

	ReplicaFetchMaxBytes *string `json:"replicaFetchMaxBytes,omitempty" tf:"replica_fetch_max_bytes,omitempty"`

	// +listType=set
	SSLCipherSuites []*string `json:"sslCipherSuites,omitempty" tf:"ssl_cipher_suites,omitempty"`

	// +listType=set
	SaslEnabledMechanisms []*string `json:"saslEnabledMechanisms,omitempty" tf:"sasl_enabled_mechanisms,omitempty"`

	SocketReceiveBufferBytes *string `json:"socketReceiveBufferBytes,omitempty" tf:"socket_receive_buffer_bytes,omitempty"`

	SocketSendBufferBytes *string `json:"socketSendBufferBytes,omitempty" tf:"socket_send_buffer_bytes,omitempty"`
}

type KafkaConfigObservation struct {
	AutoCreateTopicsEnable *bool `json:"autoCreateTopicsEnable,omitempty" tf:"auto_create_topics_enable,omitempty"`

	// Kafka topic settings. For more information, see
	// the official documentation
	// and the Kafka documentation.
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	DefaultReplicationFactor *string `json:"defaultReplicationFactor,omitempty" tf:"default_replication_factor,omitempty"`

	LogFlushIntervalMessages *string `json:"logFlushIntervalMessages,omitempty" tf:"log_flush_interval_messages,omitempty"`

	LogFlushIntervalMs *string `json:"logFlushIntervalMs,omitempty" tf:"log_flush_interval_ms,omitempty"`

	LogFlushSchedulerIntervalMs *string `json:"logFlushSchedulerIntervalMs,omitempty" tf:"log_flush_scheduler_interval_ms,omitempty"`

	LogPreallocate *bool `json:"logPreallocate,omitempty" tf:"log_preallocate,omitempty"`

	LogRetentionBytes *string `json:"logRetentionBytes,omitempty" tf:"log_retention_bytes,omitempty"`

	LogRetentionHours *string `json:"logRetentionHours,omitempty" tf:"log_retention_hours,omitempty"`

	LogRetentionMinutes *string `json:"logRetentionMinutes,omitempty" tf:"log_retention_minutes,omitempty"`

	LogRetentionMs *string `json:"logRetentionMs,omitempty" tf:"log_retention_ms,omitempty"`

	LogSegmentBytes *string `json:"logSegmentBytes,omitempty" tf:"log_segment_bytes,omitempty"`

	MessageMaxBytes *string `json:"messageMaxBytes,omitempty" tf:"message_max_bytes,omitempty"`

	NumPartitions *string `json:"numPartitions,omitempty" tf:"num_partitions,omitempty"`

	OffsetsRetentionMinutes *string `json:"offsetsRetentionMinutes,omitempty" tf:"offsets_retention_minutes,omitempty"`

	ReplicaFetchMaxBytes *string `json:"replicaFetchMaxBytes,omitempty" tf:"replica_fetch_max_bytes,omitempty"`

	// +listType=set
	SSLCipherSuites []*string `json:"sslCipherSuites,omitempty" tf:"ssl_cipher_suites,omitempty"`

	// +listType=set
	SaslEnabledMechanisms []*string `json:"saslEnabledMechanisms,omitempty" tf:"sasl_enabled_mechanisms,omitempty"`

	SocketReceiveBufferBytes *string `json:"socketReceiveBufferBytes,omitempty" tf:"socket_receive_buffer_bytes,omitempty"`

	SocketSendBufferBytes *string `json:"socketSendBufferBytes,omitempty" tf:"socket_send_buffer_bytes,omitempty"`
}

type KafkaConfigParameters struct {

	// +kubebuilder:validation:Optional
	AutoCreateTopicsEnable *bool `json:"autoCreateTopicsEnable,omitempty" tf:"auto_create_topics_enable,omitempty"`

	// Kafka topic settings. For more information, see
	// the official documentation
	// and the Kafka documentation.
	// +kubebuilder:validation:Optional
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultReplicationFactor *string `json:"defaultReplicationFactor,omitempty" tf:"default_replication_factor,omitempty"`

	// +kubebuilder:validation:Optional
	LogFlushIntervalMessages *string `json:"logFlushIntervalMessages,omitempty" tf:"log_flush_interval_messages,omitempty"`

	// +kubebuilder:validation:Optional
	LogFlushIntervalMs *string `json:"logFlushIntervalMs,omitempty" tf:"log_flush_interval_ms,omitempty"`

	// +kubebuilder:validation:Optional
	LogFlushSchedulerIntervalMs *string `json:"logFlushSchedulerIntervalMs,omitempty" tf:"log_flush_scheduler_interval_ms,omitempty"`

	// +kubebuilder:validation:Optional
	LogPreallocate *bool `json:"logPreallocate,omitempty" tf:"log_preallocate,omitempty"`

	// +kubebuilder:validation:Optional
	LogRetentionBytes *string `json:"logRetentionBytes,omitempty" tf:"log_retention_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	LogRetentionHours *string `json:"logRetentionHours,omitempty" tf:"log_retention_hours,omitempty"`

	// +kubebuilder:validation:Optional
	LogRetentionMinutes *string `json:"logRetentionMinutes,omitempty" tf:"log_retention_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	LogRetentionMs *string `json:"logRetentionMs,omitempty" tf:"log_retention_ms,omitempty"`

	// +kubebuilder:validation:Optional
	LogSegmentBytes *string `json:"logSegmentBytes,omitempty" tf:"log_segment_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	MessageMaxBytes *string `json:"messageMaxBytes,omitempty" tf:"message_max_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	NumPartitions *string `json:"numPartitions,omitempty" tf:"num_partitions,omitempty"`

	// +kubebuilder:validation:Optional
	OffsetsRetentionMinutes *string `json:"offsetsRetentionMinutes,omitempty" tf:"offsets_retention_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	ReplicaFetchMaxBytes *string `json:"replicaFetchMaxBytes,omitempty" tf:"replica_fetch_max_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	SSLCipherSuites []*string `json:"sslCipherSuites,omitempty" tf:"ssl_cipher_suites,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	SaslEnabledMechanisms []*string `json:"saslEnabledMechanisms,omitempty" tf:"sasl_enabled_mechanisms,omitempty"`

	// +kubebuilder:validation:Optional
	SocketReceiveBufferBytes *string `json:"socketReceiveBufferBytes,omitempty" tf:"socket_receive_buffer_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	SocketSendBufferBytes *string `json:"socketSendBufferBytes,omitempty" tf:"socket_send_buffer_bytes,omitempty"`
}

type KafkaResourcesInitParameters struct {

	// Volume of the storage available to a ZooKeeper host, in gigabytes.
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of ZooKeeper hosts.
	// For more information see the official documentation.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type KafkaResourcesObservation struct {

	// Volume of the storage available to a ZooKeeper host, in gigabytes.
	DiskSize *int64 `json:"diskSize,omitempty" tf:"disk_size,omitempty"`

	// Type of the storage of ZooKeeper hosts.
	// For more information see the official documentation.
	DiskTypeID *string `json:"diskTypeId,omitempty" tf:"disk_type_id,omitempty"`

	ResourcePresetID *string `json:"resourcePresetId,omitempty" tf:"resource_preset_id,omitempty"`
}

type KafkaResourcesParameters struct {

	// Volume of the storage available to a ZooKeeper host, in gigabytes.
	// +kubebuilder:validation:Optional
	DiskSize *int64 `json:"diskSize" tf:"disk_size,omitempty"`

	// Type of the storage of ZooKeeper hosts.
	// For more information see the official documentation.
	// +kubebuilder:validation:Optional
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

type TopicConfigInitParameters struct {
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Kafka topic settings. For more information, see
	// the official documentation
	// and the Kafka documentation.
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	DeleteRetentionMs *string `json:"deleteRetentionMs,omitempty" tf:"delete_retention_ms,omitempty"`

	FileDeleteDelayMs *string `json:"fileDeleteDelayMs,omitempty" tf:"file_delete_delay_ms,omitempty"`

	FlushMessages *string `json:"flushMessages,omitempty" tf:"flush_messages,omitempty"`

	FlushMs *string `json:"flushMs,omitempty" tf:"flush_ms,omitempty"`

	MaxMessageBytes *string `json:"maxMessageBytes,omitempty" tf:"max_message_bytes,omitempty"`

	MinCompactionLagMs *string `json:"minCompactionLagMs,omitempty" tf:"min_compaction_lag_ms,omitempty"`

	MinInsyncReplicas *string `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	Preallocate *bool `json:"preallocate,omitempty" tf:"preallocate,omitempty"`

	RetentionBytes *string `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	RetentionMs *string `json:"retentionMs,omitempty" tf:"retention_ms,omitempty"`

	SegmentBytes *string `json:"segmentBytes,omitempty" tf:"segment_bytes,omitempty"`
}

type TopicConfigObservation struct {
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Kafka topic settings. For more information, see
	// the official documentation
	// and the Kafka documentation.
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	DeleteRetentionMs *string `json:"deleteRetentionMs,omitempty" tf:"delete_retention_ms,omitempty"`

	FileDeleteDelayMs *string `json:"fileDeleteDelayMs,omitempty" tf:"file_delete_delay_ms,omitempty"`

	FlushMessages *string `json:"flushMessages,omitempty" tf:"flush_messages,omitempty"`

	FlushMs *string `json:"flushMs,omitempty" tf:"flush_ms,omitempty"`

	MaxMessageBytes *string `json:"maxMessageBytes,omitempty" tf:"max_message_bytes,omitempty"`

	MinCompactionLagMs *string `json:"minCompactionLagMs,omitempty" tf:"min_compaction_lag_ms,omitempty"`

	MinInsyncReplicas *string `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	Preallocate *bool `json:"preallocate,omitempty" tf:"preallocate,omitempty"`

	RetentionBytes *string `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	RetentionMs *string `json:"retentionMs,omitempty" tf:"retention_ms,omitempty"`

	SegmentBytes *string `json:"segmentBytes,omitempty" tf:"segment_bytes,omitempty"`
}

type TopicConfigParameters struct {

	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Kafka topic settings. For more information, see
	// the official documentation
	// and the Kafka documentation.
	// +kubebuilder:validation:Optional
	CompressionType *string `json:"compressionType,omitempty" tf:"compression_type,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteRetentionMs *string `json:"deleteRetentionMs,omitempty" tf:"delete_retention_ms,omitempty"`

	// +kubebuilder:validation:Optional
	FileDeleteDelayMs *string `json:"fileDeleteDelayMs,omitempty" tf:"file_delete_delay_ms,omitempty"`

	// +kubebuilder:validation:Optional
	FlushMessages *string `json:"flushMessages,omitempty" tf:"flush_messages,omitempty"`

	// +kubebuilder:validation:Optional
	FlushMs *string `json:"flushMs,omitempty" tf:"flush_ms,omitempty"`

	// +kubebuilder:validation:Optional
	MaxMessageBytes *string `json:"maxMessageBytes,omitempty" tf:"max_message_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	MinCompactionLagMs *string `json:"minCompactionLagMs,omitempty" tf:"min_compaction_lag_ms,omitempty"`

	// +kubebuilder:validation:Optional
	MinInsyncReplicas *string `json:"minInsyncReplicas,omitempty" tf:"min_insync_replicas,omitempty"`

	// +kubebuilder:validation:Optional
	Preallocate *bool `json:"preallocate,omitempty" tf:"preallocate,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionBytes *string `json:"retentionBytes,omitempty" tf:"retention_bytes,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionMs *string `json:"retentionMs,omitempty" tf:"retention_ms,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentBytes *string `json:"segmentBytes,omitempty" tf:"segment_bytes,omitempty"`
}

type TopicInitParameters struct {

	// The name of the topic.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of the topic's partitions.
	Partitions *int64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Amount of data copies (replicas) for the topic in the cluster.
	ReplicationFactor *int64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// User-defined settings for the topic. The structure is documented below.
	TopicConfig []TopicConfigInitParameters `json:"topicConfig,omitempty" tf:"topic_config,omitempty"`
}

type TopicObservation struct {

	// The name of the topic.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of the topic's partitions.
	Partitions *int64 `json:"partitions,omitempty" tf:"partitions,omitempty"`

	// Amount of data copies (replicas) for the topic in the cluster.
	ReplicationFactor *int64 `json:"replicationFactor,omitempty" tf:"replication_factor,omitempty"`

	// User-defined settings for the topic. The structure is documented below.
	TopicConfig []TopicConfigObservation `json:"topicConfig,omitempty" tf:"topic_config,omitempty"`
}

type TopicParameters struct {

	// The name of the topic.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The number of the topic's partitions.
	// +kubebuilder:validation:Optional
	Partitions *int64 `json:"partitions" tf:"partitions,omitempty"`

	// Amount of data copies (replicas) for the topic in the cluster.
	// +kubebuilder:validation:Optional
	ReplicationFactor *int64 `json:"replicationFactor" tf:"replication_factor,omitempty"`

	// User-defined settings for the topic. The structure is documented below.
	// +kubebuilder:validation:Optional
	TopicConfig []TopicConfigParameters `json:"topicConfig,omitempty" tf:"topic_config,omitempty"`
}

type UserPermissionInitParameters struct {

	// Set of hosts, to which this permission grants access to.
	// +listType=set
	AllowHosts []*string `json:"allowHosts,omitempty" tf:"allow_hosts,omitempty"`

	// The role type to grant to the topic.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The name of the topic that the permission grants access to.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type UserPermissionObservation struct {

	// Set of hosts, to which this permission grants access to.
	// +listType=set
	AllowHosts []*string `json:"allowHosts,omitempty" tf:"allow_hosts,omitempty"`

	// The role type to grant to the topic.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// The name of the topic that the permission grants access to.
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`
}

type UserPermissionParameters struct {

	// Set of hosts, to which this permission grants access to.
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowHosts []*string `json:"allowHosts,omitempty" tf:"allow_hosts,omitempty"`

	// The role type to grant to the topic.
	// +kubebuilder:validation:Optional
	Role *string `json:"role" tf:"role,omitempty"`

	// The name of the topic that the permission grants access to.
	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName" tf:"topic_name,omitempty"`
}

// KafkaClusterSpec defines the desired state of KafkaCluster
type KafkaClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     KafkaClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider KafkaClusterInitParameters `json:"initProvider,omitempty"`
}

// KafkaClusterStatus defines the observed state of KafkaCluster.
type KafkaClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        KafkaClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// KafkaCluster is the Schema for the KafkaClusters API. Manages a Kafka cluster within Yandex.Cloud.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type KafkaCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.config) || (has(self.initProvider) && has(self.initProvider.config))",message="spec.forProvider.config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   KafkaClusterSpec   `json:"spec"`
	Status KafkaClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KafkaClusterList contains a list of KafkaClusters
type KafkaClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KafkaCluster `json:"items"`
}

// Repository type metadata.
var (
	KafkaCluster_Kind             = "KafkaCluster"
	KafkaCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KafkaCluster_Kind}.String()
	KafkaCluster_KindAPIVersion   = KafkaCluster_Kind + "." + CRDGroupVersion.String()
	KafkaCluster_GroupVersionKind = CRDGroupVersion.WithKind(KafkaCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&KafkaCluster{}, &KafkaClusterList{})
}
