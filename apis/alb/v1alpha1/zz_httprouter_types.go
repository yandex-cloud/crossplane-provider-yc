/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AndPrincipalsHeaderInitParameters struct {

	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value []ValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type AndPrincipalsHeaderObservation struct {

	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value []ValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type AndPrincipalsHeaderParameters struct {

	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value []ValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type AndPrincipalsInitParameters struct {
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	Header []AndPrincipalsHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type AndPrincipalsObservation struct {
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	Header []AndPrincipalsHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type AndPrincipalsParameters struct {

	// +kubebuilder:validation:Optional
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	// +kubebuilder:validation:Optional
	Header []AndPrincipalsHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// +kubebuilder:validation:Optional
	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type HTTPRouterInitParameters struct {

	// An optional description of the HTTP Router. Provide this property when you create the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// Labels to assign to this HTTP Router. A list of key/value pairs.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RouteOptions []RouteOptionsInitParameters `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type HTTPRouterObservation struct {

	// The HTTP Router creation timestamp.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// An optional description of the HTTP Router. Provide this property when you create the resource.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// The ID of the HTTP Router.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Labels to assign to this HTTP Router. A list of key/value pairs.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RouteOptions []RouteOptionsObservation `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type HTTPRouterParameters struct {

	// An optional description of the HTTP Router. Provide this property when you create the resource.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/crossplane-provider-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// Labels to assign to this HTTP Router. A list of key/value pairs.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RouteOptions []RouteOptionsParameters `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type PrincipalsInitParameters struct {
	AndPrincipals []AndPrincipalsInitParameters `json:"andPrincipals,omitempty" tf:"and_principals,omitempty"`
}

type PrincipalsObservation struct {
	AndPrincipals []AndPrincipalsObservation `json:"andPrincipals,omitempty" tf:"and_principals,omitempty"`
}

type PrincipalsParameters struct {

	// +kubebuilder:validation:Optional
	AndPrincipals []AndPrincipalsParameters `json:"andPrincipals" tf:"and_principals,omitempty"`
}

type RbacInitParameters struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Principals []PrincipalsInitParameters `json:"principals,omitempty" tf:"principals,omitempty"`
}

type RbacObservation struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Principals []PrincipalsObservation `json:"principals,omitempty" tf:"principals,omitempty"`
}

type RbacParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Principals []PrincipalsParameters `json:"principals" tf:"principals,omitempty"`
}

type RouteOptionsInitParameters struct {
	Rbac []RbacInitParameters `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// The ID of the HTTP Router.
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type RouteOptionsObservation struct {
	Rbac []RbacObservation `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// The ID of the HTTP Router.
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type RouteOptionsParameters struct {

	// +kubebuilder:validation:Optional
	Rbac []RbacParameters `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// The ID of the HTTP Router.
	// +kubebuilder:validation:Optional
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type ValueInitParameters struct {
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ValueObservation struct {
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ValueParameters struct {

	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

// HTTPRouterSpec defines the desired state of HTTPRouter
type HTTPRouterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HTTPRouterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HTTPRouterInitParameters `json:"initProvider,omitempty"`
}

// HTTPRouterStatus defines the observed state of HTTPRouter.
type HTTPRouterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HTTPRouterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HTTPRouter is the Schema for the HTTPRouters API. The HTTP router defines the routing rules for HTTP requests to backend groups.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type HTTPRouter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HTTPRouterSpec   `json:"spec"`
	Status            HTTPRouterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HTTPRouterList contains a list of HTTPRouters
type HTTPRouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HTTPRouter `json:"items"`
}

// Repository type metadata.
var (
	HTTPRouter_Kind             = "HTTPRouter"
	HTTPRouter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HTTPRouter_Kind}.String()
	HTTPRouter_KindAPIVersion   = HTTPRouter_Kind + "." + CRDGroupVersion.String()
	HTTPRouter_GroupVersionKind = CRDGroupVersion.WithKind(HTTPRouter_Kind)
)

func init() {
	SchemeBuilder.Register(&HTTPRouter{}, &HTTPRouterList{})
}
