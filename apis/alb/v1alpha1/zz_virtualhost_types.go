/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AndPrincipalsHeaderValueInitParameters struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type AndPrincipalsHeaderValueObservation struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type AndPrincipalsHeaderValueParameters struct {

	// Match exactly.
	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type DirectResponseActionInitParameters struct {

	// Response body text.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied, unauthenticated, unimplemented, internal, unavailable.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type DirectResponseActionObservation struct {

	// Response body text.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied, unauthenticated, unimplemented, internal, unavailable.
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type DirectResponseActionParameters struct {

	// Response body text.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied, unauthenticated, unimplemented, internal, unavailable.
	// +kubebuilder:validation:Optional
	Status *float64 `json:"status,omitempty" tf:"status,omitempty"`
}

type FqmnInitParameters struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type FqmnObservation struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type FqmnParameters struct {

	// Match exactly.
	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type GRPCMatchInitParameters struct {

	// If not set, all services/methods are assumed. The structure is documented below.
	Fqmn []FqmnInitParameters `json:"fqmn,omitempty" tf:"fqmn,omitempty"`
}

type GRPCMatchObservation struct {

	// If not set, all services/methods are assumed. The structure is documented below.
	Fqmn []FqmnObservation `json:"fqmn,omitempty" tf:"fqmn,omitempty"`
}

type GRPCMatchParameters struct {

	// If not set, all services/methods are assumed. The structure is documented below.
	// +kubebuilder:validation:Optional
	Fqmn []FqmnParameters `json:"fqmn,omitempty" tf:"fqmn,omitempty"`
}

type GRPCRouteActionInitParameters struct {

	// If set, will automatically rewrite host.
	AutoHostRewrite *bool `json:"autoHostRewrite,omitempty" tf:"auto_host_rewrite,omitempty"`

	// Backend group to route requests.
	// +crossplane:generate:reference:type=BackendGroup
	BackendGroupID *string `json:"backendGroupId,omitempty" tf:"backend_group_id,omitempty"`

	// Reference to a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDRef *v1.Reference `json:"backendGroupIdRef,omitempty" tf:"-"`

	// Selector for a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDSelector *v1.Selector `json:"backendGroupIdSelector,omitempty" tf:"-"`

	// Host rewrite specifier.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Specifies the idle timeout (time without any data transfer for the active request) for the route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no per-route idle timeout.
	IdleTimeout *string `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is 60 seconds.
	MaxTimeout *string `json:"maxTimeout,omitempty" tf:"max_timeout,omitempty"`
}

type GRPCRouteActionObservation struct {

	// If set, will automatically rewrite host.
	AutoHostRewrite *bool `json:"autoHostRewrite,omitempty" tf:"auto_host_rewrite,omitempty"`

	// Backend group to route requests.
	BackendGroupID *string `json:"backendGroupId,omitempty" tf:"backend_group_id,omitempty"`

	// Host rewrite specifier.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Specifies the idle timeout (time without any data transfer for the active request) for the route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no per-route idle timeout.
	IdleTimeout *string `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is 60 seconds.
	MaxTimeout *string `json:"maxTimeout,omitempty" tf:"max_timeout,omitempty"`
}

type GRPCRouteActionParameters struct {

	// If set, will automatically rewrite host.
	// +kubebuilder:validation:Optional
	AutoHostRewrite *bool `json:"autoHostRewrite,omitempty" tf:"auto_host_rewrite,omitempty"`

	// Backend group to route requests.
	// +crossplane:generate:reference:type=BackendGroup
	// +kubebuilder:validation:Optional
	BackendGroupID *string `json:"backendGroupId,omitempty" tf:"backend_group_id,omitempty"`

	// Reference to a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDRef *v1.Reference `json:"backendGroupIdRef,omitempty" tf:"-"`

	// Selector for a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDSelector *v1.Selector `json:"backendGroupIdSelector,omitempty" tf:"-"`

	// Host rewrite specifier.
	// +kubebuilder:validation:Optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Specifies the idle timeout (time without any data transfer for the active request) for the route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no per-route idle timeout.
	// +kubebuilder:validation:Optional
	IdleTimeout *string `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is 60 seconds.
	// +kubebuilder:validation:Optional
	MaxTimeout *string `json:"maxTimeout,omitempty" tf:"max_timeout,omitempty"`
}

type GRPCRouteInitParameters struct {

	// Checks "/" prefix by default. The structure is documented below.
	GRPCMatch []GRPCMatchInitParameters `json:"grpcMatch,omitempty" tf:"grpc_match,omitempty"`

	// GRPC route action resource. The structure is documented below.
	GRPCRouteAction []GRPCRouteActionInitParameters `json:"grpcRouteAction,omitempty" tf:"grpc_route_action,omitempty"`

	// GRPC status response action resource. The structure is documented below.
	GRPCStatusResponseAction []GRPCStatusResponseActionInitParameters `json:"grpcStatusResponseAction,omitempty" tf:"grpc_status_response_action,omitempty"`
}

type GRPCRouteObservation struct {

	// Checks "/" prefix by default. The structure is documented below.
	GRPCMatch []GRPCMatchObservation `json:"grpcMatch,omitempty" tf:"grpc_match,omitempty"`

	// GRPC route action resource. The structure is documented below.
	GRPCRouteAction []GRPCRouteActionObservation `json:"grpcRouteAction,omitempty" tf:"grpc_route_action,omitempty"`

	// GRPC status response action resource. The structure is documented below.
	GRPCStatusResponseAction []GRPCStatusResponseActionObservation `json:"grpcStatusResponseAction,omitempty" tf:"grpc_status_response_action,omitempty"`
}

type GRPCRouteParameters struct {

	// Checks "/" prefix by default. The structure is documented below.
	// +kubebuilder:validation:Optional
	GRPCMatch []GRPCMatchParameters `json:"grpcMatch,omitempty" tf:"grpc_match,omitempty"`

	// GRPC route action resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	GRPCRouteAction []GRPCRouteActionParameters `json:"grpcRouteAction,omitempty" tf:"grpc_route_action,omitempty"`

	// GRPC status response action resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	GRPCStatusResponseAction []GRPCStatusResponseActionParameters `json:"grpcStatusResponseAction,omitempty" tf:"grpc_status_response_action,omitempty"`
}

type GRPCStatusResponseActionInitParameters struct {

	// The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied, unauthenticated, unimplemented, internal, unavailable.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type GRPCStatusResponseActionObservation struct {

	// The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied, unauthenticated, unimplemented, internal, unavailable.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type GRPCStatusResponseActionParameters struct {

	// The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied, unauthenticated, unimplemented, internal, unavailable.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type HTTPMatchInitParameters struct {

	// List of methods(strings).
	// +listType=set
	HTTPMethod []*string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// If not set, '/' is assumed. The structure is documented below.
	Path []PathInitParameters `json:"path,omitempty" tf:"path,omitempty"`
}

type HTTPMatchObservation struct {

	// List of methods(strings).
	// +listType=set
	HTTPMethod []*string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// If not set, '/' is assumed. The structure is documented below.
	Path []PathObservation `json:"path,omitempty" tf:"path,omitempty"`
}

type HTTPMatchParameters struct {

	// List of methods(strings).
	// +kubebuilder:validation:Optional
	// +listType=set
	HTTPMethod []*string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// If not set, '/' is assumed. The structure is documented below.
	// +kubebuilder:validation:Optional
	Path []PathParameters `json:"path,omitempty" tf:"path,omitempty"`
}

type HTTPRouteActionInitParameters struct {

	// If set, will automatically rewrite host.
	AutoHostRewrite *bool `json:"autoHostRewrite,omitempty" tf:"auto_host_rewrite,omitempty"`

	// Backend group to route requests.
	// +crossplane:generate:reference:type=BackendGroup
	BackendGroupID *string `json:"backendGroupId,omitempty" tf:"backend_group_id,omitempty"`

	// Reference to a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDRef *v1.Reference `json:"backendGroupIdRef,omitempty" tf:"-"`

	// Selector for a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDSelector *v1.Selector `json:"backendGroupIdSelector,omitempty" tf:"-"`

	// Host rewrite specifier.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Specifies the idle timeout (time without any data transfer for the active request) for the route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no per-route idle timeout.
	IdleTimeout *string `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// If not empty, matched path prefix will be replaced by this value.
	PrefixRewrite *string `json:"prefixRewrite,omitempty" tf:"prefix_rewrite,omitempty"`

	// Specifies the request timeout (overall time request processing is allowed to take) for the route. If not set, default is 60 seconds.
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// List of upgrade types. Only specified upgrade types will be allowed. For example, "websocket".
	// +listType=set
	UpgradeTypes []*string `json:"upgradeTypes,omitempty" tf:"upgrade_types,omitempty"`
}

type HTTPRouteActionObservation struct {

	// If set, will automatically rewrite host.
	AutoHostRewrite *bool `json:"autoHostRewrite,omitempty" tf:"auto_host_rewrite,omitempty"`

	// Backend group to route requests.
	BackendGroupID *string `json:"backendGroupId,omitempty" tf:"backend_group_id,omitempty"`

	// Host rewrite specifier.
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Specifies the idle timeout (time without any data transfer for the active request) for the route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no per-route idle timeout.
	IdleTimeout *string `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// If not empty, matched path prefix will be replaced by this value.
	PrefixRewrite *string `json:"prefixRewrite,omitempty" tf:"prefix_rewrite,omitempty"`

	// Specifies the request timeout (overall time request processing is allowed to take) for the route. If not set, default is 60 seconds.
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// List of upgrade types. Only specified upgrade types will be allowed. For example, "websocket".
	// +listType=set
	UpgradeTypes []*string `json:"upgradeTypes,omitempty" tf:"upgrade_types,omitempty"`
}

type HTTPRouteActionParameters struct {

	// If set, will automatically rewrite host.
	// +kubebuilder:validation:Optional
	AutoHostRewrite *bool `json:"autoHostRewrite,omitempty" tf:"auto_host_rewrite,omitempty"`

	// Backend group to route requests.
	// +crossplane:generate:reference:type=BackendGroup
	// +kubebuilder:validation:Optional
	BackendGroupID *string `json:"backendGroupId,omitempty" tf:"backend_group_id,omitempty"`

	// Reference to a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDRef *v1.Reference `json:"backendGroupIdRef,omitempty" tf:"-"`

	// Selector for a BackendGroup to populate backendGroupId.
	// +kubebuilder:validation:Optional
	BackendGroupIDSelector *v1.Selector `json:"backendGroupIdSelector,omitempty" tf:"-"`

	// Host rewrite specifier.
	// +kubebuilder:validation:Optional
	HostRewrite *string `json:"hostRewrite,omitempty" tf:"host_rewrite,omitempty"`

	// Specifies the idle timeout (time without any data transfer for the active request) for the route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no per-route idle timeout.
	// +kubebuilder:validation:Optional
	IdleTimeout *string `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// If not empty, matched path prefix will be replaced by this value.
	// +kubebuilder:validation:Optional
	PrefixRewrite *string `json:"prefixRewrite,omitempty" tf:"prefix_rewrite,omitempty"`

	// Specifies the request timeout (overall time request processing is allowed to take) for the route. If not set, default is 60 seconds.
	// +kubebuilder:validation:Optional
	Timeout *string `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// List of upgrade types. Only specified upgrade types will be allowed. For example, "websocket".
	// +kubebuilder:validation:Optional
	// +listType=set
	UpgradeTypes []*string `json:"upgradeTypes,omitempty" tf:"upgrade_types,omitempty"`
}

type HTTPRouteInitParameters struct {

	// Direct response action resource. The structure is documented below.
	DirectResponseAction []DirectResponseActionInitParameters `json:"directResponseAction,omitempty" tf:"direct_response_action,omitempty"`

	// Checks "/" prefix by default. The structure is documented below.
	HTTPMatch []HTTPMatchInitParameters `json:"httpMatch,omitempty" tf:"http_match,omitempty"`

	// HTTP route action resource. The structure is documented below.
	HTTPRouteAction []HTTPRouteActionInitParameters `json:"httpRouteAction,omitempty" tf:"http_route_action,omitempty"`

	// Redirect action resource. The structure is documented below.
	RedirectAction []RedirectActionInitParameters `json:"redirectAction,omitempty" tf:"redirect_action,omitempty"`
}

type HTTPRouteObservation struct {

	// Direct response action resource. The structure is documented below.
	DirectResponseAction []DirectResponseActionObservation `json:"directResponseAction,omitempty" tf:"direct_response_action,omitempty"`

	// Checks "/" prefix by default. The structure is documented below.
	HTTPMatch []HTTPMatchObservation `json:"httpMatch,omitempty" tf:"http_match,omitempty"`

	// HTTP route action resource. The structure is documented below.
	HTTPRouteAction []HTTPRouteActionObservation `json:"httpRouteAction,omitempty" tf:"http_route_action,omitempty"`

	// Redirect action resource. The structure is documented below.
	RedirectAction []RedirectActionObservation `json:"redirectAction,omitempty" tf:"redirect_action,omitempty"`
}

type HTTPRouteParameters struct {

	// Direct response action resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	DirectResponseAction []DirectResponseActionParameters `json:"directResponseAction,omitempty" tf:"direct_response_action,omitempty"`

	// Checks "/" prefix by default. The structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPMatch []HTTPMatchParameters `json:"httpMatch,omitempty" tf:"http_match,omitempty"`

	// HTTP route action resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPRouteAction []HTTPRouteActionParameters `json:"httpRouteAction,omitempty" tf:"http_route_action,omitempty"`

	// Redirect action resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	RedirectAction []RedirectActionParameters `json:"redirectAction,omitempty" tf:"redirect_action,omitempty"`
}

type HeaderValueInitParameters struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type HeaderValueObservation struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type HeaderValueParameters struct {

	// Match exactly.
	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type ModifyRequestHeadersInitParameters struct {

	// Append string to the header value.
	Append *string `json:"append,omitempty" tf:"append,omitempty"`

	// name of the header to modify.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If set, remove the header.
	Remove *bool `json:"remove,omitempty" tf:"remove,omitempty"`

	// New value for a header. Header values support the following formatters.
	Replace *string `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ModifyRequestHeadersObservation struct {

	// Append string to the header value.
	Append *string `json:"append,omitempty" tf:"append,omitempty"`

	// name of the header to modify.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If set, remove the header.
	Remove *bool `json:"remove,omitempty" tf:"remove,omitempty"`

	// New value for a header. Header values support the following formatters.
	Replace *string `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ModifyRequestHeadersParameters struct {

	// Append string to the header value.
	// +kubebuilder:validation:Optional
	Append *string `json:"append,omitempty" tf:"append,omitempty"`

	// name of the header to modify.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// If set, remove the header.
	// +kubebuilder:validation:Optional
	Remove *bool `json:"remove,omitempty" tf:"remove,omitempty"`

	// New value for a header. Header values support the following formatters.
	// +kubebuilder:validation:Optional
	Replace *string `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ModifyResponseHeadersInitParameters struct {

	// Append string to the header value.
	Append *string `json:"append,omitempty" tf:"append,omitempty"`

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If set, remove the header.
	Remove *bool `json:"remove,omitempty" tf:"remove,omitempty"`

	// New value for a header. Header values support the following formatters.
	Replace *string `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ModifyResponseHeadersObservation struct {

	// Append string to the header value.
	Append *string `json:"append,omitempty" tf:"append,omitempty"`

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// If set, remove the header.
	Remove *bool `json:"remove,omitempty" tf:"remove,omitempty"`

	// New value for a header. Header values support the following formatters.
	Replace *string `json:"replace,omitempty" tf:"replace,omitempty"`
}

type ModifyResponseHeadersParameters struct {

	// Append string to the header value.
	// +kubebuilder:validation:Optional
	Append *string `json:"append,omitempty" tf:"append,omitempty"`

	// name of the route.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// If set, remove the header.
	// +kubebuilder:validation:Optional
	Remove *bool `json:"remove,omitempty" tf:"remove,omitempty"`

	// New value for a header. Header values support the following formatters.
	// +kubebuilder:validation:Optional
	Replace *string `json:"replace,omitempty" tf:"replace,omitempty"`
}

type PathInitParameters struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type PathObservation struct {

	// Match exactly.
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type PathParameters struct {

	// Match exactly.
	// +kubebuilder:validation:Optional
	Exact *string `json:"exact,omitempty" tf:"exact,omitempty"`

	// Match prefix.
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Match regex.
	// +kubebuilder:validation:Optional
	Regex *string `json:"regex,omitempty" tf:"regex,omitempty"`
}

type PrincipalsAndPrincipalsHeaderInitParameters struct {

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value []HeaderValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type PrincipalsAndPrincipalsHeaderObservation struct {

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value []HeaderValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type PrincipalsAndPrincipalsHeaderParameters struct {

	// name of the route.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value []HeaderValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type PrincipalsAndPrincipalsInitParameters struct {
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	Header []PrincipalsAndPrincipalsHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type PrincipalsAndPrincipalsObservation struct {
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	Header []PrincipalsAndPrincipalsHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type PrincipalsAndPrincipalsParameters struct {

	// +kubebuilder:validation:Optional
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	// +kubebuilder:validation:Optional
	Header []PrincipalsAndPrincipalsHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// +kubebuilder:validation:Optional
	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type RbacPrincipalsAndPrincipalsHeaderInitParameters struct {

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value []AndPrincipalsHeaderValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type RbacPrincipalsAndPrincipalsHeaderObservation struct {

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value []AndPrincipalsHeaderValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type RbacPrincipalsAndPrincipalsHeaderParameters struct {

	// name of the route.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value []AndPrincipalsHeaderValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type RbacPrincipalsAndPrincipalsInitParameters struct {
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	Header []RbacPrincipalsAndPrincipalsHeaderInitParameters `json:"header,omitempty" tf:"header,omitempty"`

	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type RbacPrincipalsAndPrincipalsObservation struct {
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	Header []RbacPrincipalsAndPrincipalsHeaderObservation `json:"header,omitempty" tf:"header,omitempty"`

	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type RbacPrincipalsAndPrincipalsParameters struct {

	// +kubebuilder:validation:Optional
	Any *bool `json:"any,omitempty" tf:"any,omitempty"`

	// +kubebuilder:validation:Optional
	Header []RbacPrincipalsAndPrincipalsHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// +kubebuilder:validation:Optional
	RemoteIP *string `json:"remoteIp,omitempty" tf:"remote_ip,omitempty"`
}

type RbacPrincipalsInitParameters struct {
	AndPrincipals []PrincipalsAndPrincipalsInitParameters `json:"andPrincipals,omitempty" tf:"and_principals,omitempty"`
}

type RbacPrincipalsObservation struct {
	AndPrincipals []PrincipalsAndPrincipalsObservation `json:"andPrincipals,omitempty" tf:"and_principals,omitempty"`
}

type RbacPrincipalsParameters struct {

	// +kubebuilder:validation:Optional
	AndPrincipals []PrincipalsAndPrincipalsParameters `json:"andPrincipals" tf:"and_principals,omitempty"`
}

type RedirectActionInitParameters struct {
	RemoveQuery *bool `json:"removeQuery,omitempty" tf:"remove_query,omitempty"`

	// Replaces hostname.
	ReplaceHost *string `json:"replaceHost,omitempty" tf:"replace_host,omitempty"`

	// Replace path.
	ReplacePath *string `json:"replacePath,omitempty" tf:"replace_path,omitempty"`

	// Replaces port.
	ReplacePort *float64 `json:"replacePort,omitempty" tf:"replace_port,omitempty"`

	// Replace only matched prefix. Example: match:{ prefix_match: "/some" }  redirect: { replace_prefix: "/other" }  will redirect "/something" to "/otherthing".
	ReplacePrefix *string `json:"replacePrefix,omitempty" tf:"replace_prefix,omitempty"`

	// Replaces scheme. If the original scheme is http or https, will also remove the 80 or 443 port, if present.
	ReplaceScheme *string `json:"replaceScheme,omitempty" tf:"replace_scheme,omitempty"`

	// The HTTP status code to use in the redirect response. Supported values are: moved_permanently, found, see_other, temporary_redirect, permanent_redirect.
	ResponseCode *string `json:"responseCode,omitempty" tf:"response_code,omitempty"`
}

type RedirectActionObservation struct {
	RemoveQuery *bool `json:"removeQuery,omitempty" tf:"remove_query,omitempty"`

	// Replaces hostname.
	ReplaceHost *string `json:"replaceHost,omitempty" tf:"replace_host,omitempty"`

	// Replace path.
	ReplacePath *string `json:"replacePath,omitempty" tf:"replace_path,omitempty"`

	// Replaces port.
	ReplacePort *float64 `json:"replacePort,omitempty" tf:"replace_port,omitempty"`

	// Replace only matched prefix. Example: match:{ prefix_match: "/some" }  redirect: { replace_prefix: "/other" }  will redirect "/something" to "/otherthing".
	ReplacePrefix *string `json:"replacePrefix,omitempty" tf:"replace_prefix,omitempty"`

	// Replaces scheme. If the original scheme is http or https, will also remove the 80 or 443 port, if present.
	ReplaceScheme *string `json:"replaceScheme,omitempty" tf:"replace_scheme,omitempty"`

	// The HTTP status code to use in the redirect response. Supported values are: moved_permanently, found, see_other, temporary_redirect, permanent_redirect.
	ResponseCode *string `json:"responseCode,omitempty" tf:"response_code,omitempty"`
}

type RedirectActionParameters struct {

	// +kubebuilder:validation:Optional
	RemoveQuery *bool `json:"removeQuery,omitempty" tf:"remove_query,omitempty"`

	// Replaces hostname.
	// +kubebuilder:validation:Optional
	ReplaceHost *string `json:"replaceHost,omitempty" tf:"replace_host,omitempty"`

	// Replace path.
	// +kubebuilder:validation:Optional
	ReplacePath *string `json:"replacePath,omitempty" tf:"replace_path,omitempty"`

	// Replaces port.
	// +kubebuilder:validation:Optional
	ReplacePort *float64 `json:"replacePort,omitempty" tf:"replace_port,omitempty"`

	// Replace only matched prefix. Example: match:{ prefix_match: "/some" }  redirect: { replace_prefix: "/other" }  will redirect "/something" to "/otherthing".
	// +kubebuilder:validation:Optional
	ReplacePrefix *string `json:"replacePrefix,omitempty" tf:"replace_prefix,omitempty"`

	// Replaces scheme. If the original scheme is http or https, will also remove the 80 or 443 port, if present.
	// +kubebuilder:validation:Optional
	ReplaceScheme *string `json:"replaceScheme,omitempty" tf:"replace_scheme,omitempty"`

	// The HTTP status code to use in the redirect response. Supported values are: moved_permanently, found, see_other, temporary_redirect, permanent_redirect.
	// +kubebuilder:validation:Optional
	ResponseCode *string `json:"responseCode,omitempty" tf:"response_code,omitempty"`
}

type RouteInitParameters struct {

	// GRPC route resource. The structure is documented below.
	GRPCRoute []GRPCRouteInitParameters `json:"grpcRoute,omitempty" tf:"grpc_route,omitempty"`

	// HTTP route resource. The structure is documented below.
	HTTPRoute []HTTPRouteInitParameters `json:"httpRoute,omitempty" tf:"http_route,omitempty"`

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Route options for the virtual host. The structure is documented below.
	RouteOptions []RouteRouteOptionsInitParameters `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type RouteObservation struct {

	// GRPC route resource. The structure is documented below.
	GRPCRoute []GRPCRouteObservation `json:"grpcRoute,omitempty" tf:"grpc_route,omitempty"`

	// HTTP route resource. The structure is documented below.
	HTTPRoute []HTTPRouteObservation `json:"httpRoute,omitempty" tf:"http_route,omitempty"`

	// name of the route.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Route options for the virtual host. The structure is documented below.
	RouteOptions []RouteRouteOptionsObservation `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type RouteOptionsRbacInitParameters struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Principals []RbacPrincipalsInitParameters `json:"principals,omitempty" tf:"principals,omitempty"`
}

type RouteOptionsRbacObservation struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Principals []RbacPrincipalsObservation `json:"principals,omitempty" tf:"principals,omitempty"`
}

type RouteOptionsRbacParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Principals []RbacPrincipalsParameters `json:"principals" tf:"principals,omitempty"`
}

type RouteOptionsRbacPrincipalsInitParameters struct {
	AndPrincipals []RbacPrincipalsAndPrincipalsInitParameters `json:"andPrincipals,omitempty" tf:"and_principals,omitempty"`
}

type RouteOptionsRbacPrincipalsObservation struct {
	AndPrincipals []RbacPrincipalsAndPrincipalsObservation `json:"andPrincipals,omitempty" tf:"and_principals,omitempty"`
}

type RouteOptionsRbacPrincipalsParameters struct {

	// +kubebuilder:validation:Optional
	AndPrincipals []RbacPrincipalsAndPrincipalsParameters `json:"andPrincipals" tf:"and_principals,omitempty"`
}

type RouteParameters struct {

	// GRPC route resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	GRPCRoute []GRPCRouteParameters `json:"grpcRoute,omitempty" tf:"grpc_route,omitempty"`

	// HTTP route resource. The structure is documented below.
	// +kubebuilder:validation:Optional
	HTTPRoute []HTTPRouteParameters `json:"httpRoute,omitempty" tf:"http_route,omitempty"`

	// name of the route.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Route options for the virtual host. The structure is documented below.
	// +kubebuilder:validation:Optional
	RouteOptions []RouteRouteOptionsParameters `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type RouteRouteOptionsInitParameters struct {

	// RBAC configuration.
	Rbac []RouteOptionsRbacInitParameters `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// SWS profile ID.
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type RouteRouteOptionsObservation struct {

	// RBAC configuration.
	Rbac []RouteOptionsRbacObservation `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// SWS profile ID.
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type RouteRouteOptionsParameters struct {

	// RBAC configuration.
	// +kubebuilder:validation:Optional
	Rbac []RouteOptionsRbacParameters `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// SWS profile ID.
	// +kubebuilder:validation:Optional
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type VirtualHostInitParameters struct {

	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard hosts are supported in the form of '.foo.com' or '-bar.foo.com'. If not specified, all domains will be matched.
	// +listType=set
	Authority []*string `json:"authority,omitempty" tf:"authority,omitempty"`

	// The ID of the HTTP router to which the virtual host belongs.
	// +crossplane:generate:reference:type=HTTPRouter
	HTTPRouterID *string `json:"httpRouterId,omitempty" tf:"http_router_id,omitempty"`

	// Reference to a HTTPRouter to populate httpRouterId.
	// +kubebuilder:validation:Optional
	HTTPRouterIDRef *v1.Reference `json:"httpRouterIdRef,omitempty" tf:"-"`

	// Selector for a HTTPRouter to populate httpRouterId.
	// +kubebuilder:validation:Optional
	HTTPRouterIDSelector *v1.Selector `json:"httpRouterIdSelector,omitempty" tf:"-"`

	// Apply the following modifications to the request headers. The structure is documented below.
	ModifyRequestHeaders []ModifyRequestHeadersInitParameters `json:"modifyRequestHeaders,omitempty" tf:"modify_request_headers,omitempty"`

	// Apply the following modifications to the response headers. The structure is documented below.
	ModifyResponseHeaders []ModifyResponseHeadersInitParameters `json:"modifyResponseHeaders,omitempty" tf:"modify_response_headers,omitempty"`

	// Name of the virtual host. Provided by the client when the virtual host is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A Route resource. Routes are matched in-order. Be careful when adding them to the end. For instance, having http '/' match first makes all other routes unused. The structure is documented below.
	Route []RouteInitParameters `json:"route,omitempty" tf:"route,omitempty"`

	// Route options for the virtual host. The structure is documented below.
	RouteOptions []VirtualHostRouteOptionsInitParameters `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type VirtualHostObservation struct {

	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard hosts are supported in the form of '.foo.com' or '-bar.foo.com'. If not specified, all domains will be matched.
	// +listType=set
	Authority []*string `json:"authority,omitempty" tf:"authority,omitempty"`

	// The ID of the HTTP router to which the virtual host belongs.
	HTTPRouterID *string `json:"httpRouterId,omitempty" tf:"http_router_id,omitempty"`

	// The ID of the virtual host.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Apply the following modifications to the request headers. The structure is documented below.
	ModifyRequestHeaders []ModifyRequestHeadersObservation `json:"modifyRequestHeaders,omitempty" tf:"modify_request_headers,omitempty"`

	// Apply the following modifications to the response headers. The structure is documented below.
	ModifyResponseHeaders []ModifyResponseHeadersObservation `json:"modifyResponseHeaders,omitempty" tf:"modify_response_headers,omitempty"`

	// Name of the virtual host. Provided by the client when the virtual host is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A Route resource. Routes are matched in-order. Be careful when adding them to the end. For instance, having http '/' match first makes all other routes unused. The structure is documented below.
	Route []RouteObservation `json:"route,omitempty" tf:"route,omitempty"`

	// Route options for the virtual host. The structure is documented below.
	RouteOptions []VirtualHostRouteOptionsObservation `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type VirtualHostParameters struct {

	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard hosts are supported in the form of '.foo.com' or '-bar.foo.com'. If not specified, all domains will be matched.
	// +kubebuilder:validation:Optional
	// +listType=set
	Authority []*string `json:"authority,omitempty" tf:"authority,omitempty"`

	// The ID of the HTTP router to which the virtual host belongs.
	// +crossplane:generate:reference:type=HTTPRouter
	// +kubebuilder:validation:Optional
	HTTPRouterID *string `json:"httpRouterId,omitempty" tf:"http_router_id,omitempty"`

	// Reference to a HTTPRouter to populate httpRouterId.
	// +kubebuilder:validation:Optional
	HTTPRouterIDRef *v1.Reference `json:"httpRouterIdRef,omitempty" tf:"-"`

	// Selector for a HTTPRouter to populate httpRouterId.
	// +kubebuilder:validation:Optional
	HTTPRouterIDSelector *v1.Selector `json:"httpRouterIdSelector,omitempty" tf:"-"`

	// Apply the following modifications to the request headers. The structure is documented below.
	// +kubebuilder:validation:Optional
	ModifyRequestHeaders []ModifyRequestHeadersParameters `json:"modifyRequestHeaders,omitempty" tf:"modify_request_headers,omitempty"`

	// Apply the following modifications to the response headers. The structure is documented below.
	// +kubebuilder:validation:Optional
	ModifyResponseHeaders []ModifyResponseHeadersParameters `json:"modifyResponseHeaders,omitempty" tf:"modify_response_headers,omitempty"`

	// Name of the virtual host. Provided by the client when the virtual host is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A Route resource. Routes are matched in-order. Be careful when adding them to the end. For instance, having http '/' match first makes all other routes unused. The structure is documented below.
	// +kubebuilder:validation:Optional
	Route []RouteParameters `json:"route,omitempty" tf:"route,omitempty"`

	// Route options for the virtual host. The structure is documented below.
	// +kubebuilder:validation:Optional
	RouteOptions []VirtualHostRouteOptionsParameters `json:"routeOptions,omitempty" tf:"route_options,omitempty"`
}

type VirtualHostRouteOptionsInitParameters struct {

	// RBAC configuration.
	Rbac []VirtualHostRouteOptionsRbacInitParameters `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// SWS profile ID.
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type VirtualHostRouteOptionsObservation struct {

	// RBAC configuration.
	Rbac []VirtualHostRouteOptionsRbacObservation `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// SWS profile ID.
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type VirtualHostRouteOptionsParameters struct {

	// RBAC configuration.
	// +kubebuilder:validation:Optional
	Rbac []VirtualHostRouteOptionsRbacParameters `json:"rbac,omitempty" tf:"rbac,omitempty"`

	// SWS profile ID.
	// +kubebuilder:validation:Optional
	SecurityProfileID *string `json:"securityProfileId,omitempty" tf:"security_profile_id,omitempty"`
}

type VirtualHostRouteOptionsRbacInitParameters struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Principals []RouteOptionsRbacPrincipalsInitParameters `json:"principals,omitempty" tf:"principals,omitempty"`
}

type VirtualHostRouteOptionsRbacObservation struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Principals []RouteOptionsRbacPrincipalsObservation `json:"principals,omitempty" tf:"principals,omitempty"`
}

type VirtualHostRouteOptionsRbacParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Principals []RouteOptionsRbacPrincipalsParameters `json:"principals" tf:"principals,omitempty"`
}

// VirtualHostSpec defines the desired state of VirtualHost
type VirtualHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualHostParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VirtualHostInitParameters `json:"initProvider,omitempty"`
}

// VirtualHostStatus defines the observed state of VirtualHost.
type VirtualHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VirtualHost is the Schema for the VirtualHosts API. Virtual hosts combine routes belonging to the same set of domains.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type VirtualHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   VirtualHostSpec   `json:"spec"`
	Status VirtualHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualHostList contains a list of VirtualHosts
type VirtualHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualHost `json:"items"`
}

// Repository type metadata.
var (
	VirtualHost_Kind             = "VirtualHost"
	VirtualHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualHost_Kind}.String()
	VirtualHost_KindAPIVersion   = VirtualHost_Kind + "." + CRDGroupVersion.String()
	VirtualHost_GroupVersionKind = CRDGroupVersion.WithKind(VirtualHost_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualHost{}, &VirtualHostList{})
}
