/*
Copyright 2022 YANDEX LLC
This is modified version of the software, made by the Crossplane Authors
and available at: https://github.com/crossplane-contrib/provider-jet-template

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SymmetricKeyIAMBindingInitParameters struct {

	// Identities that will be granted the privilege in role.
	// Each entry can have one of the following values:
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The role that should be applied. See roles.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	SleepAfter *float64 `json:"sleepAfter,omitempty" tf:"sleep_after,omitempty"`

	// The Yandex Key Management Service Symmetric Key ID to apply a binding to.
	SymmetricKeyID *string `json:"symmetricKeyId,omitempty" tf:"symmetric_key_id,omitempty"`
}

type SymmetricKeyIAMBindingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Identities that will be granted the privilege in role.
	// Each entry can have one of the following values:
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The role that should be applied. See roles.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	SleepAfter *float64 `json:"sleepAfter,omitempty" tf:"sleep_after,omitempty"`

	// The Yandex Key Management Service Symmetric Key ID to apply a binding to.
	SymmetricKeyID *string `json:"symmetricKeyId,omitempty" tf:"symmetric_key_id,omitempty"`
}

type SymmetricKeyIAMBindingParameters struct {

	// Identities that will be granted the privilege in role.
	// Each entry can have one of the following values:
	// +kubebuilder:validation:Optional
	// +listType=set
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The role that should be applied. See roles.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// +kubebuilder:validation:Optional
	SleepAfter *float64 `json:"sleepAfter,omitempty" tf:"sleep_after,omitempty"`

	// The Yandex Key Management Service Symmetric Key ID to apply a binding to.
	// +kubebuilder:validation:Optional
	SymmetricKeyID *string `json:"symmetricKeyId,omitempty" tf:"symmetric_key_id,omitempty"`
}

// SymmetricKeyIAMBindingSpec defines the desired state of SymmetricKeyIAMBinding
type SymmetricKeyIAMBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SymmetricKeyIAMBindingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SymmetricKeyIAMBindingInitParameters `json:"initProvider,omitempty"`
}

// SymmetricKeyIAMBindingStatus defines the observed state of SymmetricKeyIAMBinding.
type SymmetricKeyIAMBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SymmetricKeyIAMBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SymmetricKeyIAMBinding is the Schema for the SymmetricKeyIAMBindings API. Allows management of a single IAM binding for a
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type SymmetricKeyIAMBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.members) || (has(self.initProvider) && has(self.initProvider.members))",message="spec.forProvider.members is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.role) || (has(self.initProvider) && has(self.initProvider.role))",message="spec.forProvider.role is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.symmetricKeyId) || (has(self.initProvider) && has(self.initProvider.symmetricKeyId))",message="spec.forProvider.symmetricKeyId is a required parameter"
	Spec   SymmetricKeyIAMBindingSpec   `json:"spec"`
	Status SymmetricKeyIAMBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SymmetricKeyIAMBindingList contains a list of SymmetricKeyIAMBindings
type SymmetricKeyIAMBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SymmetricKeyIAMBinding `json:"items"`
}

// Repository type metadata.
var (
	SymmetricKeyIAMBinding_Kind             = "SymmetricKeyIAMBinding"
	SymmetricKeyIAMBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SymmetricKeyIAMBinding_Kind}.String()
	SymmetricKeyIAMBinding_KindAPIVersion   = SymmetricKeyIAMBinding_Kind + "." + CRDGroupVersion.String()
	SymmetricKeyIAMBinding_GroupVersionKind = CRDGroupVersion.WithKind(SymmetricKeyIAMBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&SymmetricKeyIAMBinding{}, &SymmetricKeyIAMBindingList{})
}
